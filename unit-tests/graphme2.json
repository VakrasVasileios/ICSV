{
  "dependencies": [
    {
      "from": "me2::animation::MovingPathAnimation",
      "to": "me2::animation::Animation",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::MovingAnimator",
      "to": "me2::animation::Animator",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::MovingAnimator",
      "to": "me2::destruction::AllocationManager",
      "types": {
        "Friend": 1
      }
    },
    {
      "from": "me2::animation::MovingAnimator",
      "to": "me2::animation::MovingAnimation",
      "types": {
        "ClassField": 1,
        "MemberExpr": 10,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::animation::MovingAnimation",
      "to": "me2::animation::Animation",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::MovingAnimation",
      "to": "me2::terrain::Displacement",
      "types": {
        "ClassField": 1,
        "MethodReturn": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest",
      "to": "me2::input::logical::tests::InputDispatcherTest",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::terrain::TileActions",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "MethodArg": 2
      }
    },
    {
      "from": "me2::animation::FrameRangeAnimation",
      "to": "me2::animation::MovingAnimation",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
      "to": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
      "to": "me2::input::logical::InputThrottler",
      "types": {
        "MemberExpr": 1
      }
    },
    {
      "from": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
      "to": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
      "to": "me2::input::physical::EventDispatcher",
      "types": {
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::rendering::BasicPoint<int>::BasicPoint",
      "to": "me2::rendering::BasicPoint",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
      "to": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
      "to": "me2::input::physical::EventDispatcher",
      "types": {
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::boot::AcodecAddonError",
      "to": "me2::boot::BootError",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::boot::BootError",
      "to": "me2::error::RuntimeError",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::boot::FontError",
      "to": "me2::boot::BootError",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::boot::ImageAddonError",
      "to": "me2::boot::BootError",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::boot::InitError",
      "to": "me2::boot::BootError",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::boot::KeyboardInstallationError",
      "to": "me2::boot::BootError",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::FlashAnimator",
      "to": "me2::animation::Animator",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::FlashAnimator",
      "to": "me2::destruction::AllocationManager",
      "types": {
        "Friend": 1
      }
    },
    {
      "from": "me2::animation::FlashAnimator",
      "to": "me2::animation::FlashAnimation",
      "types": {
        "ClassField": 1,
        "MemberExpr": 12,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::animation::Animator",
      "to": "me2::destruction::LatelyDestroyable",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::Animator",
      "to": "me2::animation::AnimatorManager",
      "types": {
        "ClassField": 1,
        "MemberExpr": 16
      }
    },
    {
      "from": "me2::destruction::LatelyDestroyable",
      "to": "me2::destruction::DestructionManager",
      "types": {
        "Friend": 1,
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::destruction::DestructionManager",
      "to": "me2::destruction::LatelyDestroyable",
      "types": {
        "MemberExpr": 4,
        "MethodArg": 2,
        "MethodDefinition": 1
      }
    },
    {
      "from": "me2::animation::AnimatorManager",
      "to": "me2::animation::Animator",
      "types": {
        "Friend": 1,
        "MemberExpr": 22,
        "MethodArg": 5,
        "MethodDefinition": 4
      }
    },
    {
      "from": "me2::animation::FlashAnimation",
      "to": "me2::animation::Animation",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::app::App",
      "to": "me2::app::Game",
      "types": {
        "ClassField": 1,
        "MemberExpr": 4,
        "MethodReturn": 2
      }
    },
    {
      "from": "me2::animation::FrameListAnimator",
      "to": "me2::animation::Animator",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::FrameListAnimator",
      "to": "me2::destruction::AllocationManager",
      "types": {
        "Friend": 1
      }
    },
    {
      "from": "me2::animation::FrameListAnimator",
      "to": "me2::animation::FrameListAnimation",
      "types": {
        "ClassField": 1,
        "MemberExpr": 26,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::animation::FrameListAnimation",
      "to": "me2::animation::MovingAnimation",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times",
      "to": "me2::input::logical::InputThrottler",
      "types": {
        "MemberExpr": 1
      }
    },
    {
      "from": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
      "to": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
      "to": "me2::input::logical::InputThrottler",
      "types": {
        "MemberExpr": 1
      }
    },
    {
      "from": "me2::animation::FrameRangeAnimator",
      "to": "me2::animation::Animator",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::FrameRangeAnimator",
      "to": "me2::destruction::AllocationManager",
      "types": {
        "Friend": 1
      }
    },
    {
      "from": "me2::animation::FrameRangeAnimator",
      "to": "me2::animation::FrameRangeAnimation",
      "types": {
        "ClassField": 1,
        "MemberExpr": 28,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::terrain::CircularBackground",
      "to": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
      "types": {
        "MemberExpr": 30,
        "MethodArg": 2
      }
    },
    {
      "from": "me2::terrain::CircularBackground",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "MemberExpr": 22,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::terrain::CircularBackground",
      "to": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
      "types": {
        "MemberExpr": 10
      }
    },
    {
      "from": "me2::terrain::CircularBackground",
      "to": "me2::terrain::Tileset",
      "types": {
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::animation::MovingPathAnimation::PathEntry",
      "to": "me2::animation::MovingPathAnimation",
      "types": {
        "NestedClass": 1
      }
    },
    {
      "from": "me2::animation::MovingPathAnimation::PathEntry",
      "to": "me2::terrain::Displacement",
      "types": {
        "ClassField": 1
      }
    },
    {
      "from": "me2::character::MotionQuantizer",
      "to": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
      "types": {
        "ClassField": 1,
        "MemberExpr": 4
      }
    },
    {
      "from": "me2::character::MotionQuantizer",
      "to": "me2::terrain::Displacement",
      "types": {
        "MemberExpr": 28,
        "MethodArg": 1,
        "MethodDefinition": 1
      }
    },
    {
      "from": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
      "to": "me2::rendering::BasicSize",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::destruction::LatelyDestroyable",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::destruction::AllocationManager",
      "types": {
        "Friend": 1
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::physics::GravityHandler",
      "types": {
        "ClassField": 1,
        "MethodReturn": 2
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::character::MotionQuantizer",
      "types": {
        "ClassField": 1,
        "MemberExpr": 6,
        "MethodReturn": 2
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
      "types": {
        "ClassField": 1,
        "MemberExpr": 12,
        "MethodDefinition": 2,
        "MethodReturn": 1
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::animation::AnimationFilm",
      "types": {
        "ClassField": 1,
        "MemberExpr": 8,
        "MethodArg": 1,
        "MethodReturn": 1
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "ClassField": 1,
        "MemberExpr": 8,
        "MethodArg": 2,
        "MethodDefinition": 1,
        "MethodReturn": 1
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::character::SpriteManager",
      "types": {
        "ClassField": 1,
        "MemberExpr": 4
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::rendering::BoundingArea",
      "types": {
        "MemberExpr": 10,
        "MethodArg": 1,
        "MethodReturn": 1
      }
    },
    {
      "from": "me2::character::Sprite",
      "to": "me2::character::Clipper",
      "types": {
        "MemberExpr": 2,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
      "to": "me2::rendering::BasicRect",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::physics::GravityHandler",
      "to": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
      "types": {
        "MethodArg": 1
      }
    },
    {
      "from": "me2::animation::AnimationFilm",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "MethodArg": 1
      }
    },
    {
      "from": "me2::animation::AnimationFilm",
      "to": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
      "types": {
        "MethodReturn": 1
      }
    },
    {
      "from": "me2::character::SpriteManager",
      "to": "me2::character::Sprite",
      "types": {
        "Friend": 1,
        "MemberExpr": 16,
        "MethodArg": 4,
        "MethodDefinition": 1
      }
    },
    {
      "from": "me2::character::Clipper",
      "to": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
      "types": {
        "MemberExpr": 32,
        "MethodArg": 2,
        "MethodDefinition": 1
      }
    },
    {
      "from": "me2::character::Clipper",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "MemberExpr": 28,
        "MethodArg": 2
      }
    },
    {
      "from": "me2::character::Clipper",
      "to": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
      "types": {
        "MemberExpr": 12
      }
    },
    {
      "from": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
      "to": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
      "to": "me2::input::physical::KeyboardDispatcher",
      "types": {
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::character::CollisionChecker",
      "to": "me2::character::Sprite",
      "types": {
        "MemberExpr": 4,
        "MethodArg": 8
      }
    },
    {
      "from": "me2::boot::AudioInstallationError",
      "to": "me2::boot::BootError",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher",
      "to": "me2::input::logical::InputDispatcher",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::animation::TickAnimation",
      "to": "me2::animation::Animation",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::rendering::BoundingPolygon",
      "to": "me2::rendering::BoundingArea",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "to": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher",
      "types": {
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "to": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher",
      "types": {
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest",
      "to": "me2::input::logical::tests::InputDispatcherTest",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::(anonymousnamespace)::Generator<float>::Generator",
      "to": "me2::input::logical::tests::(anonymousnamespace)::Generator",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "to": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher",
      "types": {
        "MemberExpr": 3
      }
    },
    {
      "from": "me2::rendering::BoundingCircle",
      "to": "me2::rendering::BoundingArea",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::rendering::BoundingCircle",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "ClassField": 1,
        "MethodReturn": 1
      }
    },
    {
      "from": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher",
      "to": "me2::input::logical::InputDispatcher",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "to": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher",
      "types": {
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
      "to": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
      "to": "me2::input::physical::KeyboardDispatcher",
      "types": {
        "MemberExpr": 1
      }
    },
    {
      "from": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher",
      "to": "me2::input::logical::InputDispatcher",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::animation::ScrollAnimator",
      "to": "me2::animation::Animator",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::ScrollAnimator",
      "to": "me2::destruction::AllocationManager",
      "types": {
        "Friend": 1
      }
    },
    {
      "from": "me2::animation::ScrollAnimator",
      "to": "me2::animation::ScrollAnimation",
      "types": {
        "ClassField": 1,
        "MemberExpr": 12,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::animation::ScrollAnimator",
      "to": "me2::animation::ScrollAnimation::ScrollEntry",
      "types": {
        "MemberExpr": 4
      }
    },
    {
      "from": "me2::animation::ScrollAnimation::ScrollEntry",
      "to": "me2::animation::ScrollAnimation",
      "types": {
        "NestedClass": 1
      }
    },
    {
      "from": "me2::animation::ScrollAnimation::ScrollEntry",
      "to": "me2::terrain::Displacement",
      "types": {
        "ClassField": 1
      }
    },
    {
      "from": "me2::animation::ScrollAnimation",
      "to": "me2::animation::Animation",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::terrain::Tileset",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "MethodArg": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest",
      "to": "me2::input::logical::tests::InputDispatcherTest",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "to": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher",
      "types": {
        "MemberExpr": 3
      }
    },
    {
      "from": "me2::animation::TickAnimator",
      "to": "me2::animation::Animator",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::TickAnimator",
      "to": "me2::destruction::AllocationManager",
      "types": {
        "Friend": 1
      }
    },
    {
      "from": "me2::animation::TickAnimator",
      "to": "me2::animation::TickAnimation",
      "types": {
        "ClassField": 1,
        "MemberExpr": 10,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::boot::TTFError",
      "to": "me2::boot::BootError",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::terrain::TileLayer",
      "to": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
      "types": {
        "ClassField": 1,
        "MemberExpr": 24
      }
    },
    {
      "from": "me2::terrain::TileLayer",
      "to": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
      "types": {
        "ClassField": 1,
        "MemberExpr": 38,
        "MethodArg": 4
      }
    },
    {
      "from": "me2::terrain::TileLayer",
      "to": "me2::terrain::Tileset",
      "types": {
        "ClassField": 1,
        "MemberExpr": 2,
        "MethodReturn": 2
      }
    },
    {
      "from": "me2::terrain::TileLayer",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "MemberExpr": 28,
        "MethodArg": 2
      }
    },
    {
      "from": "me2::terrain::TileLayer",
      "to": "me2::terrain::Displacement",
      "types": {
        "MemberExpr": 4,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "to": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher",
      "types": {
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::animation::MovingPathAnimator",
      "to": "me2::animation::Animator",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::animation::MovingPathAnimator",
      "to": "me2::destruction::AllocationManager",
      "types": {
        "Friend": 1
      }
    },
    {
      "from": "me2::animation::MovingPathAnimator",
      "to": "me2::animation::MovingPathAnimation",
      "types": {
        "ClassField": 1,
        "MemberExpr": 12,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::animation::MovingPathAnimator",
      "to": "me2::animation::MovingPathAnimation::PathEntry",
      "types": {
        "MemberExpr": 4
      }
    },
    {
      "from": "me2::boot::PrimitivesError",
      "to": "me2::boot::BootError",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::rendering::BoundingBox",
      "to": "me2::rendering::BoundingArea",
      "types": {
        "Inherit": 1,
        "MemberExpr": 2,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::rendering::BoundingBox",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "ClassField": 2,
        "MemberExpr": 92,
        "MethodArg": 2,
        "MethodReturn": 2
      }
    },
    {
      "from": "me2::rendering::BoundingBox",
      "to": "me2::rendering::BoundingCircle",
      "types": {
        "MemberExpr": 2,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::rendering::BoundingBox",
      "to": "me2::rendering::BoundingPolygon",
      "types": {
        "MemberExpr": 2,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::rendering::BoundingBox",
      "to": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
      "types": {
        "MemberExpr": 4,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::terrain::GridLayer",
      "to": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
      "types": {
        "ClassField": 1,
        "MemberExpr": 74,
        "MethodArg": 9
      }
    },
    {
      "from": "me2::terrain::GridLayer",
      "to": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
      "types": {
        "ClassField": 2,
        "MemberExpr": 48
      }
    },
    {
      "from": "me2::terrain::GridLayer",
      "to": "me2::rendering::BasicPoint<int>::BasicPoint",
      "types": {
        "MemberExpr": 60,
        "MethodArg": 5
      }
    },
    {
      "from": "me2::terrain::GridLayer",
      "to": "me2::terrain::Displacement",
      "types": {
        "MemberExpr": 8,
        "MethodArg": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "to": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher",
      "types": {
        "MemberExpr": 3
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "to": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher",
      "types": {
        "MemberExpr": 2
      }
    },
    {
      "from": "me2::error::LogicError",
      "to": "me2::error::ErrorSource",
      "types": {
        "ClassField": 1,
        "MethodReturn": 1
      }
    },
    {
      "from": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks",
      "to": "me2::app::Game",
      "types": {
        "MemberExpr": 8
      }
    },
    {
      "from": "me2::input::logical::tests::(anonymousnamespace)::Generator<int>::Generator",
      "to": "me2::input::logical::tests::(anonymousnamespace)::Generator",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
      "to": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
      "to": "me2::app::Game",
      "types": {
        "MemberExpr": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "to": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher",
      "types": {
        "MemberExpr": 3
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "to": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher",
      "types": {
        "MemberExpr": 3
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "to": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher",
      "types": {
        "MemberExpr": 3
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "types": {
        "ClassTemplateParent": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "to": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest",
      "types": {
        "Inherit": 1
      }
    },
    {
      "from": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "to": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher",
      "types": {
        "MemberExpr": 2
      }
    }
  ],
  "headers": [
    "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolutionfwd.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/utils/concepts.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/error/error.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/error/error_checking.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/resources/read_text_map.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_path.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/timing/system_clock.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/timing/frame_observer.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/terrain/generate_grid.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/rendering/rendering.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/rendering/tinting.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/rendering/video_access.hpp",
    "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/destruction/deferred_ptr.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/utils/iterators.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/utils/random.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_throttler.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/effects/lighting_darkening.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/resources/resources.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_factory.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_pool.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
    "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp"
  ],
  "sources": [
    "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
    "/home/vkrs/Documents/projects/me2/src/resources/read_text_map.cpp",
    "/home/vkrs/Documents/projects/me2/src/timing/system_clock.cpp",
    "/home/vkrs/Documents/projects/me2/src/timing/frame_observer.cpp",
    "/home/vkrs/Documents/projects/me2/src/physics/accel.cpp",
    "/home/vkrs/Documents/projects/me2/src/character/clipper.cpp",
    "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
    "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
    "/home/vkrs/Documents/projects/me2/src/character/motion_quantizer.cpp",
    "/home/vkrs/Documents/projects/me2/src/terrain/generate_grid.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/scroll_animator.cpp",
    "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
    "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/resources/resource_path.cpp",
    "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.cpp",
    "/home/vkrs/Documents/projects/me2/src/error/error_handling.cpp",
    "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/rendering/bitmap.cpp",
    "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
    "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/tick_animator.cpp",
    "/home/vkrs/Documents/projects/me2/src/physics/gravity_handler.cpp",
    "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/moving_animator.cpp",
    "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/error/error_reporting.cpp",
    "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
    "/home/vkrs/Documents/projects/me2/src/destruction/lately_destroyable.cpp",
    "/home/vkrs/Documents/projects/me2/src/rendering/tinting.cpp",
    "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/frame_list_animator.cpp",
    "/home/vkrs/Documents/projects/me2/src/app/app.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/flash_animator.cpp",
    "/home/vkrs/Documents/projects/me2/src/boot/boot.cpp",
    "/home/vkrs/Documents/projects/me2/src/effects/lighting_darkening.cpp",
    "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
    "/home/vkrs/Documents/projects/me2/tests/tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/input/logical/input_throttler.cpp",
    "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
    "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
    "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/moving_path_animator.cpp",
    "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/app/game.cpp",
    "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
    "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
    "/home/vkrs/Documents/projects/me2/src/rendering/video_access.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/animation_film.cpp",
    "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
    "/home/vkrs/Documents/projects/me2/src/animation/frame_range_animator.cpp"
  ],
  "structures": {
    "me2::animation::Animation": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::animation::Animation::id": {
          "access": "private",
          "full_type": "std::string",
          "name": "id",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 26
          },
          "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::Animation::Animation(class me2::animation::Animation &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Animation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 20
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animation::Animation(const class me2::animation::Animation &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Animation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animation::Animation(const class me2::animation::Animation &) noexcept(false)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Animation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animation::Animation(const std::string &)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Animation",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animation::Animation(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Animation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animation::GetId(void) const -> const std::string &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetId",
          "ret_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 12
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animation::operator=(class me2::animation::Animation &&) -> class me2::animation::Animation &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::Animation",
              "name": "",
              "src_info": {
                "col": 29,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
                "line": 23
              },
              "type": "me2::animation::Animation"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::Animation",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 23
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animation::operator=(const class me2::animation::Animation &) -> class me2::animation::Animation &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::Animation",
              "name": "",
              "src_info": {
                "col": 34,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
                "line": 22
              },
              "type": "me2::animation::Animation"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::Animation",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 22
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animation::~Animation(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Animation",
          "ret_type": "void",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Animation",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation.hpp",
        "line": 8
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::AnimationFilm": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::animation::AnimationFilm::bmp": {
          "access": "private",
          "full_type": "ALLEGRO_BITMAP &",
          "name": "bmp",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 37
          },
          "type": "ALLEGRO_BITMAP"
        },
        "me2::animation::AnimationFilm::boxes": {
          "access": "private",
          "full_type": "me2::animation::AnimationFilm::Boxes",
          "name": "boxes",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 38
          },
          "type": "std::vector<me2::rendering::BasicRect<int,unsignedshort>,std::allocator<me2::rendering::BasicRect<int,unsignedshort>>>::vector"
        },
        "me2::animation::AnimationFilm::id": {
          "access": "private",
          "full_type": "std::string",
          "name": "id",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 36
          },
          "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::AnimationFilm::AnimationFilm(class me2::animation::AnimationFilm &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AnimationFilm",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 12
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::AnimationFilm(const class me2::animation::AnimationFilm &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AnimationFilm",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 12
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::AnimationFilm(const std::string, ALLEGRO_BITMAP &, const me2::animation::AnimationFilm::Boxes &)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AnimationFilm",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::DisplayFrame(ALLEGRO_BITMAP &, const me2::animation::AnimationFilm::Point &, me2::animation::AnimationFilm::byte)": {
          "access": "public",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 69,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animation_film.cpp",
                "line": 5
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            },
            "dest": {
              "full_type": "ALLEGRO_BITMAP",
              "name": "dest",
              "src_info": {
                "col": 50,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animation_film.cpp",
                "line": 5
              },
              "type": "ALLEGRO_BITMAP"
            },
            "frameno": {
              "full_type": "me2::animation::AnimationFilm::byte",
              "name": "frameno",
              "src_info": {
                "col": 39,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animation_film.cpp",
                "line": 6
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "DisplayFrame",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animation_film.cpp",
            "line": 5
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::GetBitmap(void) -> ALLEGRO_BITMAP &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetBitmap",
          "ret_type": "ALLEGRO_BITMAP",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 26
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::GetBitmap(void) const -> const ALLEGRO_BITMAP &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetBitmap",
          "ret_type": "ALLEGRO_BITMAP",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 25
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::GetFrameBox(me2::animation::AnimationFilm::byte) const -> const me2::animation::AnimationFilm::Rect &": {
          "access": "public",
          "args": {
            "frameno": {
              "full_type": "me2::animation::AnimationFilm::byte",
              "name": "frameno",
              "src_info": {
                "col": 25,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
                "line": 28
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetFrameBox",
          "ret_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 28
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::GetId(void) const -> const std::string &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetId",
          "ret_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::GetTotalFrames(void) const -> me2::animation::AnimationFilm::byte": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTotalFrames",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 24
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::operator=(class me2::animation::AnimationFilm &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::AnimationFilm",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
                "line": 12
              },
              "type": "me2::animation::AnimationFilm"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::AnimationFilm",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 12
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::operator=(const class me2::animation::AnimationFilm &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::AnimationFilm",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
                "line": 12
              },
              "type": "me2::animation::AnimationFilm"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::AnimationFilm",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 12
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimationFilm::~AnimationFilm(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~AnimationFilm",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
            "line": 12
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "AnimationFilm",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animation_film.hpp",
        "line": 12
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::Animator": {
      "bases": [
        "me2::destruction::LatelyDestroyable"
      ],
      "contains": null,
      "fields": {
        "me2::animation::Animator::last_time": {
          "access": "private",
          "full_type": "me2::animation::Animator::Timestamp",
          "name": "last_time",
          "src_info": {
            "col": 13,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 62
          },
          "type": null
        },
        "me2::animation::Animator::manager": {
          "access": "private",
          "full_type": "class me2::animation::AnimatorManager &",
          "name": "manager",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 69
          },
          "type": "me2::animation::AnimatorManager"
        },
        "me2::animation::Animator::on_finish": {
          "access": "private",
          "full_type": "me2::animation::Animator::OnFinish",
          "name": "on_finish",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 65
          },
          "type": "std::function<void(classme2::animation::Animator&)>::function"
        },
        "me2::animation::Animator::on_resume": {
          "access": "private",
          "full_type": "me2::animation::Animator::OnResume",
          "name": "on_resume",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 68
          },
          "type": "std::function<void(classme2::animation::Animator&)>::function"
        },
        "me2::animation::Animator::on_start": {
          "access": "private",
          "full_type": "me2::animation::Animator::OnStart",
          "name": "on_start",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 66
          },
          "type": "std::function<void(classme2::animation::Animator&)>::function"
        },
        "me2::animation::Animator::on_stop": {
          "access": "private",
          "full_type": "me2::animation::Animator::OnStop",
          "name": "on_stop",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 67
          },
          "type": "std::function<void(classme2::animation::Animator&)>::function"
        },
        "me2::animation::Animator::state": {
          "access": "private",
          "full_type": "enum me2::animation::Animator::State",
          "name": "state",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 64
          },
          "type": null
        },
        "me2::animation::Animator::stopped_time": {
          "access": "private",
          "full_type": "me2::animation::Animator::Timestamp",
          "name": "stopped_time",
          "src_info": {
            "col": 13,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 63
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::Animator::Animator(class me2::animation::Animator &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Animator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 43
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::Animator(class me2::animation::AnimatorManager &)": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Animator",
          "ret_type": "void",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 8
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::Animator(const class me2::animation::Animator &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Animator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 42
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::Finish(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Finish",
          "ret_type": "void",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 55
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::GetLastTime(void) const -> me2::animation::Animator::Timestamp": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetLastTime",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 48
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::GetState(void) const -> enum me2::animation::Animator::State": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetState",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 49
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::HasFinished(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "HasFinished",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::HasStopped(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "HasStopped",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 25
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::IsRunning(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsRunning",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 24
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::NotifyFinished(void)": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyFinished",
          "ret_type": "void",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 35
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::NotifyResumed(void)": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyResumed",
          "ret_type": "void",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 50
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::NotifyStarted(void)": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyStarted",
          "ret_type": "void",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 40
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::NotifyStopped(void)": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyStopped",
          "ret_type": "void",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 45
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::Resume(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
                "line": 27
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 4,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Resume",
          "ret_type": "void",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 27
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::SetLastTime(me2::animation::Animator::Timestamp)": {
          "access": "protected",
          "args": {
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 30,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
                "line": 51
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetLastTime",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 51
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::SetOnFinish(const me2::animation::Animator::OnFinish &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::Animator&)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
                "line": 27
              },
              "type": "std::function<void(classme2::animation::Animator&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnFinish",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::SetOnResume(const me2::animation::Animator::OnResume &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::Animator&)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
                "line": 30
              },
              "type": "std::function<void(classme2::animation::Animator&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnResume",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 30
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::SetOnStart(const me2::animation::Animator::OnStart &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::Animator&)>::function",
              "name": "f",
              "src_info": {
                "col": 34,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
                "line": 28
              },
              "type": "std::function<void(classme2::animation::Animator&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnStart",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 28
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::SetOnStop(const me2::animation::Animator::OnStop &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::Animator&)>::function",
              "name": "f",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
                "line": 29
              },
              "type": "std::function<void(classme2::animation::Animator&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnStop",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 29
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::SetState(enum me2::animation::Animator::State)": {
          "access": "protected",
          "args": {
            "_state": {
              "full_type": "enum me2::animation::Animator::State",
              "name": "_state",
              "src_info": {
                "col": 23,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
                "line": 52
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetState",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 52
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::Stop(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
                "line": 19
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 6,
          "literals": 0,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "Stop",
          "ret_type": "void",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 19
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::TimeShift(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "offset": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "offset",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
                "line": 33
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TimeShift",
          "ret_type": "void",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 33
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::Animator::operator=(class me2::animation::Animator &&) -> class me2::animation::Animator &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::Animator",
              "name": "",
              "src_info": {
                "col": 28,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
                "line": 46
              },
              "type": "me2::animation::Animator"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::Animator",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 46
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::operator=(const class me2::animation::Animator &) -> class me2::animation::Animator &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::Animator",
              "name": "",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
                "line": 45
              },
              "type": "me2::animation::Animator"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::Animator",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
            "line": 45
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::Animator::~Animator(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 4,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Animator",
          "ret_type": "void",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator.cpp",
            "line": 13
          },
          "statements": 3,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Animator",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator.hpp",
        "line": 13
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::AnimatorManager": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::animation::AnimatorManager::running": {
          "access": "private",
          "full_type": "std::set<Animator *>",
          "name": "running",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
            "line": 29
          },
          "type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set"
        },
        "me2::animation::AnimatorManager::suspended": {
          "access": "private",
          "full_type": "std::set<Animator *>",
          "name": "suspended",
          "src_info": {
            "col": 32,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
            "line": 29
          },
          "type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set"
        }
      },
      "friends": [
        "me2::animation::Animator"
      ],
      "methods": {
        "me2::animation::AnimatorManager::AnimatorManager(class me2::animation::AnimatorManager &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AnimatorManager",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::AnimatorManager(const class me2::animation::AnimatorManager &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AnimatorManager",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::Cancel(class me2::animation::Animator &)": {
          "access": "private",
          "args": {
            "a": {
              "full_type": "me2::animation::Animator",
              "name": "a",
              "src_info": {
                "col": 40,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 49
              },
              "type": "me2::animation::Animator"
            }
          },
          "branches": 3,
          "definitions": null,
          "lines": 5,
          "literals": 15,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Cancel",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
            "line": 49
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::Destroy(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": {
            "__begin2": {
              "full_type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 26
              },
              "type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator"
            },
            "__end2": {
              "full_type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator",
              "name": "__end2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 26
              },
              "type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator"
            },
            "__range2": {
              "full_type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set",
              "name": "__range2",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 26
              },
              "type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set"
            },
            "a": {
              "full_type": "me2::animation::Animator",
              "name": "a",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 26
              },
              "type": "me2::animation::Animator"
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Destroy",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
            "line": 25
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::IsRegistered(class me2::animation::Animator &) const -> _Bool": {
          "access": "public",
          "args": {
            "a": {
              "full_type": "me2::animation::Animator",
              "name": "a",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 7
              },
              "type": "me2::animation::Animator"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsRegistered",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
            "line": 7
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::MarkAsRunning(class me2::animation::Animator &)": {
          "access": "private",
          "args": {
            "a": {
              "full_type": "me2::animation::Animator",
              "name": "a",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 30
              },
              "type": "me2::animation::Animator"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 4,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "MarkAsRunning",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
            "line": 30
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::MarkAsSuspended(class me2::animation::Animator &)": {
          "access": "private",
          "args": {
            "a": {
              "full_type": "me2::animation::Animator",
              "name": "a",
              "src_info": {
                "col": 49,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 36
              },
              "type": "me2::animation::Animator"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 4,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "MarkAsSuspended",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
            "line": 36
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::Progress(me2::animation::AnimatorManager::Timestamp)": {
          "access": "public",
          "args": {
            "currtime": {
              "full_type": "me2::animation::AnimatorManager::Timestamp",
              "name": "currtime",
              "src_info": {
                "col": 42,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 11
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": {
            "__begin2": {
              "full_type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 13
              },
              "type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator"
            },
            "__end2": {
              "full_type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator",
              "name": "__end2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 13
              },
              "type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator"
            },
            "__range2": {
              "full_type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set",
              "name": "__range2",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 13
              },
              "type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set"
            },
            "a": {
              "full_type": "me2::animation::Animator",
              "name": "a",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 13
              },
              "type": "me2::animation::Animator"
            },
            "copied": {
              "full_type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set",
              "name": "copied",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 12
              },
              "type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set"
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Progress",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
            "line": 11
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::Register(class me2::animation::Animator &)": {
          "access": "private",
          "args": {
            "a": {
              "full_type": "me2::animation::Animator",
              "name": "a",
              "src_info": {
                "col": 42,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 42
              },
              "type": "me2::animation::Animator"
            }
          },
          "branches": 3,
          "definitions": null,
          "lines": 5,
          "literals": 15,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Register",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
            "line": 42
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::Stop(me2::animation::AnimatorManager::Timestamp)": {
          "access": "public",
          "args": {
            "t": {
              "full_type": "me2::animation::AnimatorManager::Timestamp",
              "name": "t",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 20
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": {
            "__begin2": {
              "full_type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 22
              },
              "type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator"
            },
            "__end2": {
              "full_type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator",
              "name": "__end2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 22
              },
              "type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator"
            },
            "__range2": {
              "full_type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set",
              "name": "__range2",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 22
              },
              "type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set"
            },
            "a": {
              "full_type": "me2::animation::Animator",
              "name": "a",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 22
              },
              "type": "me2::animation::Animator"
            },
            "copied": {
              "full_type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set",
              "name": "copied",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 21
              },
              "type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set"
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Stop",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
            "line": 20
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::TimeShift(me2::animation::AnimatorManager::Timestamp)": {
          "access": "public",
          "args": {
            "dt": {
              "full_type": "me2::animation::AnimatorManager::Timestamp",
              "name": "dt",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 16
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": {
            "__begin2": {
              "full_type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 17
              },
              "type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator"
            },
            "__end2": {
              "full_type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator",
              "name": "__end2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 17
              },
              "type": "std::_Rb_tree_const_iterator<classme2::animation::Animator*>::_Rb_tree_const_iterator"
            },
            "__range2": {
              "full_type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set",
              "name": "__range2",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 17
              },
              "type": "std::set<classme2::animation::Animator*,std::less<classme2::animation::Animator*>,std::allocator<classme2::animation::Animator*>>::set"
            },
            "a": {
              "full_type": "me2::animation::Animator",
              "name": "a",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
                "line": 17
              },
              "type": "me2::animation::Animator"
            }
          },
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TimeShift",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/animator_manager.cpp",
            "line": 16
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::operator=(class me2::animation::AnimatorManager &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::AnimatorManager",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
                "line": 9
              },
              "type": "me2::animation::AnimatorManager"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::AnimatorManager",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::operator=(const class me2::animation::AnimatorManager &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::AnimatorManager",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
                "line": 9
              },
              "type": "me2::animation::AnimatorManager"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::AnimatorManager",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::AnimatorManager::~AnimatorManager(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~AnimatorManager",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "AnimatorManager",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/animator_manager.hpp",
        "line": 9
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::FlashAnimation": {
      "bases": [
        "me2::animation::Animation"
      ],
      "contains": null,
      "fields": {
        "me2::animation::FlashAnimation::hide_delay": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "hide_delay",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 29
          },
          "type": null
        },
        "me2::animation::FlashAnimation::reps": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "reps",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 28
          },
          "type": null
        },
        "me2::animation::FlashAnimation::show_delay": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "show_delay",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 30
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::FlashAnimation::Clone(void) const -> std::unique_ptr<Animation>": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Clone",
          "ret_type": "std::unique_ptr<Animation,std::default_delete<Animation>>::unique_ptr",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::FlashAnimation::FlashAnimation(const class me2::animation::FlashAnimation &) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FlashAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimation::FlashAnimation(const std::string &, unsigned int, unsigned int, unsigned int)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FlashAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimation::FlashAnimation(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FlashAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimation::GetHideDelay(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetHideDelay",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 20
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimation::GetReps(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetReps",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 19
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimation::GetShowDelay(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetShowDelay",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 21
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimation::operator=(const class me2::animation::FlashAnimation &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::FlashAnimation",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
                "line": 7
              },
              "type": "me2::animation::FlashAnimation"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::FlashAnimation",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimation::~FlashAnimation(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~FlashAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "FlashAnimation",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animation.hpp",
        "line": 7
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::FlashAnimator": {
      "bases": [
        "me2::animation::Animator"
      ],
      "contains": null,
      "fields": {
        "me2::animation::FlashAnimator::anim": {
          "access": "private",
          "full_type": "class me2::animation::FlashAnimation *",
          "name": "anim",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 34
          },
          "type": "me2::animation::FlashAnimation"
        },
        "me2::animation::FlashAnimator::on_action": {
          "access": "private",
          "full_type": "me2::animation::FlashAnimator::OnAction",
          "name": "on_action",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 33
          },
          "type": "std::function<void(classme2::animation::FlashAnimator&,constclassme2::animation::FlashAnimation&)>::function"
        },
        "me2::animation::FlashAnimator::on_hide_delay": {
          "access": "private",
          "full_type": "_Bool",
          "name": "on_hide_delay",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 36
          },
          "type": null
        },
        "me2::animation::FlashAnimator::rep": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "rep",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 35
          },
          "type": null
        }
      },
      "friends": [
        "me2::destruction::AllocationManager"
      ],
      "methods": {
        "me2::animation::FlashAnimator::FlashAnimator(const class me2::animation::FlashAnimator &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FlashAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::FlashAnimator(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FlashAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 30
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::GetCurrRep(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrRep",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 15
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::GetCurrentDelay(void) const -> unsigned int": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrentDelay",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/flash_animator.cpp",
            "line": 40
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::NotifyAction(void)": {
          "access": "protected",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyAction",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/flash_animator.cpp",
            "line": 46
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::OnShowInterval(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "OnShowInterval",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 16
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::Progress(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "currtime": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "currtime",
              "src_info": {
                "col": 40,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/flash_animator.cpp",
                "line": 7
              },
              "type": null
            }
          },
          "branches": 7,
          "definitions": null,
          "lines": 20,
          "literals": 20,
          "loops": 1,
          "max_scope": 2,
          "method_type": "UserMethod",
          "name": "Progress",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/flash_animator.cpp",
            "line": 7
          },
          "statements": 11,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::FlashAnimator::SetOnAction(const me2::animation::FlashAnimator::OnAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::FlashAnimator&,constclassme2::animation::FlashAnimation&)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
                "line": 13
              },
              "type": "std::function<void(classme2::animation::FlashAnimator&,constclassme2::animation::FlashAnimation&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnAction",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 13
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::Start(class me2::animation::FlashAnimation &, me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "a": {
              "full_type": "me2::animation::FlashAnimation",
              "name": "a",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/flash_animator.cpp",
                "line": 29
              },
              "type": "me2::animation::FlashAnimation"
            },
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 56,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/flash_animator.cpp",
                "line": 29
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 9,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Start",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/flash_animator.cpp",
            "line": 29
          },
          "statements": 7,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::SwapDelays(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SwapDelays",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/flash_animator.cpp",
            "line": 44
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::operator=(const class me2::animation::FlashAnimator &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::FlashAnimator",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
                "line": 9
              },
              "type": "me2::animation::FlashAnimator"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::FlashAnimator",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FlashAnimator::~FlashAnimator(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~FlashAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "FlashAnimator",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/flash_animator.hpp",
        "line": 9
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::FrameListAnimation": {
      "bases": [
        "me2::animation::MovingAnimation"
      ],
      "contains": null,
      "fields": {
        "me2::animation::FrameListAnimation::frames": {
          "access": "private",
          "full_type": "me2::animation::FrameListAnimation::Frames",
          "name": "frames",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
            "line": 28
          },
          "type": "std::vector<unsignedint,std::allocator<unsignedint>>::vector"
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::FrameListAnimation::Clone(void) const -> std::unique_ptr<Animation>": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Clone",
          "ret_type": "std::unique_ptr<Animation,std::default_delete<Animation>>::unique_ptr",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::FrameListAnimation::FrameListAnimation(const class me2::animation::FrameListAnimation &) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameListAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimation::FrameListAnimation(const std::string &, unsigned int, const me2::animation::MovingAnimation::Displacement &, unsigned int, const me2::animation::FrameListAnimation::Frames &)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameListAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimation::FrameListAnimation(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameListAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimation::GetFrames(void) const -> const me2::animation::FrameListAnimation::Frames &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetFrames",
          "ret_type": "std::vector<unsignedint,std::allocator<unsignedint>>::vector",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
            "line": 21
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimation::operator=(const class me2::animation::FrameListAnimation &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::FrameListAnimation",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
                "line": 9
              },
              "type": "me2::animation::FrameListAnimation"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::FrameListAnimation",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimation::~FrameListAnimation(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~FrameListAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "FrameListAnimation",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animation.hpp",
        "line": 9
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::FrameListAnimator": {
      "bases": [
        "me2::animation::Animator"
      ],
      "contains": null,
      "fields": {
        "me2::animation::FrameListAnimator::anim": {
          "access": "private",
          "full_type": "class me2::animation::FrameListAnimation *",
          "name": "anim",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 37
          },
          "type": "me2::animation::FrameListAnimation"
        },
        "me2::animation::FrameListAnimator::iter": {
          "access": "private",
          "full_type": "class FrameListAnimation::Frames::const_iterator",
          "name": "iter",
          "src_info": {
            "col": 46,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 38
          },
          "type": "__gnu_cxx::__normal_iterator<constunsignedint*,std::vector<unsignedint,std::allocator<unsignedint>>>::__normal_iterator"
        },
        "me2::animation::FrameListAnimator::on_action": {
          "access": "private",
          "full_type": "me2::animation::FrameListAnimator::OnAction",
          "name": "on_action",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 36
          },
          "type": "std::function<void(classme2::animation::FrameListAnimator&,constclassme2::animation::FrameListAnimation&)>::function"
        },
        "me2::animation::FrameListAnimator::rep": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "rep",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 39
          },
          "type": null
        }
      },
      "friends": [
        "me2::destruction::AllocationManager"
      ],
      "methods": {
        "me2::animation::FrameListAnimator::FrameListAnimator(const class me2::animation::FrameListAnimator &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameListAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimator::FrameListAnimator(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameListAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 33
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimator::GetCurrFrameIter(void) const -> class FrameListAnimation::Frames::const_iterator": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrFrameIter",
          "ret_type": "__gnu_cxx::__normal_iterator<constunsignedint*,std::vector<unsignedint,std::allocator<unsignedint>>>::__normal_iterator",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 18
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimator::GetCurrRep(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrRep",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 21
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimator::NotifyAction(void)": {
          "access": "protected",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyAction",
          "ret_type": "void",
          "src_info": {
            "col": 25,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_list_animator.cpp",
            "line": 53
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimator::Progress(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "currtime": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "currtime",
              "src_info": {
                "col": 44,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_list_animator.cpp",
                "line": 8
              },
              "type": null
            }
          },
          "branches": 10,
          "definitions": null,
          "lines": 29,
          "literals": 30,
          "loops": 1,
          "max_scope": 3,
          "method_type": "UserMethod",
          "name": "Progress",
          "ret_type": "void",
          "src_info": {
            "col": 25,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_list_animator.cpp",
            "line": 8
          },
          "statements": 15,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::FrameListAnimator::SetOnAction(const me2::animation::FrameListAnimator::OnAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::FrameListAnimator&,constclassme2::animation::FrameListAnimation&)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
                "line": 16
              },
              "type": "std::function<void(classme2::animation::FrameListAnimator&,constclassme2::animation::FrameListAnimation&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnAction",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 16
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimator::Start(class me2::animation::FrameListAnimation &, me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "a": {
              "full_type": "me2::animation::FrameListAnimation",
              "name": "a",
              "src_info": {
                "col": 51,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_list_animator.cpp",
                "line": 39
              },
              "type": "me2::animation::FrameListAnimation"
            },
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 64,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_list_animator.cpp",
                "line": 39
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 12,
          "literals": 11,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Start",
          "ret_type": "void",
          "src_info": {
            "col": 25,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_list_animator.cpp",
            "line": 39
          },
          "statements": 9,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimator::operator=(const class me2::animation::FrameListAnimator &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::FrameListAnimator",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
                "line": 11
              },
              "type": "me2::animation::FrameListAnimator"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::FrameListAnimator",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameListAnimator::~FrameListAnimator(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~FrameListAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
            "line": 34
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "FrameListAnimator",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_list_animator.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::FrameRangeAnimation": {
      "bases": [
        "me2::animation::MovingAnimation"
      ],
      "contains": null,
      "fields": {
        "me2::animation::FrameRangeAnimation::end_frame": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "end_frame",
          "src_info": {
            "col": 28,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 27
          },
          "type": null
        },
        "me2::animation::FrameRangeAnimation::start_frame": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "start_frame",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 27
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::FrameRangeAnimation::Clone(void) const -> std::unique_ptr<Animation>": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Clone",
          "ret_type": "std::unique_ptr<Animation,std::default_delete<Animation>>::unique_ptr",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 22
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::FrameRangeAnimation::FrameRangeAnimation(const class me2::animation::FrameRangeAnimation &) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameRangeAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimation::FrameRangeAnimation(const std::string &, unsigned int, const me2::animation::MovingAnimation::Displacement &, unsigned int, unsigned int, unsigned int)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameRangeAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimation::FrameRangeAnimation(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameRangeAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimation::GetEndFrame(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetEndFrame",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 20
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimation::GetStartFrame(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetStartFrame",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 19
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimation::operator=(const class me2::animation::FrameRangeAnimation &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::FrameRangeAnimation",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
                "line": 7
              },
              "type": "me2::animation::FrameRangeAnimation"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::FrameRangeAnimation",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimation::~FrameRangeAnimation(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~FrameRangeAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "FrameRangeAnimation",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animation.hpp",
        "line": 7
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::FrameRangeAnimator": {
      "bases": [
        "me2::animation::Animator"
      ],
      "contains": null,
      "fields": {
        "me2::animation::FrameRangeAnimator::anim": {
          "access": "private",
          "full_type": "class me2::animation::FrameRangeAnimation *",
          "name": "anim",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 35
          },
          "type": "me2::animation::FrameRangeAnimation"
        },
        "me2::animation::FrameRangeAnimator::frame": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "frame",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 36
          },
          "type": null
        },
        "me2::animation::FrameRangeAnimator::on_action": {
          "access": "private",
          "full_type": "me2::animation::FrameRangeAnimator::OnAction",
          "name": "on_action",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 34
          },
          "type": "std::function<void(classme2::animation::FrameRangeAnimator&,constclassme2::animation::FrameRangeAnimation&)>::function"
        },
        "me2::animation::FrameRangeAnimator::rep": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "rep",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 37
          },
          "type": null
        }
      },
      "friends": [
        "me2::destruction::AllocationManager"
      ],
      "methods": {
        "me2::animation::FrameRangeAnimator::FrameRangeAnimator(const class me2::animation::FrameRangeAnimator &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameRangeAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimator::FrameRangeAnimator(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FrameRangeAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimator::GetCurrFrame(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrFrame",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 18
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimator::GetCurrRep(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrRep",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 19
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimator::NotifyAction(void)": {
          "access": "protected",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyAction",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_range_animator.cpp",
            "line": 49
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimator::Progress(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "currtime": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "currtime",
              "src_info": {
                "col": 45,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_range_animator.cpp",
                "line": 7
              },
              "type": null
            }
          },
          "branches": 11,
          "definitions": null,
          "lines": 30,
          "literals": 35,
          "loops": 1,
          "max_scope": 2,
          "method_type": "UserMethod",
          "name": "Progress",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_range_animator.cpp",
            "line": 7
          },
          "statements": 15,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::FrameRangeAnimator::SetOnAction(const me2::animation::FrameRangeAnimator::OnAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::FrameRangeAnimator&,constclassme2::animation::FrameRangeAnimation&)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
                "line": 16
              },
              "type": "std::function<void(classme2::animation::FrameRangeAnimator&,constclassme2::animation::FrameRangeAnimation&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnAction",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 16
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimator::Start(class me2::animation::FrameRangeAnimation &, me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "a": {
              "full_type": "me2::animation::FrameRangeAnimation",
              "name": "a",
              "src_info": {
                "col": 53,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_range_animator.cpp",
                "line": 39
              },
              "type": "me2::animation::FrameRangeAnimation"
            },
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 66,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_range_animator.cpp",
                "line": 39
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 8,
          "literals": 1,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Start",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/frame_range_animator.cpp",
            "line": 39
          },
          "statements": 7,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimator::operator=(const class me2::animation::FrameRangeAnimator &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::FrameRangeAnimator",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
                "line": 11
              },
              "type": "me2::animation::FrameRangeAnimator"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::FrameRangeAnimator",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::FrameRangeAnimator::~FrameRangeAnimator(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~FrameRangeAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
            "line": 32
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "FrameRangeAnimator",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/frame_range_animator.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::MovingAnimation": {
      "bases": [
        "me2::animation::Animation"
      ],
      "contains": null,
      "fields": {
        "me2::animation::MovingAnimation::delay": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "delay",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 30
          },
          "type": null
        },
        "me2::animation::MovingAnimation::ds": {
          "access": "private",
          "full_type": "me2::animation::MovingAnimation::Displacement",
          "name": "ds",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 29
          },
          "type": "me2::terrain::Displacement"
        },
        "me2::animation::MovingAnimation::reps": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "reps",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 28
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::MovingAnimation::Clone(void) const -> std::unique_ptr<Animation>": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Clone",
          "ret_type": "std::unique_ptr<Animation,std::default_delete<Animation>>::unique_ptr",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::MovingAnimation::GetDelay(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetDelay",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 21
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimation::GetDs(void) const -> const me2::animation::MovingAnimation::Displacement &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetDs",
          "ret_type": "me2::terrain::Displacement",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 20
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimation::GetReps(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetReps",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 19
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimation::MovingAnimation(const class me2::animation::MovingAnimation &) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimation::MovingAnimation(const std::string &, unsigned int, const me2::animation::MovingAnimation::Displacement &, unsigned int)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 12
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimation::MovingAnimation(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimation::operator=(const class me2::animation::MovingAnimation &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::MovingAnimation",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
                "line": 8
              },
              "type": "me2::animation::MovingAnimation"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::MovingAnimation",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimation::~MovingAnimation(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~MovingAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "MovingAnimation",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animation.hpp",
        "line": 8
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::MovingAnimator": {
      "bases": [
        "me2::animation::Animator"
      ],
      "contains": null,
      "fields": {
        "me2::animation::MovingAnimator::anim": {
          "access": "private",
          "full_type": "class me2::animation::MovingAnimation *",
          "name": "anim",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
            "line": 30
          },
          "type": "me2::animation::MovingAnimation"
        },
        "me2::animation::MovingAnimator::curr_rep": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "curr_rep",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
            "line": 31
          },
          "type": null
        },
        "me2::animation::MovingAnimator::on_action": {
          "access": "private",
          "full_type": "me2::animation::MovingAnimator::OnAction",
          "name": "on_action",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
            "line": 29
          },
          "type": "std::function<void(classme2::animation::MovingAnimator&,constclassme2::animation::MovingAnimation&)>::function"
        }
      },
      "friends": [
        "me2::destruction::AllocationManager"
      ],
      "methods": {
        "me2::animation::MovingAnimator::MovingAnimator(const class me2::animation::MovingAnimator &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimator::MovingAnimator(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
            "line": 26
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimator::NotifyAction(void)": {
          "access": "protected",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyAction",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_animator.cpp",
            "line": 35
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimator::Progress(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "currtime": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "currtime",
              "src_info": {
                "col": 41,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_animator.cpp",
                "line": 7
              },
              "type": null
            }
          },
          "branches": 6,
          "definitions": null,
          "lines": 18,
          "literals": 20,
          "loops": 1,
          "max_scope": 2,
          "method_type": "UserMethod",
          "name": "Progress",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_animator.cpp",
            "line": 7
          },
          "statements": 10,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::MovingAnimator::SetOnAction(const me2::animation::MovingAnimator::OnAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::MovingAnimator&,constclassme2::animation::MovingAnimation&)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
                "line": 15
              },
              "type": "std::function<void(classme2::animation::MovingAnimator&,constclassme2::animation::MovingAnimation&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnAction",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
            "line": 15
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimator::Start(class me2::animation::MovingAnimation &, me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "a": {
              "full_type": "me2::animation::MovingAnimation",
              "name": "a",
              "src_info": {
                "col": 45,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_animator.cpp",
                "line": 27
              },
              "type": "me2::animation::MovingAnimation"
            },
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 58,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_animator.cpp",
                "line": 27
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 6,
          "literals": 1,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Start",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_animator.cpp",
            "line": 27
          },
          "statements": 5,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimator::operator=(const class me2::animation::MovingAnimator &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::MovingAnimator",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
                "line": 11
              },
              "type": "me2::animation::MovingAnimator"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::MovingAnimator",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingAnimator::~MovingAnimator(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~MovingAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
            "line": 27
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "MovingAnimator",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_animator.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::MovingPathAnimation": {
      "bases": [
        "me2::animation::Animation"
      ],
      "contains": [
        "me2::animation::MovingPathAnimation::PathEntry"
      ],
      "fields": {
        "me2::animation::MovingPathAnimation::path": {
          "access": "private",
          "full_type": "me2::animation::MovingPathAnimation::Path",
          "name": "path",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 34
          },
          "type": "std::vector<PathEntry,std::allocator<PathEntry>>::vector"
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::MovingPathAnimation::Clone(void) const -> std::unique_ptr<Animation>": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Clone",
          "ret_type": "std::unique_ptr<Animation,std::default_delete<Animation>>::unique_ptr",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 29
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::MovingPathAnimation::GetPath(void) const -> const me2::animation::MovingPathAnimation::Path &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPath",
          "ret_type": "std::vector<PathEntry,std::allocator<PathEntry>>::vector",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::MovingPathAnimation(const class me2::animation::MovingPathAnimation &) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingPathAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::MovingPathAnimation(const std::string &, const me2::animation::MovingPathAnimation::Path &)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingPathAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 22
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::MovingPathAnimation(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingPathAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::operator=(const class me2::animation::MovingPathAnimation &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::MovingPathAnimation",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
                "line": 10
              },
              "type": "me2::animation::MovingPathAnimation"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::MovingPathAnimation",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::~MovingPathAnimation(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~MovingPathAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "MovingPathAnimation",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
        "line": 10
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::MovingPathAnimation::PathEntry": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::animation::MovingPathAnimation::PathEntry::delay": {
          "access": "public",
          "full_type": "unsigned int",
          "name": "delay",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 17
          },
          "type": null
        },
        "me2::animation::MovingPathAnimation::PathEntry::ds": {
          "access": "public",
          "full_type": "me2::animation::MovingPathAnimation::Displacement",
          "name": "ds",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 15
          },
          "type": "me2::terrain::Displacement"
        },
        "me2::animation::MovingPathAnimation::PathEntry::frame": {
          "access": "public",
          "full_type": "unsigned int",
          "name": "frame",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 16
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::MovingPathAnimation::PathEntry::PathEntry(const struct me2::animation::MovingPathAnimation::PathEntry &) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "PathEntry",
          "ret_type": "void",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::PathEntry::PathEntry(struct me2::animation::MovingPathAnimation::PathEntry &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "PathEntry",
          "ret_type": "void",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::PathEntry::PathEntry(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "PathEntry",
          "ret_type": "void",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::PathEntry::operator=(const struct me2::animation::MovingPathAnimation::PathEntry &) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::MovingPathAnimation::PathEntry",
              "name": "",
              "src_info": {
                "col": 10,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
                "line": 14
              },
              "type": "me2::animation::MovingPathAnimation::PathEntry"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::animation::MovingPathAnimation::PathEntry",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::PathEntry::operator=(struct me2::animation::MovingPathAnimation::PathEntry &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::MovingPathAnimation::PathEntry",
              "name": "",
              "src_info": {
                "col": 10,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
                "line": 14
              },
              "type": "me2::animation::MovingPathAnimation::PathEntry"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::animation::MovingPathAnimation::PathEntry",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimation::PathEntry::~PathEntry(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~PathEntry",
          "ret_type": "void",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "PathEntry",
      "namespace": "me2::animation::",
      "nested_parent": "me2::animation::MovingPathAnimation",
      "src_info": {
        "col": 10,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animation.hpp",
        "line": 14
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::MovingPathAnimator": {
      "bases": [
        "me2::animation::Animator"
      ],
      "contains": null,
      "fields": {
        "me2::animation::MovingPathAnimator::anim": {
          "access": "private",
          "full_type": "class me2::animation::MovingPathAnimation *",
          "name": "anim",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
            "line": 36
          },
          "type": "me2::animation::MovingPathAnimation"
        },
        "me2::animation::MovingPathAnimator::iter": {
          "access": "private",
          "full_type": "class MovingPathAnimation::Path::const_iterator",
          "name": "iter",
          "src_info": {
            "col": 45,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
            "line": 37
          },
          "type": "__gnu_cxx::__normal_iterator<conststructme2::animation::MovingPathAnimation::PathEntry*,std::vector<PathEntry,std::allocator<PathEntry>>>::__normal_iterator"
        },
        "me2::animation::MovingPathAnimator::on_action": {
          "access": "private",
          "full_type": "me2::animation::MovingPathAnimator::OnAction",
          "name": "on_action",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
            "line": 35
          },
          "type": "std::function<void(classme2::animation::MovingPathAnimator&,constclassme2::animation::MovingPathAnimation&)>::function"
        }
      },
      "friends": [
        "me2::destruction::AllocationManager"
      ],
      "methods": {
        "me2::animation::MovingPathAnimator::GetCurrPathIter(void) const -> class MovingPathAnimation::Path::const_iterator": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrPathIter",
          "ret_type": "__gnu_cxx::__normal_iterator<conststructme2::animation::MovingPathAnimation::PathEntry*,std::vector<PathEntry,std::allocator<PathEntry>>>::__normal_iterator",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
            "line": 18
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimator::MovingPathAnimator(const class me2::animation::MovingPathAnimator &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingPathAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimator::MovingPathAnimator(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MovingPathAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
            "line": 32
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimator::NotifyAction(void)": {
          "access": "protected",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyAction",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_path_animator.cpp",
            "line": 42
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimator::Progress(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "currtime": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "currtime",
              "src_info": {
                "col": 45,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_path_animator.cpp",
                "line": 8
              },
              "type": null
            }
          },
          "branches": 7,
          "definitions": null,
          "lines": 20,
          "literals": 25,
          "loops": 1,
          "max_scope": 2,
          "method_type": "UserMethod",
          "name": "Progress",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_path_animator.cpp",
            "line": 8
          },
          "statements": 11,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::MovingPathAnimator::SetOnAction(const me2::animation::MovingPathAnimator::OnAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::MovingPathAnimator&,constclassme2::animation::MovingPathAnimation&)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
                "line": 16
              },
              "type": "std::function<void(classme2::animation::MovingPathAnimator&,constclassme2::animation::MovingPathAnimation&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnAction",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
            "line": 16
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimator::Start(class me2::animation::MovingPathAnimation &, me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "a": {
              "full_type": "me2::animation::MovingPathAnimation",
              "name": "a",
              "src_info": {
                "col": 53,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_path_animator.cpp",
                "line": 30
              },
              "type": "me2::animation::MovingPathAnimation"
            },
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 66,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_path_animator.cpp",
                "line": 30
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 10,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Start",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/moving_path_animator.cpp",
            "line": 30
          },
          "statements": 7,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimator::operator=(const class me2::animation::MovingPathAnimator &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::MovingPathAnimator",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
                "line": 11
              },
              "type": "me2::animation::MovingPathAnimator"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::MovingPathAnimator",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::MovingPathAnimator::~MovingPathAnimator(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~MovingPathAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
            "line": 33
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "MovingPathAnimator",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/moving_path_animator.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::ScrollAnimation": {
      "bases": [
        "me2::animation::Animation"
      ],
      "contains": [
        "me2::animation::ScrollAnimation::ScrollEntry"
      ],
      "fields": {
        "me2::animation::ScrollAnimation::scroll": {
          "access": "private",
          "full_type": "me2::animation::ScrollAnimation::Scroll",
          "name": "scroll",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 32
          },
          "type": "std::vector<ScrollEntry,std::allocator<ScrollEntry>>::vector"
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::ScrollAnimation::Clone(void) const -> std::unique_ptr<Animation>": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Clone",
          "ret_type": "std::unique_ptr<Animation,std::default_delete<Animation>>::unique_ptr",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::ScrollAnimation::GetScroll(void) const -> const me2::animation::ScrollAnimation::Scroll &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetScroll",
          "ret_type": "std::vector<ScrollEntry,std::allocator<ScrollEntry>>::vector",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 25
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimation::ScrollAnimation(const class me2::animation::ScrollAnimation &) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ScrollAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimation::ScrollAnimation(const std::string &, const me2::animation::ScrollAnimation::Scroll &)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ScrollAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimation::operator=(const class me2::animation::ScrollAnimation &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::ScrollAnimation",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
                "line": 10
              },
              "type": "me2::animation::ScrollAnimation"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::ScrollAnimation",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimation::~ScrollAnimation(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~ScrollAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 23
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "ScrollAnimation",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
        "line": 10
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::ScrollAnimation::ScrollEntry": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::animation::ScrollAnimation::ScrollEntry::delay": {
          "access": "public",
          "full_type": "unsigned int",
          "name": "delay",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 16
          },
          "type": null
        },
        "me2::animation::ScrollAnimation::ScrollEntry::ds": {
          "access": "public",
          "full_type": "me2::animation::ScrollAnimation::Displacement",
          "name": "ds",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 15
          },
          "type": "me2::terrain::Displacement"
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::ScrollAnimation::ScrollEntry::ScrollEntry(const struct me2::animation::ScrollAnimation::ScrollEntry &) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "ScrollEntry",
          "ret_type": "void",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimation::ScrollEntry::ScrollEntry(struct me2::animation::ScrollAnimation::ScrollEntry &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "ScrollEntry",
          "ret_type": "void",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimation::ScrollEntry::ScrollEntry(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ScrollEntry",
          "ret_type": "void",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimation::ScrollEntry::operator=(const struct me2::animation::ScrollAnimation::ScrollEntry &) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::ScrollAnimation::ScrollEntry",
              "name": "",
              "src_info": {
                "col": 10,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
                "line": 14
              },
              "type": "me2::animation::ScrollAnimation::ScrollEntry"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::animation::ScrollAnimation::ScrollEntry",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimation::ScrollEntry::operator=(struct me2::animation::ScrollAnimation::ScrollEntry &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::ScrollAnimation::ScrollEntry",
              "name": "",
              "src_info": {
                "col": 10,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
                "line": 14
              },
              "type": "me2::animation::ScrollAnimation::ScrollEntry"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::animation::ScrollAnimation::ScrollEntry",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimation::ScrollEntry::~ScrollEntry(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~ScrollEntry",
          "ret_type": "void",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "ScrollEntry",
      "namespace": "me2::animation::",
      "nested_parent": "me2::animation::ScrollAnimation",
      "src_info": {
        "col": 10,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animation.hpp",
        "line": 14
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::ScrollAnimator": {
      "bases": [
        "me2::animation::Animator"
      ],
      "contains": null,
      "fields": {
        "me2::animation::ScrollAnimator::anim": {
          "access": "private",
          "full_type": "class me2::animation::ScrollAnimation *",
          "name": "anim",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
            "line": 35
          },
          "type": "me2::animation::ScrollAnimation"
        },
        "me2::animation::ScrollAnimator::curr_iter": {
          "access": "private",
          "full_type": "class ScrollAnimation::Scroll::const_iterator",
          "name": "curr_iter",
          "src_info": {
            "col": 43,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
            "line": 36
          },
          "type": "__gnu_cxx::__normal_iterator<conststructme2::animation::ScrollAnimation::ScrollEntry*,std::vector<ScrollEntry,std::allocator<ScrollEntry>>>::__normal_iterator"
        },
        "me2::animation::ScrollAnimator::on_action": {
          "access": "private",
          "full_type": "me2::animation::ScrollAnimator::OnAction",
          "name": "on_action",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
            "line": 34
          },
          "type": "std::function<void(classme2::animation::ScrollAnimator&,constclassme2::animation::ScrollAnimation&)>::function"
        }
      },
      "friends": [
        "me2::destruction::AllocationManager"
      ],
      "methods": {
        "me2::animation::ScrollAnimator::GetCurrScrollIter(void) const -> class ScrollAnimation::Scroll::const_iterator": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrScrollIter",
          "ret_type": "__gnu_cxx::__normal_iterator<conststructme2::animation::ScrollAnimation::ScrollEntry*,std::vector<ScrollEntry,std::allocator<ScrollEntry>>>::__normal_iterator",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
            "line": 17
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimator::NotifyAction(void)": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyAction",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/scroll_animator.cpp",
            "line": 42
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimator::Progress(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "currtime": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "currtime",
              "src_info": {
                "col": 41,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/scroll_animator.cpp",
                "line": 8
              },
              "type": null
            }
          },
          "branches": 7,
          "definitions": null,
          "lines": 20,
          "literals": 25,
          "loops": 1,
          "max_scope": 2,
          "method_type": "UserMethod",
          "name": "Progress",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/scroll_animator.cpp",
            "line": 8
          },
          "statements": 11,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::ScrollAnimator::ScrollAnimator(const class me2::animation::ScrollAnimator &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ScrollAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimator::ScrollAnimator(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ScrollAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimator::SetOnAction(const me2::animation::ScrollAnimator::OnAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::ScrollAnimator&,constclassme2::animation::ScrollAnimation&)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
                "line": 15
              },
              "type": "std::function<void(classme2::animation::ScrollAnimator&,constclassme2::animation::ScrollAnimation&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnAction",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
            "line": 15
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimator::Start(class me2::animation::ScrollAnimation &, me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "a": {
              "full_type": "me2::animation::ScrollAnimation",
              "name": "a",
              "src_info": {
                "col": 45,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/scroll_animator.cpp",
                "line": 30
              },
              "type": "me2::animation::ScrollAnimation"
            },
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 58,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/scroll_animator.cpp",
                "line": 30
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 10,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Start",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/scroll_animator.cpp",
            "line": 30
          },
          "statements": 7,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimator::operator=(const class me2::animation::ScrollAnimator &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::ScrollAnimator",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
                "line": 11
              },
              "type": "me2::animation::ScrollAnimator"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::ScrollAnimator",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::ScrollAnimator::~ScrollAnimator(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~ScrollAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
            "line": 32
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "ScrollAnimator",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/scroll_animator.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::TickAnimation": {
      "bases": [
        "me2::animation::Animation"
      ],
      "contains": null,
      "fields": {
        "me2::animation::TickAnimation::delay": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "delay",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 27
          },
          "type": null
        },
        "me2::animation::TickAnimation::discrete": {
          "access": "private",
          "full_type": "_Bool",
          "name": "discrete",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 29
          },
          "type": null
        },
        "me2::animation::TickAnimation::reps": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "reps",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 28
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::animation::TickAnimation::Clone(void) const -> std::unique_ptr<Animation>": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Clone",
          "ret_type": "std::unique_ptr<Animation,std::default_delete<Animation>>::unique_ptr",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 22
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::TickAnimation::GetDelay(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetDelay",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 18
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimation::GetReps(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetReps",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 19
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimation::IsDiscrete(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsDiscrete",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 20
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimation::TickAnimation(const class me2::animation::TickAnimation &) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TickAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimation::TickAnimation(const std::string &, unsigned int, unsigned int, _Bool)": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TickAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 10
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimation::TickAnimation(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TickAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimation::operator=(const class me2::animation::TickAnimation &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::TickAnimation",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
                "line": 8
              },
              "type": "me2::animation::TickAnimation"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::TickAnimation",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimation::~TickAnimation(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~TickAnimation",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "TickAnimation",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animation.hpp",
        "line": 8
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::animation::TickAnimator": {
      "bases": [
        "me2::animation::Animator"
      ],
      "contains": null,
      "fields": {
        "me2::animation::TickAnimator::anim": {
          "access": "private",
          "full_type": "class me2::animation::TickAnimation *",
          "name": "anim",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 38
          },
          "type": "me2::animation::TickAnimation"
        },
        "me2::animation::TickAnimator::elapsed_time": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "elapsed_time",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 40
          },
          "type": null
        },
        "me2::animation::TickAnimator::on_action": {
          "access": "private",
          "full_type": "me2::animation::TickAnimator::OnAction",
          "name": "on_action",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 37
          },
          "type": "std::function<void(classme2::animation::TickAnimator&,constclassme2::animation::TickAnimation&)>::function"
        },
        "me2::animation::TickAnimator::reps": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "reps",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 39
          },
          "type": null
        }
      },
      "friends": [
        "me2::destruction::AllocationManager"
      ],
      "methods": {
        "me2::animation::TickAnimator::GetCurrRep(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrRep",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 17
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimator::GetElapsedTime(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetElapsedTime",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 18
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimator::GetElapsedTimeNormalized(void) const -> float": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetElapsedTimeNormalized",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 20
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimator::NotifyAction(void)": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "NotifyAction",
          "ret_type": "void",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/tick_animator.cpp",
            "line": 36
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimator::Progress(me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "currtime": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "currtime",
              "src_info": {
                "col": 39,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/tick_animator.cpp",
                "line": 7
              },
              "type": null
            }
          },
          "branches": 4,
          "definitions": null,
          "lines": 18,
          "literals": 5,
          "loops": 1,
          "max_scope": 2,
          "method_type": "UserMethod",
          "name": "Progress",
          "ret_type": "void",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/tick_animator.cpp",
            "line": 7
          },
          "statements": 10,
          "template_args": null,
          "virtual": true
        },
        "me2::animation::TickAnimator::SetOnAction(const me2::animation::TickAnimator::OnAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::animation::TickAnimator&,constclassme2::animation::TickAnimation&)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
                "line": 15
              },
              "type": "std::function<void(classme2::animation::TickAnimator&,constclassme2::animation::TickAnimation&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnAction",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 15
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimator::Start(class me2::animation::TickAnimation &, me2::animation::Animator::Timestamp)": {
          "access": "public",
          "args": {
            "a": {
              "full_type": "me2::animation::TickAnimation",
              "name": "a",
              "src_info": {
                "col": 41,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/tick_animator.cpp",
                "line": 27
              },
              "type": "me2::animation::TickAnimation"
            },
            "t": {
              "full_type": "me2::animation::Animator::Timestamp",
              "name": "t",
              "src_info": {
                "col": 54,
                "file": "/home/vkrs/Documents/projects/me2/src/animation/tick_animator.cpp",
                "line": 27
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 7,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Start",
          "ret_type": "void",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/src/animation/tick_animator.cpp",
            "line": 27
          },
          "statements": 6,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimator::TickAnimator(const class me2::animation::TickAnimator &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TickAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimator::TickAnimator(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TickAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 34
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimator::operator=(const class me2::animation::TickAnimator &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::animation::TickAnimator",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
                "line": 11
              },
              "type": "me2::animation::TickAnimator"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::animation::TickAnimator",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::animation::TickAnimator::~TickAnimator(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~TickAnimator",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
            "line": 35
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "TickAnimator",
      "namespace": "me2::animation::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/animation/tick_animator.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::app::App": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::app::App::game": {
          "access": "private",
          "full_type": "class me2::app::Game",
          "name": "game",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
            "line": 67
          },
          "type": "me2::app::Game"
        }
      },
      "friends": null,
      "methods": {
        "me2::app::App::App(class me2::app::App &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "App",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::App::App(const class me2::app::App &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "App",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
            "line": 46
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::App::App(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "App",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
            "line": 45
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::App::GetGame(void) -> class me2::app::Game &": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetGame",
          "ret_type": "me2::app::Game",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
            "line": 64
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::App::GetGame(void) const -> const class me2::app::Game &": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetGame",
          "ret_type": "me2::app::Game",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
            "line": 57
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::App::Main(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 5,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Main",
          "ret_type": "void",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/src/app/app.cpp",
            "line": 9
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::app::App::Run(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Run",
          "ret_type": "void",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/src/app/app.cpp",
            "line": 5
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::app::App::RunIteration(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "RunIteration",
          "ret_type": "void",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/src/app/app.cpp",
            "line": 7
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::app::App::operator=(class me2::app::App &&) -> class me2::app::App &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::app::App",
              "name": "",
              "src_info": {
                "col": 23,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
                "line": 50
              },
              "type": "me2::app::App"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::app::App",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
            "line": 50
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::App::operator=(const class me2::app::App &) -> class me2::app::App &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::app::App",
              "name": "",
              "src_info": {
                "col": 28,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
                "line": 49
              },
              "type": "me2::app::App"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::app::App",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
            "line": 49
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::App::~App(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~App",
          "ret_type": "void",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
            "line": 12
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "App",
      "namespace": "me2::app::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/app/app.hpp",
        "line": 10
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::app::Game": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::app::Game::ai": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "ai",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 274
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::animations": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "animations",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 274
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::collisions": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "collisions",
          "src_info": {
            "col": 32,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 274
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::current_time": {
          "access": "private",
          "full_type": "uint64_t",
          "name": "current_time",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 275
          },
          "type": null
        },
        "me2::app::Game::destructions": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "destructions",
          "src_info": {
            "col": 44,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 274
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::drop_clock_cycle": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "drop_clock_cycle",
          "src_info": {
            "col": 38,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 273
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::execute_input": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "execute_input",
          "src_info": {
            "col": 64,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 273
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::in_clock_cycle": {
          "access": "private",
          "full_type": "me2::app::Game::Pred",
          "name": "in_clock_cycle",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 271
          },
          "type": "std::function<_Bool(void)>::function"
        },
        "me2::app::Game::is_finished": {
          "access": "private",
          "full_type": "me2::app::Game::Pred",
          "name": "is_finished",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 271
          },
          "type": "std::function<_Bool(void)>::function"
        },
        "me2::app::Game::is_paused": {
          "access": "private",
          "full_type": "_Bool",
          "name": "is_paused",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 277
          },
          "type": null
        },
        "me2::app::Game::pause_resume": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "pause_resume",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 273
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::pause_time": {
          "access": "private",
          "full_type": "uint64_t",
          "name": "pause_time",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 276
          },
          "type": null
        },
        "me2::app::Game::physics": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "physics",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 274
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::record_input": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "record_input",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 273
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::render": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "render",
          "src_info": {
            "col": 56,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 273
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::app::Game::update_currtime": {
          "access": "private",
          "full_type": "me2::app::Game::TAction",
          "name": "update_currtime",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 272
          },
          "type": "std::function<unsignedlong(void)>::function"
        },
        "me2::app::Game::user_code": {
          "access": "private",
          "full_type": "me2::app::Game::Action",
          "name": "user_code",
          "src_info": {
            "col": 58,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 274
          },
          "type": "std::function<void(void)>::function"
        }
      },
      "friends": null,
      "methods": {
        "me2::app::Game::AI(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "AI",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 246
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Animations(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Animations",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 241
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Collisions(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Collisions",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 256
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::CompleteClockCycle(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "CompleteClockCycle",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 226
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Destructions(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Destructions",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 261
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Dispatcher(void)": {
          "access": "private",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 6,
          "literals": 0,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "Dispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/src/app/game.cpp",
            "line": 14
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::ExecuteInput(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "ExecuteInput",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 236
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Game(class me2::app::Game &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Game",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Game(const class me2::app::Game &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Game",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Game(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Game",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Game(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Game",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::GetCurrentTime(void) const -> uint64_t": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrentTime",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 143
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::GetPauseTime(void) const -> uint64_t": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPauseTime",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 167
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::InClockCycle(void) const -> _Bool": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "InClockCycle",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 206
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Invoke(const me2::app::Game::Action &)": {
          "access": "protected",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 175
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Invoke",
          "ret_type": "void",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 175
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Invoke<TemplateTypeParm>(const TFunc &)": {
          "access": "protected",
          "args": {
            "f": {
              "full_type": "const TFunc &",
              "name": "f",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 189
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 4,
          "loops": 0,
          "max_scope": 0,
          "method_type": "TemplateDefinition",
          "name": "Invoke",
          "ret_type": "void",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 189
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Invoke<std::function<_Bool (void)>>(const class std::function<_Bool (void)> &)": {
          "access": "protected",
          "args": {
            "f": {
              "full_type": "std::function<_Bool(void)>::function",
              "name": "f",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 189
              },
              "type": "std::function<_Bool(void)>::function"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "TemplateInstantiationSpecialization",
          "name": "Invoke",
          "ret_type": "void",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 189
          },
          "statements": 2,
          "template_args": [
            "std::function<_Bool(void)>::function"
          ],
          "virtual": false
        },
        "me2::app::Game::Invoke<std::function<unsigned long (void)>>(const class std::function<unsigned long (void)> &)": {
          "access": "protected",
          "args": {
            "f": {
              "full_type": "std::function<unsignedlong(void)>::function",
              "name": "f",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 189
              },
              "type": "std::function<unsignedlong(void)>::function"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "TemplateInstantiationSpecialization",
          "name": "Invoke",
          "ret_type": "void",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 189
          },
          "statements": 2,
          "template_args": [
            "std::function<unsignedlong(void)>::function"
          ],
          "virtual": false
        },
        "me2::app::Game::IsFinished(void) const -> _Bool": {
          "access": "protected",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsFinished",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 199
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::IsPaused(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsPaused",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 160
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::MainLoop(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 5,
          "literals": 0,
          "loops": 1,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "MainLoop",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/src/app/game.cpp",
            "line": 7
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::MainLoopIteration(void)": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 11,
          "literals": 0,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "MainLoopIteration",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/src/app/game.cpp",
            "line": 22
          },
          "statements": 9,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Pause(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 4,
          "literals": 1,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Pause",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/src/app/game.cpp",
            "line": 35
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Physics(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Physics",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 251
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::RecordInput(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "RecordInput",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 221
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Render(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Render",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 231
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::Resume(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 4,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Resume",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/src/app/game.cpp",
            "line": 41
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetAI(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 28,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 96
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetAI",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 96
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetAnimations(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 89
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetAnimations",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 89
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetCollisions(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 110
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetCollisions",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 110
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetCompleteClockCycle(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 44,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 68
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetCompleteClockCycle",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 68
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetDestructions(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 117
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetDestructions",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 117
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetExecuteInput(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 82
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetExecuteInput",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 82
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetFinished(const me2::app::Game::Pred &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<_Bool(void)>::function",
              "name": "f",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 25
              },
              "type": "std::function<_Bool(void)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetFinished",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 25
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetInClockCycle(const me2::app::Game::Pred &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<_Bool(void)>::function",
              "name": "f",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 43
              },
              "type": "std::function<_Bool(void)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetInClockCycle",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 43
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetPauseResume(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 53
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetPauseResume",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 53
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetPhysics(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 103
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetPhysics",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 103
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetRecordInput(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 60
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetRecordInput",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 60
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetRender(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 75
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetRender",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 75
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetUpdateTime(const me2::app::Game::TAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<unsignedlong(void)>::function",
              "name": "f",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 35
              },
              "type": "std::function<unsignedlong(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUpdateTime",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 35
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::SetUserCode(const me2::app::Game::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 34,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 125
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUserCode",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 125
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::TogglePauseResume(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TogglePauseResume",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 216
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::UpdateCurrentTime(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "UpdateCurrentTime",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 211
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::UserCode(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "UserCode",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 266
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::operator=(class me2::app::Game &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::app::Game",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 14
              },
              "type": "me2::app::Game"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::app::Game",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::operator=(const class me2::app::Game &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::app::Game",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
                "line": 14
              },
              "type": "me2::app::Game"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::app::Game",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::Game::~Game(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Game",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "Game",
      "namespace": "me2::app::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/app/game.hpp",
        "line": 14
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::app::tests::A_game_after_injecting_its_iteration_callbacks": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": {
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::ai_f": {
          "access": "protected",
          "full_type": "testing::NiceMock<testing::MockFunction<Game::Action> >",
          "name": "ai_f",
          "src_info": {
            "col": 58,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 16
          },
          "type": "testing::NiceMock<testing::MockFunction<std::function<void(void)>>>::NiceMock"
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::animations_f": {
          "access": "protected",
          "full_type": "testing::NiceMock<testing::MockFunction<Game::Action> >",
          "name": "animations_f",
          "src_info": {
            "col": 58,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 15
          },
          "type": "testing::NiceMock<testing::MockFunction<std::function<void(void)>>>::NiceMock"
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::collisions_f": {
          "access": "protected",
          "full_type": "testing::NiceMock<testing::MockFunction<Game::Action> >",
          "name": "collisions_f",
          "src_info": {
            "col": 58,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 18
          },
          "type": "testing::NiceMock<testing::MockFunction<std::function<void(void)>>>::NiceMock"
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::destructions_f": {
          "access": "protected",
          "full_type": "testing::NiceMock<testing::MockFunction<Game::Action> >",
          "name": "destructions_f",
          "src_info": {
            "col": 58,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 19
          },
          "type": "testing::NiceMock<testing::MockFunction<std::function<void(void)>>>::NiceMock"
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::game": {
          "access": "protected",
          "full_type": "std::unique_ptr<Game>",
          "name": "game",
          "src_info": {
            "col": 25,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 11
          },
          "type": "std::unique_ptr<Game,std::default_delete<Game>>::unique_ptr"
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::input_f": {
          "access": "protected",
          "full_type": "testing::NiceMock<testing::MockFunction<Game::Action> >",
          "name": "input_f",
          "src_info": {
            "col": 58,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 14
          },
          "type": "testing::NiceMock<testing::MockFunction<std::function<void(void)>>>::NiceMock"
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::physics_f": {
          "access": "protected",
          "full_type": "testing::NiceMock<testing::MockFunction<Game::Action> >",
          "name": "physics_f",
          "src_info": {
            "col": 58,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 17
          },
          "type": "testing::NiceMock<testing::MockFunction<std::function<void(void)>>>::NiceMock"
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::render_f": {
          "access": "protected",
          "full_type": "testing::NiceMock<testing::MockFunction<Game::Action> >",
          "name": "render_f",
          "src_info": {
            "col": 58,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 13
          },
          "type": "testing::NiceMock<testing::MockFunction<std::function<void(void)>>>::NiceMock"
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::usercode_f": {
          "access": "protected",
          "full_type": "testing::NiceMock<testing::MockFunction<Game::Action> >",
          "name": "usercode_f",
          "src_info": {
            "col": 58,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 20
          },
          "type": "testing::NiceMock<testing::MockFunction<std::function<void(void)>>>::NiceMock"
        }
      },
      "friends": null,
      "methods": {
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::A_game_after_injecting_its_iteration_callbacks(class me2::app::tests::A_game_after_injecting_its_iteration_callbacks &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "A_game_after_injecting_its_iteration_callbacks",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::A_game_after_injecting_its_iteration_callbacks(const class me2::app::tests::A_game_after_injecting_its_iteration_callbacks &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "A_game_after_injecting_its_iteration_callbacks",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::A_game_after_injecting_its_iteration_callbacks(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "A_game_after_injecting_its_iteration_callbacks",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::SetUp(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 11,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUp",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 22
          },
          "statements": 9,
          "template_args": null,
          "virtual": true
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::operator=(class me2::app::tests::A_game_after_injecting_its_iteration_callbacks &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
                "line": 9
              },
              "type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::operator=(const class me2::app::tests::A_game_after_injecting_its_iteration_callbacks &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
                "line": 9
              },
              "type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks::~A_game_after_injecting_its_iteration_callbacks(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~A_game_after_injecting_its_iteration_callbacks",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 9
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "A_game_after_injecting_its_iteration_callbacks",
      "namespace": "me2::app::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
        "line": 9
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test": {
      "bases": [
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test(class me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 36
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test(const class me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 36
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 36
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 11,
          "literals": 48,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 36
          },
          "statements": 9,
          "template_args": null,
          "virtual": true
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test::operator=(class me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
                "line": 36
              },
              "type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 36
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test::operator=(const class me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
                "line": 36
              },
              "type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 36
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::app::tests::A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test::~A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
            "line": 36
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "A_game_after_injecting_its_iteration_callbacks_Will_invoke_each_callback_once_Test",
      "namespace": "me2::app::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/app/game_tests.cpp",
        "line": 36
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::boot::AcodecAddonError": {
      "bases": [
        "me2::boot::BootError"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::boot::AcodecAddonError::AcodecAddonError(const struct me2::boot::AcodecAddonError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AcodecAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AcodecAddonError::AcodecAddonError(struct me2::boot::AcodecAddonError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AcodecAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AcodecAddonError::AcodecAddonError(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AcodecAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AcodecAddonError::AcodecAddonError(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AcodecAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AcodecAddonError::operator=(const struct me2::boot::AcodecAddonError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::AcodecAddonError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 52
              },
              "type": "me2::boot::AcodecAddonError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::AcodecAddonError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AcodecAddonError::operator=(struct me2::boot::AcodecAddonError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::AcodecAddonError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 52
              },
              "type": "me2::boot::AcodecAddonError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::AcodecAddonError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AcodecAddonError::~AcodecAddonError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~AcodecAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "AcodecAddonError",
      "namespace": "me2::boot::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
        "line": 52
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::boot::AudioInstallationError": {
      "bases": [
        "me2::boot::BootError"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::boot::AudioInstallationError::AudioInstallationError(const struct me2::boot::AudioInstallationError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AudioInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 45
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AudioInstallationError::AudioInstallationError(struct me2::boot::AudioInstallationError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AudioInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 45
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AudioInstallationError::AudioInstallationError(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AudioInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 45
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AudioInstallationError::AudioInstallationError(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "AudioInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 45
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AudioInstallationError::operator=(const struct me2::boot::AudioInstallationError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::AudioInstallationError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 45
              },
              "type": "me2::boot::AudioInstallationError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::AudioInstallationError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 45
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AudioInstallationError::operator=(struct me2::boot::AudioInstallationError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::AudioInstallationError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 45
              },
              "type": "me2::boot::AudioInstallationError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::AudioInstallationError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 45
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::AudioInstallationError::~AudioInstallationError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~AudioInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 45
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "AudioInstallationError",
      "namespace": "me2::boot::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
        "line": 45
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::boot::BootError": {
      "bases": [
        "me2::error::RuntimeError"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::boot::BootError::BootError(const struct me2::boot::BootError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BootError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::BootError::BootError(struct me2::boot::BootError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BootError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::BootError::BootError(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BootError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::BootError::BootError(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BootError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::BootError::operator=(const struct me2::boot::BootError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::BootError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 10
              },
              "type": "me2::boot::BootError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::BootError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::BootError::operator=(struct me2::boot::BootError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::BootError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 10
              },
              "type": "me2::boot::BootError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::BootError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::BootError::~BootError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~BootError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "BootError",
      "namespace": "me2::boot::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
        "line": 10
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::boot::FontError": {
      "bases": [
        "me2::boot::BootError"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::boot::FontError::FontError(const struct me2::boot::FontError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FontError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 59
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::FontError::FontError(struct me2::boot::FontError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FontError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 59
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::FontError::FontError(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FontError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 59
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::FontError::FontError(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "FontError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 59
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::FontError::operator=(const struct me2::boot::FontError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::FontError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 59
              },
              "type": "me2::boot::FontError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::FontError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 59
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::FontError::operator=(struct me2::boot::FontError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::FontError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 59
              },
              "type": "me2::boot::FontError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::FontError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 59
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::FontError::~FontError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~FontError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 59
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "FontError",
      "namespace": "me2::boot::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
        "line": 59
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::boot::ImageAddonError": {
      "bases": [
        "me2::boot::BootError"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::boot::ImageAddonError::ImageAddonError(const struct me2::boot::ImageAddonError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ImageAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::ImageAddonError::ImageAddonError(struct me2::boot::ImageAddonError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ImageAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::ImageAddonError::ImageAddonError(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ImageAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::ImageAddonError::ImageAddonError(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ImageAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::ImageAddonError::operator=(const struct me2::boot::ImageAddonError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::ImageAddonError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 31
              },
              "type": "me2::boot::ImageAddonError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::ImageAddonError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::ImageAddonError::operator=(struct me2::boot::ImageAddonError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::ImageAddonError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 31
              },
              "type": "me2::boot::ImageAddonError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::ImageAddonError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::ImageAddonError::~ImageAddonError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~ImageAddonError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "ImageAddonError",
      "namespace": "me2::boot::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
        "line": 31
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::boot::InitError": {
      "bases": [
        "me2::boot::BootError"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::boot::InitError::InitError(const struct me2::boot::InitError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InitError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::InitError::InitError(struct me2::boot::InitError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InitError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::InitError::InitError(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InitError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::InitError::InitError(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InitError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::InitError::operator=(const struct me2::boot::InitError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::InitError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 17
              },
              "type": "me2::boot::InitError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::InitError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::InitError::operator=(struct me2::boot::InitError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::InitError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 17
              },
              "type": "me2::boot::InitError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::InitError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::InitError::~InitError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InitError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InitError",
      "namespace": "me2::boot::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
        "line": 17
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::boot::KeyboardInstallationError": {
      "bases": [
        "me2::boot::BootError"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::boot::KeyboardInstallationError::KeyboardInstallationError(const struct me2::boot::KeyboardInstallationError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "KeyboardInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 38
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::KeyboardInstallationError::KeyboardInstallationError(struct me2::boot::KeyboardInstallationError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "KeyboardInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 38
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::KeyboardInstallationError::KeyboardInstallationError(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "KeyboardInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 38
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::KeyboardInstallationError::KeyboardInstallationError(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "KeyboardInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 38
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::KeyboardInstallationError::operator=(const struct me2::boot::KeyboardInstallationError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::KeyboardInstallationError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 38
              },
              "type": "me2::boot::KeyboardInstallationError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::KeyboardInstallationError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 38
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::KeyboardInstallationError::operator=(struct me2::boot::KeyboardInstallationError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::KeyboardInstallationError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 38
              },
              "type": "me2::boot::KeyboardInstallationError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::KeyboardInstallationError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 38
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::KeyboardInstallationError::~KeyboardInstallationError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~KeyboardInstallationError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 38
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "KeyboardInstallationError",
      "namespace": "me2::boot::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
        "line": 38
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::boot::PrimitivesError": {
      "bases": [
        "me2::boot::BootError"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::boot::PrimitivesError::PrimitivesError(const struct me2::boot::PrimitivesError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "PrimitivesError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::PrimitivesError::PrimitivesError(struct me2::boot::PrimitivesError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "PrimitivesError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::PrimitivesError::PrimitivesError(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "PrimitivesError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::PrimitivesError::PrimitivesError(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "PrimitivesError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::PrimitivesError::operator=(const struct me2::boot::PrimitivesError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::PrimitivesError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 24
              },
              "type": "me2::boot::PrimitivesError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::PrimitivesError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::PrimitivesError::operator=(struct me2::boot::PrimitivesError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::PrimitivesError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 24
              },
              "type": "me2::boot::PrimitivesError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::PrimitivesError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::PrimitivesError::~PrimitivesError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~PrimitivesError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "PrimitivesError",
      "namespace": "me2::boot::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
        "line": 24
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::boot::TTFError": {
      "bases": [
        "me2::boot::BootError"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::boot::TTFError::TTFError(const struct me2::boot::TTFError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TTFError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 66
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::TTFError::TTFError(struct me2::boot::TTFError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TTFError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 66
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::TTFError::TTFError(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TTFError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 66
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::TTFError::TTFError(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TTFError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 66
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::TTFError::operator=(const struct me2::boot::TTFError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::TTFError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 66
              },
              "type": "me2::boot::TTFError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::TTFError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 66
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::TTFError::operator=(struct me2::boot::TTFError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::boot::TTFError",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
                "line": 66
              },
              "type": "me2::boot::TTFError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::boot::TTFError",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 66
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::boot::TTFError::~TTFError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~TTFError",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
            "line": 66
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "TTFError",
      "namespace": "me2::boot::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/boot/boot.hpp",
        "line": 66
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::character::Clipper": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::character::Clipper::view": {
          "access": "private",
          "full_type": "me2::character::Clipper::View",
          "name": "view",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
            "line": 30
          },
          "type": "std::function<conststructme2::rendering::BasicRect<int,unsignedshort>&(void)>::function"
        }
      },
      "friends": null,
      "methods": {
        "me2::character::Clipper::Clip(const me2::character::Clipper::Rect &, const me2::character::Clipper::Point &, me2::character::Clipper::Point &, me2::character::Clipper::Rect &) const -> _Bool": {
          "access": "public",
          "args": {
            "clipped_box": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "clipped_box",
              "src_info": {
                "col": 26,
                "file": "/home/vkrs/Documents/projects/me2/src/character/clipper.cpp",
                "line": 30
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            },
            "dpy_point": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "dpy_point",
              "src_info": {
                "col": 48,
                "file": "/home/vkrs/Documents/projects/me2/src/character/clipper.cpp",
                "line": 29
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            },
            "dpy_pos": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "dpy_pos",
              "src_info": {
                "col": 66,
                "file": "/home/vkrs/Documents/projects/me2/src/character/clipper.cpp",
                "line": 29
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            },
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/src/character/clipper.cpp",
                "line": 29
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 3,
          "definitions": {
            "visible_area": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "visible_area",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/src/character/clipper.cpp",
                "line": 31
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "lines": 18,
          "literals": 3,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "Clip",
          "ret_type": "void",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/src/character/clipper.cpp",
            "line": 29
          },
          "statements": 11,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Clipper::Clipper(class me2::character::Clipper &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Clipper",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Clipper::Clipper(const class me2::character::Clipper &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Clipper",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Clipper::Clipper(const me2::character::Clipper::View &)": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Clipper",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
            "line": 16
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Clipper::SetView(const me2::character::Clipper::View &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<conststructme2::rendering::BasicRect<int,unsignedshort>&(void)>::function",
              "name": "f",
              "src_info": {
                "col": 28,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
                "line": 18
              },
              "type": "std::function<conststructme2::rendering::BasicRect<int,unsignedshort>&(void)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetView",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
            "line": 18
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Clipper::operator=(class me2::character::Clipper &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::character::Clipper",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
                "line": 10
              },
              "type": "me2::character::Clipper"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::character::Clipper",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Clipper::operator=(const class me2::character::Clipper &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::character::Clipper",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
                "line": 10
              },
              "type": "me2::character::Clipper"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::character::Clipper",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "Clipper",
      "namespace": "me2::character::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/character/clipper.hpp",
        "line": 10
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::character::CollisionChecker": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::character::CollisionChecker::entries": {
          "access": "private",
          "full_type": "me2::character::CollisionChecker::Entries",
          "name": "entries",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
            "line": 29
          },
          "type": "std::list<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>,std::allocator<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>>>::list"
        }
      },
      "friends": null,
      "methods": {
        "me2::character::CollisionChecker::Cancel(class me2::character::Sprite &, class me2::character::Sprite &)": {
          "access": "public",
          "args": {
            "s1": {
              "full_type": "me2::character::Sprite",
              "name": "s1",
              "src_info": {
                "col": 39,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 21
              },
              "type": "me2::character::Sprite"
            },
            "s2": {
              "full_type": "me2::character::Sprite",
              "name": "s2",
              "src_info": {
                "col": 51,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 21
              },
              "type": "me2::character::Sprite"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Cancel",
          "ret_type": "void",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
            "line": 21
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::character::CollisionChecker::Check(void) const": {
          "access": "public",
          "args": null,
          "branches": 2,
          "definitions": {
            "[sprite1, sprite2, action]": {
              "full_type": "std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>::tuple",
              "name": "",
              "src_info": {
                "col": 20,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 38
              },
              "type": "std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>::tuple"
            },
            "__begin2": {
              "full_type": "std::_List_const_iterator<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>>::_List_const_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 38
              },
              "type": "std::_List_const_iterator<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>>::_List_const_iterator"
            },
            "__end2": {
              "full_type": "std::_List_const_iterator<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>>::_List_const_iterator",
              "name": "__end2",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 38
              },
              "type": "std::_List_const_iterator<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>>::_List_const_iterator"
            },
            "__range2": {
              "full_type": "std::list<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>,std::allocator<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>>>::list",
              "name": "__range2",
              "src_info": {
                "col": 49,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 38
              },
              "type": "std::list<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>,std::allocator<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>>>::list"
            }
          },
          "lines": 5,
          "literals": 5,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "Check",
          "ret_type": "void",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
            "line": 37
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::character::CollisionChecker::CollisionChecker(class me2::character::CollisionChecker &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "CollisionChecker",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::CollisionChecker::CollisionChecker(const class me2::character::CollisionChecker &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "CollisionChecker",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::CollisionChecker::Contains(const class me2::character::Sprite &, const class me2::character::Sprite &) const -> _Bool": {
          "access": "public",
          "args": {
            "s1": {
              "full_type": "me2::character::Sprite",
              "name": "s1",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 7
              },
              "type": "me2::character::Sprite"
            },
            "s2": {
              "full_type": "me2::character::Sprite",
              "name": "s2",
              "src_info": {
                "col": 65,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 7
              },
              "type": "me2::character::Sprite"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Contains",
          "ret_type": "void",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
            "line": 7
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::CollisionChecker::Find(const class me2::character::Sprite &, const class me2::character::Sprite &) const -> Entries::const_iterator": {
          "access": "private",
          "args": {
            "s1": {
              "full_type": "me2::character::Sprite",
              "name": "s1",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 44
              },
              "type": "me2::character::Sprite"
            },
            "s2": {
              "full_type": "me2::character::Sprite",
              "name": "s2",
              "src_info": {
                "col": 61,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 44
              },
              "type": "me2::character::Sprite"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 8,
          "literals": 2,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "Find",
          "ret_type": "std::_List_const_iterator<std::tuple<classme2::character::Sprite*,classme2::character::Sprite*,std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>>>::_List_const_iterator",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
            "line": 44
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::character::CollisionChecker::Register(class me2::character::Sprite &, class me2::character::Sprite &, const me2::character::CollisionChecker::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>::function",
              "name": "f",
              "src_info": {
                "col": 71,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 12
              },
              "type": "std::function<void(classme2::character::Sprite&,classme2::character::Sprite&)>::function"
            },
            "s1": {
              "full_type": "me2::character::Sprite",
              "name": "s1",
              "src_info": {
                "col": 41,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 12
              },
              "type": "me2::character::Sprite"
            },
            "s2": {
              "full_type": "me2::character::Sprite",
              "name": "s2",
              "src_info": {
                "col": 53,
                "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
                "line": 12
              },
              "type": "me2::character::Sprite"
            }
          },
          "branches": 5,
          "definitions": null,
          "lines": 7,
          "literals": 25,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Register",
          "ret_type": "void",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/src/character/collision_checker.cpp",
            "line": 12
          },
          "statements": 6,
          "template_args": null,
          "virtual": false
        },
        "me2::character::CollisionChecker::operator=(class me2::character::CollisionChecker &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::character::CollisionChecker",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
                "line": 11
              },
              "type": "me2::character::CollisionChecker"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::character::CollisionChecker",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::CollisionChecker::operator=(const class me2::character::CollisionChecker &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::character::CollisionChecker",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
                "line": 11
              },
              "type": "me2::character::CollisionChecker"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::character::CollisionChecker",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::CollisionChecker::~CollisionChecker(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~CollisionChecker",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "CollisionChecker",
      "namespace": "me2::character::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/character/collision_checker.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::character::MotionQuantizer": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::character::MotionQuantizer::box": {
          "access": "private",
          "full_type": "me2::character::MotionQuantizer::Box",
          "name": "box",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 43
          },
          "type": "std::function<conststructme2::rendering::BasicRect<int,unsignedshort>&(void)>::function"
        },
        "me2::character::MotionQuantizer::max": {
          "access": "private",
          "full_type": "me2::character::MotionQuantizer::Range",
          "name": "max",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 42
          },
          "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
        },
        "me2::character::MotionQuantizer::mover": {
          "access": "private",
          "full_type": "me2::character::MotionQuantizer::Mover",
          "name": "mover",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 44
          },
          "type": "std::function<void(conststructme2::rendering::BasicRect<int,unsignedshort>&,structme2::terrain::Displacement&)>::function"
        },
        "me2::character::MotionQuantizer::used": {
          "access": "private",
          "full_type": "_Bool",
          "name": "used",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 45
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::character::MotionQuantizer::IsUsed(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsUsed",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::MotionQuantizer::MotionQuantizer(class me2::character::MotionQuantizer &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MotionQuantizer",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::MotionQuantizer::MotionQuantizer(const class me2::character::MotionQuantizer &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MotionQuantizer",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::MotionQuantizer::MotionQuantizer(const me2::character::MotionQuantizer::Range &, const me2::character::MotionQuantizer::Box &, const me2::character::MotionQuantizer::Mover &, _Bool)": {
          "access": "public",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "MotionQuantizer",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 20
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::character::MotionQuantizer::Move(me2::character::MotionQuantizer::Displacement) const": {
          "access": "public",
          "args": {
            "ds": {
              "full_type": "me2::terrain::Displacement",
              "name": "ds",
              "src_info": {
                "col": 41,
                "file": "/home/vkrs/Documents/projects/me2/src/character/motion_quantizer.cpp",
                "line": 14
              },
              "type": "me2::terrain::Displacement"
            }
          },
          "branches": 3,
          "definitions": {
            "ds_final": {
              "full_type": "me2::terrain::Displacement",
              "name": "ds_final",
              "src_info": {
                "col": 12,
                "file": "/home/vkrs/Documents/projects/me2/src/character/motion_quantizer.cpp",
                "line": 27
              },
              "type": "me2::terrain::Displacement"
            },
            "dx_final": {
              "full_type": "const int",
              "name": "dx_final",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/character/motion_quantizer.cpp",
                "line": 22
              },
              "type": null
            },
            "dy_final": {
              "full_type": "const int",
              "name": "dy_final",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/character/motion_quantizer.cpp",
                "line": 24
              },
              "type": null
            },
            "sign_x": {
              "full_type": "const int",
              "name": "sign_x",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/character/motion_quantizer.cpp",
                "line": 19
              },
              "type": null
            },
            "sign_y": {
              "full_type": "const int",
              "name": "sign_y",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/character/motion_quantizer.cpp",
                "line": 20
              },
              "type": null
            }
          },
          "lines": 29,
          "literals": 4,
          "loops": 0,
          "max_scope": 2,
          "method_type": "UserMethod",
          "name": "Move",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/character/motion_quantizer.cpp",
            "line": 14
          },
          "statements": 11,
          "template_args": null,
          "virtual": false
        },
        "me2::character::MotionQuantizer::SetMover(const me2::character::MotionQuantizer::Mover &) -> me2::character::MotionQuantizer::Me &": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(conststructme2::rendering::BasicRect<int,unsignedshort>&,structme2::terrain::Displacement&)>::function",
              "name": "f",
              "src_info": {
                "col": 30,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
                "line": 29
              },
              "type": "std::function<void(conststructme2::rendering::BasicRect<int,unsignedshort>&,structme2::terrain::Displacement&)>::function"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetMover",
          "ret_type": "me2::character::MotionQuantizer",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 29
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::character::MotionQuantizer::SetUsed(_Bool) -> me2::character::MotionQuantizer::Me &": {
          "access": "public",
          "args": {
            "v": {
              "full_type": "_Bool",
              "name": "v",
              "src_info": {
                "col": 21,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
                "line": 34
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUsed",
          "ret_type": "me2::character::MotionQuantizer",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 34
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::character::MotionQuantizer::operator=(class me2::character::MotionQuantizer &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::character::MotionQuantizer",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
                "line": 11
              },
              "type": "me2::character::MotionQuantizer"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::character::MotionQuantizer",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::MotionQuantizer::operator=(const class me2::character::MotionQuantizer &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::character::MotionQuantizer",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
                "line": 11
              },
              "type": "me2::character::MotionQuantizer"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::character::MotionQuantizer",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::MotionQuantizer::~MotionQuantizer(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~MotionQuantizer",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "MotionQuantizer",
      "namespace": "me2::character::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/character/motion_quantizer.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::character::Sprite": {
      "bases": [
        "me2::destruction::LatelyDestroyable"
      ],
      "contains": null,
      "fields": {
        "me2::character::Sprite::area": {
          "access": "private",
          "full_type": "std::unique_ptr<BoundingArea>",
          "name": "area",
          "src_info": {
            "col": 33,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 81
          },
          "type": "std::unique_ptr<BoundingArea,std::default_delete<BoundingArea>>::unique_ptr"
        },
        "me2::character::Sprite::film": {
          "access": "private",
          "full_type": "me2::character::Sprite::AnimationFilm *",
          "name": "film",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 75
          },
          "type": "me2::animation::AnimationFilm"
        },
        "me2::character::Sprite::frame_box": {
          "access": "private",
          "full_type": "me2::character::Sprite::Rect",
          "name": "frame_box",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 77
          },
          "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
        },
        "me2::character::Sprite::frame_no": {
          "access": "private",
          "full_type": "me2::character::Sprite::byte",
          "name": "frame_no",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 76
          },
          "type": null
        },
        "me2::character::Sprite::gravity": {
          "access": "private",
          "full_type": "me2::character::Sprite::GravityHandler",
          "name": "gravity",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 80
          },
          "type": "me2::physics::GravityHandler"
        },
        "me2::character::Sprite::manager": {
          "access": "private",
          "full_type": "class me2::character::SpriteManager &",
          "name": "manager",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 73
          },
          "type": "me2::character::SpriteManager"
        },
        "me2::character::Sprite::pos": {
          "access": "private",
          "full_type": "me2::character::Sprite::Point",
          "name": "pos",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 74
          },
          "type": "me2::rendering::BasicPoint<int>::BasicPoint"
        },
        "me2::character::Sprite::quantizer": {
          "access": "private",
          "full_type": "class me2::character::MotionQuantizer",
          "name": "quantizer",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 79
          },
          "type": "me2::character::MotionQuantizer"
        },
        "me2::character::Sprite::state_id": {
          "access": "private",
          "full_type": "std::string",
          "name": "state_id",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 78
          },
          "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
        },
        "me2::character::Sprite::type_id": {
          "access": "private",
          "full_type": "std::string",
          "name": "type_id",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 78
          },
          "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
        },
        "me2::character::Sprite::visible": {
          "access": "private",
          "full_type": "_Bool",
          "name": "visible",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 82
          },
          "type": null
        },
        "me2::character::Sprite::zorder": {
          "access": "private",
          "full_type": "unsigned int",
          "name": "zorder",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 83
          },
          "type": null
        }
      },
      "friends": [
        "me2::destruction::AllocationManager"
      ],
      "methods": {
        "me2::character::Sprite::Display(ALLEGRO_BITMAP &, const me2::character::Sprite::Point &, class me2::character::Clipper &) const": {
          "access": "public",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 57,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
                "line": 51
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            },
            "clipper": {
              "full_type": "me2::character::Clipper",
              "name": "clipper",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
                "line": 52
              },
              "type": "me2::character::Clipper"
            },
            "dest": {
              "full_type": "ALLEGRO_BITMAP",
              "name": "dest",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
                "line": 51
              },
              "type": "ALLEGRO_BITMAP"
            }
          },
          "branches": 4,
          "definitions": {
            "clipped_box": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "clipped_box",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
                "line": 55
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            },
            "clipped_frame": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "clipped_frame",
              "src_info": {
                "col": 10,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
                "line": 58
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            },
            "dpy_pos": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "dpy_pos",
              "src_info": {
                "col": 9,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
                "line": 56
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "lines": 13,
          "literals": 5,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "Display",
          "ret_type": "void",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
            "line": 51
          },
          "statements": 7,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetBoundingArea(void) const -> const me2::character::Sprite::BoundingArea *": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetBoundingArea",
          "ret_type": "me2::rendering::BoundingArea",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 45
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetCurrentFilm(void) const -> const me2::character::Sprite::AnimationFilm &": {
          "access": "public",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCurrentFilm",
          "ret_type": "me2::animation::AnimationFilm",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 31
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetFrame(void) const -> me2::character::Sprite::byte": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetFrame",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 35
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetFrameBox(void) const -> const me2::character::Sprite::Rect &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetFrameBox",
          "ret_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 36
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetGravityHandler(void) -> me2::character::Sprite::GravityHandler &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetGravityHandler",
          "ret_type": "me2::physics::GravityHandler",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 44
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetGravityHandler(void) const -> const me2::character::Sprite::GravityHandler &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetGravityHandler",
          "ret_type": "me2::physics::GravityHandler",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 43
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetMotionQuantizer(void) -> class me2::character::MotionQuantizer &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetMotionQuantizer",
          "ret_type": "me2::character::MotionQuantizer",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 42
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetMotionQuantizer(void) const -> const class me2::character::MotionQuantizer &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetMotionQuantizer",
          "ret_type": "me2::character::MotionQuantizer",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 39
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetPos(void) const -> const me2::character::Sprite::Point &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPos",
          "ret_type": "me2::rendering::BasicPoint<int>::BasicPoint",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 30
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetStateId(void) const -> const std::string &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetStateId",
          "ret_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 38
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetTypeId(void) const -> const std::string &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTypeId",
          "ret_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 37
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::GetZorder(void) const -> unsigned int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetZorder",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 47
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::IsVisible(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsVisible",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 46
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::SetBoundingArea(const me2::character::Sprite::BoundingArea &)": {
          "access": "public",
          "args": {
            "_area": {
              "full_type": "me2::rendering::BoundingArea",
              "name": "_area",
              "src_info": {
                "col": 44,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
                "line": 52
              },
              "type": "me2::rendering::BoundingArea"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetBoundingArea",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 52
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::SetBoundingArea(std::unique_ptr<BoundingArea>)": {
          "access": "public",
          "args": {
            "_area": {
              "full_type": "std::unique_ptr<BoundingArea,std::default_delete<BoundingArea>>::unique_ptr",
              "name": "_area",
              "src_info": {
                "col": 54,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
                "line": 53
              },
              "type": "std::unique_ptr<BoundingArea,std::default_delete<BoundingArea>>::unique_ptr"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetBoundingArea",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 53
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::SetCurrentFilm(me2::character::Sprite::AnimationFilm &)": {
          "access": "public",
          "args": {
            "_film": {
              "full_type": "me2::animation::AnimationFilm",
              "name": "_film",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
                "line": 49
              },
              "type": "me2::animation::AnimationFilm"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetCurrentFilm",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 49
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::SetFrame(me2::character::Sprite::byte)": {
          "access": "public",
          "args": {
            "i": {
              "full_type": "me2::character::Sprite::byte",
              "name": "i",
              "src_info": {
                "col": 28,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
                "line": 45
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetFrame",
          "ret_type": "void",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
            "line": 45
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::SetMover(const me2::character::Sprite::Mover &)": {
          "access": "public",
          "args": {
            "_mover": {
              "full_type": "std::function<void(conststructme2::rendering::BasicRect<int,unsignedshort>&,structme2::terrain::Displacement&)>::function",
              "name": "_mover",
              "src_info": {
                "col": 30,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
                "line": 56
              },
              "type": "std::function<void(conststructme2::rendering::BasicRect<int,unsignedshort>&,structme2::terrain::Displacement&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetMover",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 56
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::SetPos(const me2::character::Sprite::Point &)": {
          "access": "public",
          "args": {
            "_pos": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "_pos",
              "src_info": {
                "col": 34,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
                "line": 40
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetPos",
          "ret_type": "void",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
            "line": 40
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::SetStateId(const std::string &)": {
          "access": "public",
          "args": {
            "id": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "id",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
                "line": 51
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetStateId",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 51
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::SetVisibility(_Bool)": {
          "access": "public",
          "args": {
            "v": {
              "full_type": "_Bool",
              "name": "v",
              "src_info": {
                "col": 27,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
                "line": 50
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetVisibility",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 50
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::Sprite(class me2::character::SpriteManager &, const me2::character::Sprite::Point &, me2::character::Sprite::AnimationFilm &, const std::string &, const me2::character::Sprite::Range &, const me2::character::Sprite::Mover &, const me2::character::Sprite::GravityHandler &, me2::character::Sprite::byte, std::unique_ptr<BoundingArea>, _Bool, unsigned int)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 4,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Sprite",
          "ret_type": "void",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
            "line": 19
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::Sprite(const class me2::character::Sprite &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Sprite",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::operator=(const class me2::character::Sprite &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::character::Sprite",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
                "line": 18
              },
              "type": "me2::character::Sprite"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::character::Sprite",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::Sprite::~Sprite(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Sprite",
          "ret_type": "void",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite.cpp",
            "line": 38
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Sprite",
      "namespace": "me2::character::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite.hpp",
        "line": 18
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::character::SpriteManager": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::character::SpriteManager::dpys": {
          "access": "private",
          "full_type": "me2::character::SpriteManager::DisplayLists",
          "name": "dpys",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
            "line": 35
          },
          "type": "std::map<unsignedint,std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>,std::less<unsignedint>,std::allocator<std::pair<constunsignedint,std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>>>>::map"
        },
        "me2::character::SpriteManager::sprites": {
          "access": "private",
          "full_type": "me2::character::SpriteManager::SpriteList",
          "name": "sprites",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
            "line": 34
          },
          "type": "std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>::list"
        },
        "me2::character::SpriteManager::types": {
          "access": "private",
          "full_type": "me2::character::SpriteManager::TypeLists",
          "name": "types",
          "src_info": {
            "col": 13,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
            "line": 36
          },
          "type": "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>>>>::map"
        }
      },
      "friends": [
        "me2::character::Sprite"
      ],
      "methods": {
        "me2::character::SpriteManager::AccessDisplayList(unsigned int, const me2::character::SpriteManager::SpriteAccessor &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::character::Sprite&)>::function",
              "name": "f",
              "src_info": {
                "col": 61,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 28
              },
              "type": "std::function<void(classme2::character::Sprite&)>::function"
            },
            "zorder": {
              "full_type": "unsigned int",
              "name": "zorder",
              "src_info": {
                "col": 48,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 27
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "AccessDisplayList",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::AccessSpriteList(const me2::character::SpriteManager::SpriteList &, const me2::character::SpriteManager::SpriteAccessor &)": {
          "access": "private",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::character::Sprite&)>::function",
              "name": "f",
              "src_info": {
                "col": 60,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 63
              },
              "type": "std::function<void(classme2::character::Sprite&)>::function"
            },
            "l": {
              "full_type": "std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>::list",
              "name": "l",
              "src_info": {
                "col": 56,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 62
              },
              "type": "std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>::list"
            }
          },
          "branches": 2,
          "definitions": {
            "__begin2": {
              "full_type": "std::_List_const_iterator<classme2::character::Sprite*>::_List_const_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 66
              },
              "type": "std::_List_const_iterator<classme2::character::Sprite*>::_List_const_iterator"
            },
            "__end2": {
              "full_type": "std::_List_const_iterator<classme2::character::Sprite*>::_List_const_iterator",
              "name": "__end2",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 66
              },
              "type": "std::_List_const_iterator<classme2::character::Sprite*>::_List_const_iterator"
            },
            "__range2": {
              "full_type": "std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>::list",
              "name": "__range2",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 66
              },
              "type": "std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>::list"
            },
            "s": {
              "full_type": "me2::character::Sprite",
              "name": "s",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 66
              },
              "type": "me2::character::Sprite"
            }
          },
          "lines": 7,
          "literals": 10,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "AccessSpriteList",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
            "line": 62
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::AccessSprites(const me2::character::SpriteManager::SpriteAccessor &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::character::Sprite&)>::function",
              "name": "f",
              "src_info": {
                "col": 57,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 23
              },
              "type": "std::function<void(classme2::character::Sprite&)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "AccessSprites",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::AccessTypeList(const std::string &, const me2::character::SpriteManager::SpriteAccessor &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(classme2::character::Sprite&)>::function",
              "name": "f",
              "src_info": {
                "col": 58,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 33
              },
              "type": "std::function<void(classme2::character::Sprite&)>::function"
            },
            "type_id": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "type_id",
              "src_info": {
                "col": 55,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 32
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "AccessTypeList",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
            "line": 32
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::Cancel(class me2::character::Sprite &)": {
          "access": "private",
          "args": {
            "s": {
              "full_type": "me2::character::Sprite",
              "name": "s",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 47
              },
              "type": "me2::character::Sprite"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 8,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Cancel",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
            "line": 47
          },
          "statements": 5,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::Contains(const class me2::character::Sprite &) const -> _Bool": {
          "access": "public",
          "args": {
            "s": {
              "full_type": "me2::character::Sprite",
              "name": "s",
              "src_info": {
                "col": 44,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 7
              },
              "type": "me2::character::Sprite"
            }
          },
          "branches": 1,
          "definitions": {
            "dpy_lists_contains": {
              "full_type": "const _Bool",
              "name": "dpy_lists_contains",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 15
              },
              "type": null
            },
            "sprites_list_contains": {
              "full_type": "const _Bool",
              "name": "sprites_list_contains",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 8
              },
              "type": null
            },
            "type_lists_contains": {
              "full_type": "const _Bool",
              "name": "type_lists_contains",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 10
              },
              "type": null
            }
          },
          "lines": 14,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Contains",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
            "line": 7
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::Register(class me2::character::Sprite &)": {
          "access": "private",
          "args": {
            "s": {
              "full_type": "me2::character::Sprite",
              "name": "s",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 37
              },
              "type": "me2::character::Sprite"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 8,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Register",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
            "line": 37
          },
          "statements": 5,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::SpriteListContains(const me2::character::SpriteManager::SpriteList &, const class me2::character::Sprite &) -> _Bool": {
          "access": "private",
          "args": {
            "l": {
              "full_type": "std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>::list",
              "name": "l",
              "src_info": {
                "col": 58,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 57
              },
              "type": "std::list<classme2::character::Sprite*,std::allocator<classme2::character::Sprite*>>::list"
            },
            "s": {
              "full_type": "me2::character::Sprite",
              "name": "s",
              "src_info": {
                "col": 75,
                "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
                "line": 57
              },
              "type": "me2::character::Sprite"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SpriteListContains",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/character/sprite_manager.cpp",
            "line": 57
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::SpriteManager(class me2::character::SpriteManager &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "SpriteManager",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::SpriteManager(const class me2::character::SpriteManager &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "SpriteManager",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::operator=(class me2::character::SpriteManager &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::character::SpriteManager",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
                "line": 11
              },
              "type": "me2::character::SpriteManager"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::character::SpriteManager",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::operator=(const class me2::character::SpriteManager &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::character::SpriteManager",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
                "line": 11
              },
              "type": "me2::character::SpriteManager"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::character::SpriteManager",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::character::SpriteManager::~SpriteManager(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~SpriteManager",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "SpriteManager",
      "namespace": "me2::character::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/character/sprite_manager.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::destruction::AllocationManager": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::destruction::AllocationManager::AllocationManager(class me2::destruction::AllocationManager &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "AllocationManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::AllocationManager::AllocationManager(const class me2::destruction::AllocationManager &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "AllocationManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
            "line": 23
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::AllocationManager::AllocationManager(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "AllocationManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
            "line": 37
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::AllocationManager::MakeDeferred<TemplateTypeParm, TemplateTypeParm>(Args &&...) -> DeferredPtr<T>": {
          "access": "public",
          "args": {
            "args": {
              "full_type": "Args &&...",
              "name": "args",
              "src_info": {
                "col": 52,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
                "line": 32
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "TemplateDefinition",
          "name": "MakeDeferred",
          "ret_type": "void",
          "src_info": {
            "col": 29,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
            "line": 32
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::AllocationManager::operator=(class me2::destruction::AllocationManager &&) -> class me2::destruction::AllocationManager &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::destruction::AllocationManager",
              "name": "",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
                "line": 27
              },
              "type": "me2::destruction::AllocationManager"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::destruction::AllocationManager",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
            "line": 27
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::AllocationManager::operator=(const class me2::destruction::AllocationManager &) -> class me2::destruction::AllocationManager &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::destruction::AllocationManager",
              "name": "",
              "src_info": {
                "col": 42,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
                "line": 26
              },
              "type": "me2::destruction::AllocationManager"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::destruction::AllocationManager",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
            "line": 26
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::AllocationManager::~AllocationManager(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~AllocationManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
            "line": 38
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "AllocationManager",
      "namespace": "me2::destruction::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/allocation_manager.hpp",
        "line": 21
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::destruction::DestructionManager": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::destruction::DestructionManager::dead": {
          "access": "private",
          "full_type": "me2::destruction::DestructionManager::Graveyard",
          "name": "dead",
          "src_info": {
            "col": 13,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
            "line": 32
          },
          "type": "std::list<classme2::destruction::LatelyDestroyable*,std::allocator<classme2::destruction::LatelyDestroyable*>>::list"
        }
      },
      "friends": null,
      "methods": {
        "me2::destruction::DestructionManager::Commit(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": {
            "__begin2": {
              "full_type": "std::_List_iterator<classme2::destruction::LatelyDestroyable*>::_List_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 15,
                "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
                "line": 27
              },
              "type": "std::_List_iterator<classme2::destruction::LatelyDestroyable*>::_List_iterator"
            },
            "__end2": {
              "full_type": "std::_List_iterator<classme2::destruction::LatelyDestroyable*>::_List_iterator",
              "name": "__end2",
              "src_info": {
                "col": 15,
                "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
                "line": 27
              },
              "type": "std::_List_iterator<classme2::destruction::LatelyDestroyable*>::_List_iterator"
            },
            "__range2": {
              "full_type": "std::list<classme2::destruction::LatelyDestroyable*,std::allocator<classme2::destruction::LatelyDestroyable*>>::list",
              "name": "__range2",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
                "line": 27
              },
              "type": "std::list<classme2::destruction::LatelyDestroyable*,std::allocator<classme2::destruction::LatelyDestroyable*>>::list"
            },
            "d": {
              "full_type": "me2::destruction::LatelyDestroyable",
              "name": "d",
              "src_info": {
                "col": 13,
                "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
                "line": 27
              },
              "type": "me2::destruction::LatelyDestroyable"
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Commit",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
            "line": 26
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::DestructionManager(class me2::destruction::DestructionManager &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "DestructionManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::DestructionManager(const class me2::destruction::DestructionManager &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "DestructionManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
            "line": 12
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::DestructionManager(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "DestructionManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
            "line": 29
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::DestructionManager(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "DestructionManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
            "line": 29
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::GetSingleton(void) -> class me2::destruction::DestructionManager &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": {
            "singleton": {
              "full_type": "me2::destruction::DestructionManager",
              "name": "singleton",
              "src_info": {
                "col": 29,
                "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
                "line": 8
              },
              "type": "me2::destruction::DestructionManager"
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetSingleton",
          "ret_type": "me2::destruction::DestructionManager",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
            "line": 7
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::IsRegistered(const class me2::destruction::LatelyDestroyable &) const -> _Bool": {
          "access": "public",
          "args": {
            "d": {
              "full_type": "me2::destruction::LatelyDestroyable",
              "name": "d",
              "src_info": {
                "col": 64,
                "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
                "line": 12
              },
              "type": "me2::destruction::LatelyDestroyable"
            }
          },
          "branches": 1,
          "definitions": {
            "pos": {
              "full_type": "std::_List_const_iterator<classme2::destruction::LatelyDestroyable*>::_List_const_iterator",
              "name": "pos",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
                "line": 14
              },
              "type": "std::_List_const_iterator<classme2::destruction::LatelyDestroyable*>::_List_const_iterator"
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsRegistered",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
            "line": 12
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::Register(DeferredPtr<class me2::destruction::LatelyDestroyable>)": {
          "access": "public",
          "args": {
            "d": {
              "full_type": "me2::destruction::LatelyDestroyable",
              "name": "d",
              "src_info": {
                "col": 66,
                "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
                "line": 18
              },
              "type": "me2::destruction::LatelyDestroyable"
            }
          },
          "branches": 4,
          "definitions": null,
          "lines": 6,
          "literals": 20,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Register",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/destruction/destruction_manager.cpp",
            "line": 18
          },
          "statements": 5,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::operator=(class me2::destruction::DestructionManager &&) -> class me2::destruction::DestructionManager &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::destruction::DestructionManager",
              "name": "",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
                "line": 16
              },
              "type": "me2::destruction::DestructionManager"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::destruction::DestructionManager",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::operator=(const class me2::destruction::DestructionManager &) -> class me2::destruction::DestructionManager &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::destruction::DestructionManager",
              "name": "",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
                "line": 15
              },
              "type": "me2::destruction::DestructionManager"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::destruction::DestructionManager",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::~DestructionManager(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~DestructionManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
            "line": 30
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::DestructionManager::~DestructionManager(void) noexcept": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~DestructionManager",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
            "line": 30
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "DestructionManager",
      "namespace": "me2::destruction::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/destruction_manager.hpp",
        "line": 10
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::destruction::LatelyDestroyable": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::destruction::LatelyDestroyable::alive": {
          "access": "private",
          "full_type": "_Bool",
          "name": "alive",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 36
          },
          "type": null
        },
        "me2::destruction::LatelyDestroyable::dying": {
          "access": "private",
          "full_type": "_Bool",
          "name": "dying",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 37
          },
          "type": null
        },
        "me2::destruction::LatelyDestroyable::on_deletion": {
          "access": "private",
          "full_type": "me2::destruction::LatelyDestroyable::OnDeletion",
          "name": "on_deletion",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 39
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::destruction::LatelyDestroyable::on_destruction": {
          "access": "private",
          "full_type": "me2::destruction::LatelyDestroyable::OnDestruction",
          "name": "on_destruction",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 38
          },
          "type": "std::function<void(void)>::function"
        }
      },
      "friends": [
        "me2::destruction::DestructionManager"
      ],
      "methods": {
        "me2::destruction::LatelyDestroyable::Delete(void)": {
          "access": "private",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 5,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Delete",
          "ret_type": "void",
          "src_info": {
            "col": 25,
            "file": "/home/vkrs/Documents/projects/me2/src/destruction/lately_destroyable.cpp",
            "line": 18
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::LatelyDestroyable::Destroy(void)": {
          "access": "public",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 6,
          "literals": 1,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "Destroy",
          "ret_type": "void",
          "src_info": {
            "col": 25,
            "file": "/home/vkrs/Documents/projects/me2/src/destruction/lately_destroyable.cpp",
            "line": 10
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::LatelyDestroyable::IsAlive(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsAlive",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 16
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::LatelyDestroyable::LatelyDestroyable(class me2::destruction::LatelyDestroyable &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "LatelyDestroyable",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 28
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::LatelyDestroyable::LatelyDestroyable(const class me2::destruction::LatelyDestroyable &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "LatelyDestroyable",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 27
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::LatelyDestroyable::LatelyDestroyable(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "LatelyDestroyable",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 26
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::LatelyDestroyable::LatelyDestroyable(void) noexcept": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "LatelyDestroyable",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 26
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::LatelyDestroyable::SetOnDeletion(const me2::destruction::LatelyDestroyable::OnDeletion &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 40,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
                "line": 19
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnDeletion",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 19
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::LatelyDestroyable::SetOnDestruction(const me2::destruction::LatelyDestroyable::OnDestruction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
                "line": 18
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnDestruction",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
            "line": 18
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::destruction::LatelyDestroyable::~LatelyDestroyable(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~LatelyDestroyable",
          "ret_type": "void",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/src/destruction/lately_destroyable.cpp",
            "line": 8
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "LatelyDestroyable",
      "namespace": "me2::destruction::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/destruction/lately_destroyable.hpp",
        "line": 9
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::error::ErrorSource": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::error::ErrorSource::condition": {
          "access": "public",
          "full_type": "std::string_view",
          "name": "condition",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 15
          },
          "type": "std::basic_string_view<char,std::char_traits<char>>::basic_string_view"
        },
        "me2::error::ErrorSource::file": {
          "access": "public",
          "full_type": "std::string_view",
          "name": "file",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 19
          },
          "type": "std::basic_string_view<char,std::char_traits<char>>::basic_string_view"
        },
        "me2::error::ErrorSource::function": {
          "access": "public",
          "full_type": "std::string_view",
          "name": "function",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 17
          },
          "type": "std::basic_string_view<char,std::char_traits<char>>::basic_string_view"
        },
        "me2::error::ErrorSource::line": {
          "access": "public",
          "full_type": "unsigned int",
          "name": "line",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 21
          },
          "type": null
        },
        "me2::error::ErrorSource::message": {
          "access": "public",
          "full_type": "std::string_view",
          "name": "message",
          "src_info": {
            "col": 20,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 27
          },
          "type": "std::basic_string_view<char,std::char_traits<char>>::basic_string_view"
        },
        "me2::error::ErrorSource::thread_id": {
          "access": "public",
          "full_type": "std::size_t",
          "name": "thread_id",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 23
          },
          "type": null
        },
        "me2::error::ErrorSource::timestamp": {
          "access": "public",
          "full_type": "int64_t",
          "name": "timestamp",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 25
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::error::ErrorSource::ErrorSource(const struct me2::error::ErrorSource &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "ErrorSource",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::ErrorSource::ErrorSource(const struct me2::error::ErrorSource &) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "ErrorSource",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::ErrorSource::ErrorSource(struct me2::error::ErrorSource &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "ErrorSource",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::ErrorSource::ErrorSource(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ErrorSource",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::ErrorSource::operator=(const struct me2::error::ErrorSource &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::error::ErrorSource",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
                "line": 13
              },
              "type": "me2::error::ErrorSource"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::error::ErrorSource",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::ErrorSource::operator=(struct me2::error::ErrorSource &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::error::ErrorSource",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
                "line": 13
              },
              "type": "me2::error::ErrorSource"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::error::ErrorSource",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::ErrorSource::~ErrorSource(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~ErrorSource",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "ErrorSource",
      "namespace": "me2::error::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_reporting.hpp",
        "line": 13
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::error::LogicError": {
      "bases": [
        "std::logic_error"
      ],
      "contains": null,
      "fields": {
        "me2::error::LogicError::src": {
          "access": "private",
          "full_type": "struct me2::error::ErrorSource",
          "name": "src",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
            "line": 67
          },
          "type": "me2::error::ErrorSource"
        }
      },
      "friends": null,
      "methods": {
        "me2::error::LogicError::GetErrorSource(void) const noexcept -> const struct me2::error::ErrorSource &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetErrorSource",
          "ret_type": "me2::error::ErrorSource",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
            "line": 64
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::error::LogicError::LogicError(class me2::error::LogicError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "LogicError",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::LogicError::LogicError(const class me2::error::LogicError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "LogicError",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::LogicError::LogicError(const struct me2::error::ErrorSource &) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 2,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "LogicError",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
            "line": 54
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::error::LogicError::operator=(class me2::error::LogicError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::error::LogicError",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
                "line": 47
              },
              "type": "me2::error::LogicError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::error::LogicError",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::LogicError::operator=(const class me2::error::LogicError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::error::LogicError",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
                "line": 47
              },
              "type": "me2::error::LogicError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::error::LogicError",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::LogicError::~LogicError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~LogicError",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "LogicError",
      "namespace": "me2::error::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/error/error_handling.hpp",
        "line": 47
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::error::RuntimeError": {
      "bases": [
        "std::runtime_error"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::error::RuntimeError::RuntimeError(class me2::error::RuntimeError &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "RuntimeError",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::RuntimeError::RuntimeError(const class me2::error::RuntimeError &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "RuntimeError",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::RuntimeError::RuntimeError(std::string_view)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "RuntimeError",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::RuntimeError::operator=(class me2::error::RuntimeError &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::error::RuntimeError",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
                "line": 14
              },
              "type": "me2::error::RuntimeError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::error::RuntimeError",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::RuntimeError::operator=(const class me2::error::RuntimeError &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::error::RuntimeError",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
                "line": 14
              },
              "type": "me2::error::RuntimeError"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::error::RuntimeError",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::error::RuntimeError::~RuntimeError(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~RuntimeError",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
            "line": 14
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "RuntimeError",
      "namespace": "me2::error::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/error/runtime_errors.hpp",
        "line": 14
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::InputDispatcher": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::input::logical::InputDispatcher::subscribed": {
          "access": "private",
          "full_type": "me2::input::logical::InputDispatcher::Observers",
          "name": "subscribed",
          "src_info": {
            "col": 13,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 111
          },
          "type": null
        },
        "me2::input::logical::InputDispatcher::table": {
          "access": "private",
          "full_type": "me2::input::logical::InputDispatcher::UnitTable",
          "name": "table",
          "src_info": {
            "col": 13,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 112
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::input::logical::InputDispatcher::Bind(const PhysicalUnit &, const LogicalUnit &)": {
          "access": "public",
          "args": {
            "l_unit": {
              "full_type": "const LogicalUnit &",
              "name": "l_unit",
              "src_info": {
                "col": 60,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 57
              },
              "type": null
            },
            "p_unit": {
              "full_type": "const PhysicalUnit &",
              "name": "p_unit",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 57
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 8,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Bind",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 57
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher::Dispatch(const PhysicalUnit &)": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "const PhysicalUnit &",
              "name": "unit",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 80
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": {
            "lunit": {
              "full_type": "const auto &",
              "name": "lunit",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 81
              },
              "type": null
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Dispatch",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 80
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher::Emit(const LogicalUnit &) const": {
          "access": "protected",
          "args": {
            "unit": {
              "full_type": "const LogicalUnit &",
              "name": "unit",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 103
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": {
            "__range3": {
              "full_type": "auto &&",
              "name": "__range3",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": null
            },
            "observer": {
              "full_type": "const auto &",
              "name": "observer",
              "src_info": {
                "col": 22,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": null
            }
          },
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Emit",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 103
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher::IsBound(const PhysicalUnit &) const -> _Bool": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "const PhysicalUnit &",
              "name": "unit",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 47
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsBound",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 47
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher::Subscribe(const ObserverFunc &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "const ObserverFunc &",
              "name": "f",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 35
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 4,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Subscribe",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 35
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher::Translate(const PhysicalUnit &) const -> std::optional<LogicalUnit>": {
          "access": "protected",
          "args": {
            "unit": {
              "full_type": "const PhysicalUnit &",
              "name": "unit",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 94
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Translate",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 94
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher::Unbind(const PhysicalUnit &)": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "const PhysicalUnit &",
              "name": "unit",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 68
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 8,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Unbind",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 68
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "InputDispatcher",
      "namespace": "me2::input::logical::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
        "line": 25
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::Bind(const float &, const float &)": {
          "access": "public",
          "args": {
            "l_unit": {
              "full_type": "const float &",
              "name": "l_unit",
              "src_info": {
                "col": 60,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 57
              },
              "type": null
            },
            "p_unit": {
              "full_type": "const float &",
              "name": "p_unit",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 57
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Bind",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 57
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::Dispatch(const float &)": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "const float &",
              "name": "unit",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 80
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": {
            "lunit": {
              "full_type": "std::optional<float>::optional",
              "name": "lunit",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 81
              },
              "type": "std::optional<float>::optional"
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Dispatch",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 80
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::Emit(const float &) const": {
          "access": "protected",
          "args": {
            "unit": {
              "full_type": "const float &",
              "name": "unit",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 103
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": {
            "__begin0": {
              "full_type": "std::_List_const_iterator<std::function<void(float)>>::_List_const_iterator",
              "name": "__begin0",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::_List_const_iterator<std::function<void(float)>>::_List_const_iterator"
            },
            "__end0": {
              "full_type": "std::_List_const_iterator<std::function<void(float)>>::_List_const_iterator",
              "name": "__end0",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::_List_const_iterator<std::function<void(float)>>::_List_const_iterator"
            },
            "__range3": {
              "full_type": "std::list<std::function<void(float)>,std::allocator<std::function<void(float)>>>::list",
              "name": "__range3",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::list<std::function<void(float)>,std::allocator<std::function<void(float)>>>::list"
            },
            "observer": {
              "full_type": "std::function<void(float)>::function",
              "name": "observer",
              "src_info": {
                "col": 22,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::function<void(float)>::function"
            }
          },
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Emit",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 103
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::InputDispatcher(class me2::input::logical::InputDispatcher<float, float, class std::function<void (float)> > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::InputDispatcher(const class me2::input::logical::InputDispatcher<float, float, class std::function<void (float)> > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::InputDispatcher(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::IsBound(const float &) const -> _Bool": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "const float &",
              "name": "unit",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 47
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsBound",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 47
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::Subscribe(const class std::function<void (float)> &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(float)>::function",
              "name": "f",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 35
              },
              "type": "std::function<void(float)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Subscribe",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 35
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::Translate(const float &) const -> std::optional<float>": {
          "access": "protected",
          "args": {
            "unit": {
              "full_type": "const float &",
              "name": "unit",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 94
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Translate",
          "ret_type": "std::optional<float>::optional",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 94
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::Unbind(const float &)": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "const float &",
              "name": "unit",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 68
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Unbind",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 68
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::operator=(float)> > &(class me2::input::logical::InputDispatcher<float, float, class std::function<void (float)> > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 25
              },
              "type": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::operator=(float)> > &(const class me2::input::logical::InputDispatcher<float, float, class std::function<void (float)> > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 25
              },
              "type": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::InputDispatcher<float,float,std::function<void(float)>,std::hash<float>,std::equal_to<float>>::InputDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<float, float, std::function<void (float)>>::~InputDispatcher(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "InputDispatcher",
      "namespace": "me2::input::logical::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
        "line": 25
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::equal_to<float>::equal_to",
        "std::hash<float>::hash",
        "std::function<void(float)>::function"
      ],
      "template_parent": "me2::input::logical::InputDispatcher"
    },
    "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::Bind(const int &, const int &)": {
          "access": "public",
          "args": {
            "l_unit": {
              "full_type": "const int &",
              "name": "l_unit",
              "src_info": {
                "col": 60,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 57
              },
              "type": null
            },
            "p_unit": {
              "full_type": "const int &",
              "name": "p_unit",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 57
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Bind",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 57
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::Dispatch(const int &)": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "const int &",
              "name": "unit",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 80
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": {
            "lunit": {
              "full_type": "std::optional<int>::optional",
              "name": "lunit",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 81
              },
              "type": "std::optional<int>::optional"
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Dispatch",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 80
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::Emit(const int &) const": {
          "access": "protected",
          "args": {
            "unit": {
              "full_type": "const int &",
              "name": "unit",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 103
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": {
            "__begin0": {
              "full_type": "std::_List_const_iterator<std::function<void(int)>>::_List_const_iterator",
              "name": "__begin0",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::_List_const_iterator<std::function<void(int)>>::_List_const_iterator"
            },
            "__end0": {
              "full_type": "std::_List_const_iterator<std::function<void(int)>>::_List_const_iterator",
              "name": "__end0",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::_List_const_iterator<std::function<void(int)>>::_List_const_iterator"
            },
            "__range3": {
              "full_type": "std::list<std::function<void(int)>,std::allocator<std::function<void(int)>>>::list",
              "name": "__range3",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::list<std::function<void(int)>,std::allocator<std::function<void(int)>>>::list"
            },
            "observer": {
              "full_type": "std::function<void(int)>::function",
              "name": "observer",
              "src_info": {
                "col": 22,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::function<void(int)>::function"
            }
          },
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Emit",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 103
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::InputDispatcher(class me2::input::logical::InputDispatcher<int, int, class std::function<void (int)> > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::InputDispatcher(const class me2::input::logical::InputDispatcher<int, int, class std::function<void (int)> > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::InputDispatcher(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::IsBound(const int &) const -> _Bool": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "const int &",
              "name": "unit",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 47
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsBound",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 47
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::Subscribe(const class std::function<void (int)> &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(int)>::function",
              "name": "f",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 35
              },
              "type": "std::function<void(int)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Subscribe",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 35
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::Translate(const int &) const -> std::optional<int>": {
          "access": "protected",
          "args": {
            "unit": {
              "full_type": "const int &",
              "name": "unit",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 94
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Translate",
          "ret_type": "std::optional<int>::optional",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 94
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::Unbind(const int &)": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "const int &",
              "name": "unit",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 68
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Unbind",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 68
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::operator=(int)> > &(class me2::input::logical::InputDispatcher<int, int, class std::function<void (int)> > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 25
              },
              "type": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::operator=(int)> > &(const class me2::input::logical::InputDispatcher<int, int, class std::function<void (int)> > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 25
              },
              "type": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::InputDispatcher<int,int,std::function<void(int)>,std::hash<int>,std::equal_to<int>>::InputDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<int, int, std::function<void (int)>>::~InputDispatcher(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "InputDispatcher",
      "namespace": "me2::input::logical::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
        "line": 25
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::equal_to<int>::equal_to",
        "std::hash<int>::hash",
        "std::function<void(int)>::function"
      ],
      "template_parent": "me2::input::logical::InputDispatcher"
    },
    "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::Bind(const class std::basic_string<char> &, const int &)": {
          "access": "public",
          "args": {
            "l_unit": {
              "full_type": "const int &",
              "name": "l_unit",
              "src_info": {
                "col": 60,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 57
              },
              "type": null
            },
            "p_unit": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "p_unit",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 57
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Bind",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 57
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::Dispatch(const class std::basic_string<char> &)": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "unit",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 80
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 1,
          "definitions": {
            "lunit": {
              "full_type": "std::optional<int>::optional",
              "name": "lunit",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 81
              },
              "type": "std::optional<int>::optional"
            }
          },
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Dispatch",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 80
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::Emit(const int &) const": {
          "access": "protected",
          "args": {
            "unit": {
              "full_type": "const int &",
              "name": "unit",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 103
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": {
            "__begin0": {
              "full_type": "std::_List_const_iterator<std::function<void(char)>>::_List_const_iterator",
              "name": "__begin0",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::_List_const_iterator<std::function<void(char)>>::_List_const_iterator"
            },
            "__end0": {
              "full_type": "std::_List_const_iterator<std::function<void(char)>>::_List_const_iterator",
              "name": "__end0",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::_List_const_iterator<std::function<void(char)>>::_List_const_iterator"
            },
            "__range3": {
              "full_type": "std::list<std::function<void(char)>,std::allocator<std::function<void(char)>>>::list",
              "name": "__range3",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::list<std::function<void(char)>,std::allocator<std::function<void(char)>>>::list"
            },
            "observer": {
              "full_type": "std::function<void(char)>::function",
              "name": "observer",
              "src_info": {
                "col": 22,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 104
              },
              "type": "std::function<void(char)>::function"
            }
          },
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Emit",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 103
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::InputDispatcher(class me2::input::logical::InputDispatcher<class std::basic_string<char>, int, class std::function<void (char)> > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::InputDispatcher(const class me2::input::logical::InputDispatcher<class std::basic_string<char>, int, class std::function<void (char)> > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::InputDispatcher(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::IsBound(const class std::basic_string<char> &) const -> _Bool": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "unit",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 47
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsBound",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 47
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::Subscribe(const class std::function<void (char)> &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(char)>::function",
              "name": "f",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 35
              },
              "type": "std::function<void(char)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Subscribe",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 35
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::Translate(const class std::basic_string<char> &) const -> std::optional<int>": {
          "access": "protected",
          "args": {
            "unit": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "unit",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 94
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Translate",
          "ret_type": "std::optional<int>::optional",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 94
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::Unbind(const class std::basic_string<char> &)": {
          "access": "public",
          "args": {
            "unit": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "unit",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 68
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Unbind",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 68
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::operator=(char)> > &(class me2::input::logical::InputDispatcher<class std::basic_string<char>, int, class std::function<void (char)> > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 25
              },
              "type": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::operator=(char)> > &(const class me2::input::logical::InputDispatcher<class std::basic_string<char>, int, class std::function<void (char)> > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
                "line": 25
              },
              "type": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::InputDispatcher<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>,std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::InputDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputDispatcher<std::basic_string<char>, int, std::function<void (char)>>::~InputDispatcher(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
            "line": 25
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "InputDispatcher",
      "namespace": "me2::input::logical::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_dispatcher.hpp",
        "line": 25
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::equal_to<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>::equal_to",
        "std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>::hash",
        "std::function<void(char)>::function",
        "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
      ],
      "template_parent": "me2::input::logical::InputDispatcher"
    },
    "me2::input::logical::InputThrottler": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::input::logical::InputThrottler::polled": {
          "access": "private",
          "full_type": "me2::input::logical::InputThrottler::CommandQueue",
          "name": "polled",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_throttler.hpp",
            "line": 32
          },
          "type": "std::queue<std::function<void(void)>,std::deque<std::function<void(void)>,std::allocator<std::function<void(void)>>>>::queue"
        }
      },
      "friends": null,
      "methods": {
        "me2::input::logical::InputThrottler::InputThrottler(class me2::input::logical::InputThrottler &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputThrottler",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_throttler.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputThrottler::InputThrottler(const class me2::input::logical::InputThrottler &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputThrottler",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_throttler.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputThrottler::InputThrottler(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputThrottler",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_throttler.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputThrottler::Poll(const me2::input::logical::InputThrottler::Command &)": {
          "access": "public",
          "args": {
            "cmd": {
              "full_type": "std::function<void(void)>::function",
              "name": "cmd",
              "src_info": {
                "col": 42,
                "file": "/home/vkrs/Documents/projects/me2/src/input/logical/input_throttler.cpp",
                "line": 7
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Poll",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/input/logical/input_throttler.cpp",
            "line": 7
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputThrottler::ServePolledInput(void)": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 6,
          "literals": 5,
          "loops": 1,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "ServePolledInput",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/input/logical/input_throttler.cpp",
            "line": 12
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::InputThrottler::~InputThrottler(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputThrottler",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_throttler.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "InputThrottler",
      "namespace": "me2::input::logical::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/input/logical/input_throttler.hpp",
        "line": 13
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::(anonymousnamespace)::Generator": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::(anonymous namespace)::Generator::operator()(void) const -> T": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator()",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 48
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "Generator",
      "namespace": "me2::input::logical::tests::::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 47
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::(anonymousnamespace)::Generator<float>::Generator": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::(anonymous namespace)::Generator<float>::Generator(const struct me2::input::logical::tests::(anonymous namespace)::Generator<float> &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<float>::Generator(struct me2::input::logical::tests::(anonymous namespace)::Generator<float> &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<float>::Generator(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<float>::operator()(void) const -> float": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator()",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 48
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<float>::~Generator(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "Generator",
      "namespace": "me2::input::logical::tests::::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 47
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": null,
      "template_parent": "me2::input::logical::tests::(anonymousnamespace)::Generator"
    },
    "me2::input::logical::tests::(anonymousnamespace)::Generator<int>::Generator": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::(anonymous namespace)::Generator<int>::Generator(const struct me2::input::logical::tests::(anonymous namespace)::Generator<int> &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<int>::Generator(struct me2::input::logical::tests::(anonymous namespace)::Generator<int> &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<int>::Generator(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<int>::operator()(void) const -> int": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator()",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 48
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<int>::~Generator(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 47
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "Generator",
      "namespace": "me2::input::logical::tests::::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 47
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": null,
      "template_parent": "me2::input::logical::tests::(anonymousnamespace)::Generator"
    },
    "me2::input::logical::tests::(anonymousnamespace)::Generator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>::Generator": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::(anonymous namespace)::Generator<std::basic_string<char>>::Generator(const struct me2::input::logical::tests::(anonymous namespace)::Generator<std::string> &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<std::basic_string<char>>::Generator(struct me2::input::logical::tests::(anonymous namespace)::Generator<std::string> &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<std::basic_string<char>>::Generator(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<std::basic_string<char>>::operator()(void) const -> std::string": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator()",
          "ret_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 53
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::(anonymous namespace)::Generator<std::basic_string<char>>::~Generator(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~Generator",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "Generator",
      "namespace": "me2::input::logical::tests::::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 52
      },
      "structure_type": "TemplateFullSpecialization",
      "template_args": [
        "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
      ],
      "template_parent": "me2::input::logical::tests::(anonymousnamespace)::Generator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>::Generator"
    },
    "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": {
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::m": {
          "access": "protected",
          "full_type": "int",
          "name": "m",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 15
          },
          "type": null
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::mock": {
          "access": "protected",
          "full_type": "testing::NiceMock<testing::MockFunction<InputThrottler::Command> >",
          "name": "mock",
          "src_info": {
            "col": 69,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 14
          },
          "type": "testing::NiceMock<testing::MockFunction<std::function<void(void)>>>::NiceMock"
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::th": {
          "access": "protected",
          "full_type": "std::unique_ptr<InputThrottler>",
          "name": "th",
          "src_info": {
            "col": 35,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 13
          },
          "type": "std::unique_ptr<InputThrottler,std::default_delete<InputThrottler>>::unique_ptr"
        }
      },
      "friends": null,
      "methods": {
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::Given_an_input_throttler_with_a_mock_polled_m_times(class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_input_throttler_with_a_mock_polled_m_times",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::Given_an_input_throttler_with_a_mock_polled_m_times(const class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_input_throttler_with_a_mock_polled_m_times",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::Given_an_input_throttler_with_a_mock_polled_m_times(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_input_throttler_with_a_mock_polled_m_times",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::SetUp(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": {
            "i": {
              "full_type": "int",
              "name": "i",
              "src_info": {
                "col": 15,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
                "line": 20
              },
              "type": null
            }
          },
          "lines": 4,
          "literals": 3,
          "loops": 1,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUp",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 17
          },
          "statements": 3,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::operator=(class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
                "line": 10
              },
              "type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::operator=(const class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
                "line": 10
              },
              "type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times::~Given_an_input_throttler_with_a_mock_polled_m_times(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Given_an_input_throttler_with_a_mock_polled_m_times",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Given_an_input_throttler_with_a_mock_polled_m_times",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
        "line": 10
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test": {
      "bases": [
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test(class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test(const class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "i": {
              "full_type": "int",
              "name": "i",
              "src_info": {
                "col": 13,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
                "line": 36
              },
              "type": null
            },
            "n": {
              "full_type": "const std::uniform_int_distribution<>::result_type",
              "name": "n",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
                "line": 35
              },
              "type": null
            }
          },
          "lines": 5,
          "literals": 8,
          "loops": 1,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 31
          },
          "statements": 3,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test::operator=(class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
                "line": 31
              },
              "type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test::operator=(const class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
                "line": 31
              },
              "type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test::~Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_n_times_the_mock_will_still_be_called_m_times_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
        "line": 31
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test": {
      "bases": [
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test(class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test(const class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 4,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 24
          },
          "statements": 2,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test::operator=(class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
                "line": 24
              },
              "type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test::operator=(const class me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
                "line": 24
              },
              "type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test::~Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Given_an_input_throttler_with_a_mock_polled_m_times_After_serving_the_mock_will_be_called_m_times_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_throttler_tests.cpp",
        "line": 24
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::InputDispatcherTest": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": {
        "me2::input::logical::tests::InputDispatcherTest::dispatcher": {
          "access": "public",
          "full_type": "me2::input::logical::tests::InputDispatcherTest::InputDispatcherPtr",
          "name": "dispatcher",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 24
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest::SetUp(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUp",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 15
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest(class me2::input::logical::tests::InputDispatcherTest<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest(const class me2::input::logical::tests::InputDispatcherTest<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float, float, std::function<void (float)>>>::SetUp(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUp",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(class me2::input::logical::tests::InputDispatcherTest<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 15
              },
              "type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(const class me2::input::logical::tests::InputDispatcherTest<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 15
              },
              "type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float, float, std::function<void (float)>>>::~InputDispatcherTest(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 15
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<float,float,std::function<void(float)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest"
    },
    "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest(class me2::input::logical::tests::InputDispatcherTest<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest(const class me2::input::logical::tests::InputDispatcherTest<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int, int, std::function<void (int)>>>::SetUp(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUp",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(class me2::input::logical::tests::InputDispatcherTest<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 15
              },
              "type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(const class me2::input::logical::tests::InputDispatcherTest<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 15
              },
              "type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int, int, std::function<void (int)>>>::~InputDispatcherTest(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 15
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<int,int,std::function<void(int)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest"
    },
    "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest(class me2::input::logical::tests::InputDispatcherTest<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest(const class me2::input::logical::tests::InputDispatcherTest<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::SetUp(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUp",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(class me2::input::logical::tests::InputDispatcherTest<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 15
              },
              "type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(const class me2::input::logical::tests::InputDispatcherTest<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 15
              },
              "type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::~InputDispatcherTest(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 15
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest"
    },
    "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "lunit": {
              "full_type": "const auto",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 99
              },
              "type": null
            },
            "mock": {
              "full_type": "Mock",
              "name": "mock",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 96
              },
              "type": null
            },
            "punit": {
              "full_type": "const auto",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 98
              },
              "type": null
            }
          },
          "lines": 11,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 8,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 92
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float, float, std::function<void (float)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "lunit": {
              "full_type": "float const",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 99
              },
              "type": null
            },
            "mock": {
              "full_type": "testing::NiceMock<testing::MockFunction<std::function<void(float)>>>::NiceMock",
              "name": "mock",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 96
              },
              "type": "testing::NiceMock<testing::MockFunction<std::function<void(float)>>>::NiceMock"
            },
            "punit": {
              "full_type": "float const",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 98
              },
              "type": null
            }
          },
          "lines": 11,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 8,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 92
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 92
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<float, float, std::function<void (float)>>>::~InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 92
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<float,float,std::function<void(float)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int, int, std::function<void (int)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "lunit": {
              "full_type": "int const",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 99
              },
              "type": null
            },
            "mock": {
              "full_type": "testing::NiceMock<testing::MockFunction<std::function<void(int)>>>::NiceMock",
              "name": "mock",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 96
              },
              "type": "testing::NiceMock<testing::MockFunction<std::function<void(int)>>>::NiceMock"
            },
            "punit": {
              "full_type": "int const",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 98
              },
              "type": null
            }
          },
          "lines": 11,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 8,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 92
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 92
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<int, int, std::function<void (int)>>>::~InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 92
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<int,int,std::function<void(int)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "lunit": {
              "full_type": "int const",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 99
              },
              "type": null
            },
            "mock": {
              "full_type": "testing::NiceMock<testing::MockFunction<std::function<void(char)>>>::NiceMock",
              "name": "mock",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 96
              },
              "type": "testing::NiceMock<testing::MockFunction<std::function<void(char)>>>::NiceMock"
            },
            "punit": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 98
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "lines": 11,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 8,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 92
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 92
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::~InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 92
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 92
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_and_binding_a_unit_a_calls_is_made_with_the_translation_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "mock": {
              "full_type": "Mock",
              "name": "mock",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 83
              },
              "type": null
            },
            "punit": {
              "full_type": "const auto",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 85
              },
              "type": null
            }
          },
          "lines": 9,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 6,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 79
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float, float, std::function<void (float)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "mock": {
              "full_type": "testing::NiceMock<testing::MockFunction<std::function<void(float)>>>::NiceMock",
              "name": "mock",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 83
              },
              "type": "testing::NiceMock<testing::MockFunction<std::function<void(float)>>>::NiceMock"
            },
            "punit": {
              "full_type": "float const",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 85
              },
              "type": null
            }
          },
          "lines": 9,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 6,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 79
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 79
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<float, float, std::function<void (float)>>>::~InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 79
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<float,float,std::function<void(float)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int, int, std::function<void (int)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "mock": {
              "full_type": "testing::NiceMock<testing::MockFunction<std::function<void(int)>>>::NiceMock",
              "name": "mock",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 83
              },
              "type": "testing::NiceMock<testing::MockFunction<std::function<void(int)>>>::NiceMock"
            },
            "punit": {
              "full_type": "int const",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 85
              },
              "type": null
            }
          },
          "lines": 9,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 6,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 79
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 79
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<int, int, std::function<void (int)>>>::~InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 79
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<int,int,std::function<void(int)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "mock": {
              "full_type": "testing::NiceMock<testing::MockFunction<std::function<void(char)>>>::NiceMock",
              "name": "mock",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 83
              },
              "type": "testing::NiceMock<testing::MockFunction<std::function<void(char)>>>::NiceMock"
            },
            "punit": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 85
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "lines": 9,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 6,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 79
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(const class me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 79
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::~InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 79
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 79
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_After_subscribing_an_observer_but_without_binding_no_calls_are_made_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 66
              },
              "type": "testing::AssertionResult"
            },
            "lunit": {
              "full_type": "const auto",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 62
              },
              "type": null
            },
            "punit": {
              "full_type": "const auto",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 61
              },
              "type": null
            }
          },
          "lines": 7,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 60
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float, float, std::function<void (float)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 66
              },
              "type": "testing::AssertionResult"
            },
            "lunit": {
              "full_type": "float const",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 62
              },
              "type": null
            },
            "punit": {
              "full_type": "float const",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 61
              },
              "type": null
            }
          },
          "lines": 7,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 4,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 60
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 60
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<float, float, std::function<void (float)>>>::~InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 60
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<float,float,std::function<void(float)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int, int, std::function<void (int)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 66
              },
              "type": "testing::AssertionResult"
            },
            "lunit": {
              "full_type": "int const",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 62
              },
              "type": null
            },
            "punit": {
              "full_type": "int const",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 61
              },
              "type": null
            }
          },
          "lines": 7,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 4,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 60
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 60
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<int, int, std::function<void (int)>>>::~InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 60
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<int,int,std::function<void(int)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 66
              },
              "type": "testing::AssertionResult"
            },
            "lunit": {
              "full_type": "int const",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 62
              },
              "type": null
            },
            "punit": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 61
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "lines": 7,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 4,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 60
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 60
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::~InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 60
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 60
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_bound_after_binding_it_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 76
              },
              "type": "testing::AssertionResult"
            },
            "lunit": {
              "full_type": "const auto",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 71
              },
              "type": null
            },
            "punit": {
              "full_type": "const auto",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 70
              },
              "type": null
            }
          },
          "lines": 8,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 5,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 69
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float, float, std::function<void (float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float, float, std::function<void (float)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 76
              },
              "type": "testing::AssertionResult"
            },
            "lunit": {
              "full_type": "float const",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 71
              },
              "type": null
            },
            "punit": {
              "full_type": "float const",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 70
              },
              "type": null
            }
          },
          "lines": 8,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 5,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<float, float, class std::function<void (float)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float, float, std::function<void (float)>>>::operator=(float)> > > &(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<float, float, class std::function<void (float)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float,float,std::function<void(float)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<float, float, std::function<void (float)>>>::~InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 69
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<float,float,std::function<void(float)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int, int, std::function<void (int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int, int, std::function<void (int)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 76
              },
              "type": "testing::AssertionResult"
            },
            "lunit": {
              "full_type": "int const",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 71
              },
              "type": null
            },
            "punit": {
              "full_type": "int const",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 70
              },
              "type": null
            }
          },
          "lines": 8,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 5,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<int, int, class std::function<void (int)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int, int, std::function<void (int)>>>::operator=(int)> > > &(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<int, int, class std::function<void (int)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int,int,std::function<void(int)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<int, int, std::function<void (int)>>>::~InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 69
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<int,int,std::function<void(int)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test"
    },
    "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test": {
      "bases": [
        "me2::input::logical::tests::InputDispatcherTest<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 76
              },
              "type": "testing::AssertionResult"
            },
            "lunit": {
              "full_type": "int const",
              "name": "lunit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 71
              },
              "type": null
            },
            "punit": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "punit",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 70
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "lines": 8,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 5,
          "template_args": null,
          "virtual": true
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::operator=(char)> > > &(const class me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<class std::tuple<class std::basic_string<char>, int, class std::function<void (char)> > > &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>>::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test<std::tuple<std::basic_string<char>, int, std::function<void (char)>>>::~InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
            "line": 69
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test",
      "namespace": "me2::input::logical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/logical/input_dispatcher_tests.cpp",
        "line": 69
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": [
        "std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int,std::function<void(char)>>::tuple"
      ],
      "template_parent": "me2::input::logical::tests::InputDispatcherTest_Physical_unit_is_not_bound_after_unbinding_it_Test"
    },
    "me2::input::physical::EventDispatcher": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::input::physical::EventDispatcher::queue": {
          "access": "private",
          "full_type": "me2::input::physical::EventDispatcher::EventQueue *",
          "name": "queue",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 96
          },
          "type": "ALLEGRO_EVENT_QUEUE"
        },
        "me2::input::physical::EventDispatcher::subscribed": {
          "access": "private",
          "full_type": "me2::input::physical::EventDispatcher::EventObservers",
          "name": "subscribed",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 97
          },
          "type": "std::list<std::function<void(constunionALLEGRO_EVENT&)>,std::allocator<std::function<void(constunionALLEGRO_EVENT&)>>>::list"
        }
      },
      "friends": null,
      "methods": {
        "me2::input::physical::EventDispatcher::DispatchInput(void) const": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": {
            "event": {
              "full_type": "me2::input::physical::EventDispatcher::Event",
              "name": "event",
              "src_info": {
                "col": 11,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
                "line": 14
              },
              "type": null
            }
          },
          "lines": 7,
          "literals": 5,
          "loops": 1,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "DispatchInput",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
            "line": 11
          },
          "statements": 5,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::Emit(const me2::input::physical::EventDispatcher::Event &) const": {
          "access": "protected",
          "args": {
            "event": {
              "full_type": "const me2::input::physical::EventDispatcher::Event &",
              "name": "event",
              "src_info": {
                "col": 41,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
                "line": 20
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": {
            "__begin2": {
              "full_type": "std::_List_const_iterator<std::function<void(constunionALLEGRO_EVENT&)>>::_List_const_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 29,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
                "line": 21
              },
              "type": "std::_List_const_iterator<std::function<void(constunionALLEGRO_EVENT&)>>::_List_const_iterator"
            },
            "__end2": {
              "full_type": "std::_List_const_iterator<std::function<void(constunionALLEGRO_EVENT&)>>::_List_const_iterator",
              "name": "__end2",
              "src_info": {
                "col": 29,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
                "line": 21
              },
              "type": "std::_List_const_iterator<std::function<void(constunionALLEGRO_EVENT&)>>::_List_const_iterator"
            },
            "__range2": {
              "full_type": "std::list<std::function<void(constunionALLEGRO_EVENT&)>,std::allocator<std::function<void(constunionALLEGRO_EVENT&)>>>::list",
              "name": "__range2",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
                "line": 21
              },
              "type": "std::list<std::function<void(constunionALLEGRO_EVENT&)>,std::allocator<std::function<void(constunionALLEGRO_EVENT&)>>>::list"
            },
            "observer": {
              "full_type": "std::function<void(constunionALLEGRO_EVENT&)>::function",
              "name": "observer",
              "src_info": {
                "col": 20,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
                "line": 21
              },
              "type": "std::function<void(constunionALLEGRO_EVENT&)>::function"
            }
          },
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Emit",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
            "line": 20
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::EventDispatcher(class me2::input::physical::EventDispatcher &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "EventDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::EventDispatcher(const class me2::input::physical::EventDispatcher &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "EventDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::EventDispatcher(me2::input::physical::EventDispatcher::EventQueue &)": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "EventDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 31
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::GetEventQueue(void) -> me2::input::physical::EventDispatcher::EventQueue &": {
          "access": "public",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetEventQueue",
          "ret_type": "ALLEGRO_EVENT_QUEUE",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 54
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::GetEventQueue(void) const -> const me2::input::physical::EventDispatcher::EventQueue &": {
          "access": "public",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetEventQueue",
          "ret_type": "ALLEGRO_EVENT_QUEUE",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 42
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::SetEventQueue(me2::input::physical::EventDispatcher::EventQueue &)": {
          "access": "public",
          "args": {
            "q": {
              "full_type": "ALLEGRO_EVENT_QUEUE",
              "name": "q",
              "src_info": {
                "col": 34,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
                "line": 64
              },
              "type": "ALLEGRO_EVENT_QUEUE"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetEventQueue",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 64
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::Subscribe(const me2::input::physical::EventDispatcher::EventObserver &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(constunionALLEGRO_EVENT&)>::function",
              "name": "f",
              "src_info": {
                "col": 54,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
                "line": 5
              },
              "type": "std::function<void(constunionALLEGRO_EVENT&)>::function"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Subscribe",
          "ret_type": "void",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/input/physical/event_dispatcher.cpp",
            "line": 5
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::operator=(class me2::input::physical::EventDispatcher &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::EventDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
                "line": 19
              },
              "type": "me2::input::physical::EventDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::EventDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::operator=(const class me2::input::physical::EventDispatcher &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::EventDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
                "line": 19
              },
              "type": "me2::input::physical::EventDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::EventDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::~EventDispatcher(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~EventDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::EventDispatcher::~EventDispatcher(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~EventDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "EventDispatcher",
      "namespace": "me2::input::physical::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/event_dispatcher.hpp",
        "line": 19
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::physical::KeyboardDispatcher": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::input::physical::KeyboardDispatcher::bound": {
          "access": "private",
          "full_type": "me2::input::physical::KeyboardDispatcher::Keys",
          "name": "bound",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
            "line": 83
          },
          "type": "std::list<int,std::allocator<int>>::list"
        },
        "me2::input::physical::KeyboardDispatcher::subscribed": {
          "access": "private",
          "full_type": "me2::input::physical::KeyboardDispatcher::KeyObservers",
          "name": "subscribed",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
            "line": 84
          },
          "type": "std::list<std::function<void(int)>,std::allocator<std::function<void(int)>>>::list"
        }
      },
      "friends": null,
      "methods": {
        "me2::input::physical::KeyboardDispatcher::Bind(me2::input::physical::KeyboardDispatcher::Key)": {
          "access": "public",
          "args": {
            "k": {
              "full_type": "me2::input::physical::KeyboardDispatcher::Key",
              "name": "k",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 17
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Bind",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
            "line": 17
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::DispatchInput(void) const": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": {
            "__begin2": {
              "full_type": "std::_List_const_iterator<int>::_List_const_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 32
              },
              "type": "std::_List_const_iterator<int>::_List_const_iterator"
            },
            "__end2": {
              "full_type": "std::_List_const_iterator<int>::_List_const_iterator",
              "name": "__end2",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 32
              },
              "type": "std::_List_const_iterator<int>::_List_const_iterator"
            },
            "__range2": {
              "full_type": "std::list<int,std::allocator<int>>::list",
              "name": "__range2",
              "src_info": {
                "col": 19,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 32
              },
              "type": "std::list<int,std::allocator<int>>::list"
            },
            "key": {
              "full_type": "int",
              "name": "key",
              "src_info": {
                "col": 13,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 32
              },
              "type": null
            },
            "state": {
              "full_type": "ALLEGRO_KEYBOARD_STATE",
              "name": "state",
              "src_info": {
                "col": 26,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 30
              },
              "type": "ALLEGRO_KEYBOARD_STATE"
            }
          },
          "lines": 5,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "DispatchInput",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
            "line": 29
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::Emit(me2::input::physical::KeyboardDispatcher::Key) const": {
          "access": "protected",
          "args": {
            "k": {
              "full_type": "me2::input::physical::KeyboardDispatcher::Key",
              "name": "k",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 36
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": {
            "__begin2": {
              "full_type": "std::_List_const_iterator<std::function<void(int)>>::_List_const_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 29,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 37
              },
              "type": "std::_List_const_iterator<std::function<void(int)>>::_List_const_iterator"
            },
            "__end2": {
              "full_type": "std::_List_const_iterator<std::function<void(int)>>::_List_const_iterator",
              "name": "__end2",
              "src_info": {
                "col": 29,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 37
              },
              "type": "std::_List_const_iterator<std::function<void(int)>>::_List_const_iterator"
            },
            "__range2": {
              "full_type": "std::list<std::function<void(int)>,std::allocator<std::function<void(int)>>>::list",
              "name": "__range2",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 37
              },
              "type": "std::list<std::function<void(int)>,std::allocator<std::function<void(int)>>>::list"
            },
            "observer": {
              "full_type": "std::function<void(int)>::function",
              "name": "observer",
              "src_info": {
                "col": 20,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 37
              },
              "type": "std::function<void(int)>::function"
            }
          },
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Emit",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
            "line": 36
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::IsBound(me2::input::physical::KeyboardDispatcher::Key) const -> _Bool": {
          "access": "public",
          "args": {
            "k": {
              "full_type": "me2::input::physical::KeyboardDispatcher::Key",
              "name": "k",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 13
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsBound",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
            "line": 13
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::KeyboardDispatcher(class me2::input::physical::KeyboardDispatcher &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "KeyboardDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::KeyboardDispatcher(const class me2::input::physical::KeyboardDispatcher &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "KeyboardDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::KeyboardDispatcher(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "KeyboardDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::Subscribe(const me2::input::physical::KeyboardDispatcher::KeyObserver &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(int)>::function",
              "name": "f",
              "src_info": {
                "col": 55,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 7
              },
              "type": "std::function<void(int)>::function"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Subscribe",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
            "line": 7
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::UnBind(me2::input::physical::KeyboardDispatcher::Key)": {
          "access": "public",
          "args": {
            "k": {
              "full_type": "me2::input::physical::KeyboardDispatcher::Key",
              "name": "k",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
                "line": 23
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "UnBind",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/input/physical/keyboard_dispatcher.cpp",
            "line": 23
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::operator=(class me2::input::physical::KeyboardDispatcher &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::KeyboardDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
                "line": 18
              },
              "type": "me2::input::physical::KeyboardDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::KeyboardDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::operator=(const class me2::input::physical::KeyboardDispatcher &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::KeyboardDispatcher",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
                "line": 18
              },
              "type": "me2::input::physical::KeyboardDispatcher"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::KeyboardDispatcher",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::~KeyboardDispatcher(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~KeyboardDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::KeyboardDispatcher::~KeyboardDispatcher(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~KeyboardDispatcher",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
            "line": 18
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "KeyboardDispatcher",
      "namespace": "me2::input::physical::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/input/physical/keyboard_dispatcher.hpp",
        "line": 18
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": {
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially::dispatcher": {
          "access": "protected",
          "full_type": "std::unique_ptr<KeyboardDispatcher>",
          "name": "dispatcher",
          "src_info": {
            "col": 39,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 14
          },
          "type": "std::unique_ptr<KeyboardDispatcher,std::default_delete<KeyboardDispatcher>>::unique_ptr"
        }
      },
      "friends": null,
      "methods": {
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially::Given_a_keyboard_dispatcher_initially(class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_a_keyboard_dispatcher_initially",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially::Given_a_keyboard_dispatcher_initially(const class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_a_keyboard_dispatcher_initially",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially::Given_a_keyboard_dispatcher_initially(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_a_keyboard_dispatcher_initially",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially::SetUp(void)": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUp",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 12
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially::operator=(class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 10
              },
              "type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially::operator=(const class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 10
              },
              "type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially::~Given_a_keyboard_dispatcher_initially(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Given_a_keyboard_dispatcher_initially",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Given_a_keyboard_dispatcher_initially",
      "namespace": "me2::input::physical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
        "line": 10
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test": {
      "bases": [
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test(class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 23
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test(const class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 23
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 23
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 27
              },
              "type": "testing::AssertionResult"
            },
            "rand": {
              "full_type": "const std::uniform_int_distribution<>::result_type",
              "name": "rand",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 24
              },
              "type": null
            }
          },
          "lines": 5,
          "literals": 9,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 23
          },
          "statements": 3,
          "template_args": null,
          "virtual": true
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test::operator=(class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 23
              },
              "type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 23
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test::operator=(const class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 23
              },
              "type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 23
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test::~Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 23
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Given_a_keyboard_dispatcher_initially_After_binding_a_key_its_bound_Test",
      "namespace": "me2::input::physical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
        "line": 23
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test": {
      "bases": [
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test(class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test(const class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 34,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 20
              },
              "type": "testing::AssertionResult"
            },
            "i": {
              "full_type": "int",
              "name": "i",
              "src_info": {
                "col": 13,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 20
              },
              "type": null
            },
            "max": {
              "full_type": "const std::uniform_int_distribution<>::result_type",
              "name": "max",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 18
              },
              "type": null
            }
          },
          "lines": 4,
          "literals": 10,
          "loops": 1,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 17
          },
          "statements": 2,
          "template_args": null,
          "virtual": true
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test::operator=(class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 17
              },
              "type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test::operator=(const class me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
                "line": 17
              },
              "type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test::~Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Given_a_keyboard_dispatcher_initially_No_keys_are_bound_Test",
      "namespace": "me2::input::physical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/keyboard_dispatcher_tests.cpp",
        "line": 17
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": {
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue::manager": {
          "access": "protected",
          "full_type": "std::unique_ptr<EventDispatcher>",
          "name": "manager",
          "src_info": {
            "col": 36,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 46
          },
          "type": "std::unique_ptr<EventDispatcher,std::default_delete<EventDispatcher>>::unique_ptr"
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue::queue": {
          "access": "protected",
          "full_type": "me2::input::physical::tests::(anonymous namespace)::UniqueEventQueuePtr",
          "name": "queue",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 45
          },
          "type": "std::unique_ptr<ALLEGRO_EVENT_QUEUE,>::unique_ptr"
        }
      },
      "friends": null,
      "methods": {
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue::Given_an_event_manager_with_a_registered_to_an_event_source_queue(class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 35
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue::Given_an_event_manager_with_a_registered_to_an_event_source_queue(const class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 35
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue::Given_an_event_manager_with_a_registered_to_an_event_source_queue(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 35
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue::SetUp(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 4,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetUp",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 38
          },
          "statements": 3,
          "template_args": null,
          "virtual": true
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue::operator=(class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 35
              },
              "type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 35
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue::operator=(const class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 35
              },
              "type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 35
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue::~Given_an_event_manager_with_a_registered_to_an_event_source_queue(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Given_an_event_manager_with_a_registered_to_an_event_source_queue",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 35
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue",
      "namespace": "me2::input::physical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
        "line": 35
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test": {
      "bases": [
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test(class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 49
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test(const class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 49
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 49
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "mock": {
              "full_type": "testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>::NiceMock",
              "name": "mock",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 52
              },
              "type": "testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>::NiceMock"
            }
          },
          "lines": 9,
          "literals": 6,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 49
          },
          "statements": 5,
          "template_args": null,
          "virtual": true
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test::operator=(class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 49
              },
              "type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 49
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test::operator=(const class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 49
              },
              "type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 49
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test::~Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 49
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_an_observer_an_emitted_even_from_the_source_will_be_forwarded_to_him_Test",
      "namespace": "me2::input::physical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
        "line": 49
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test": {
      "bases": [
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test(class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 62
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test(const class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 62
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 62
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": {
            "__begin3": {
              "full_type": "__gnu_cxx::__normal_iterator<classtesting::NiceMock<classtesting::MockFunction<classstd::function<void(constunionALLEGRO_EVENT&)>>>*,std::vector<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>,std::allocator<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>>>>::__normal_iterator",
              "name": "__begin3",
              "src_info": {
                "col": 19,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "__gnu_cxx::__normal_iterator<classtesting::NiceMock<classtesting::MockFunction<classstd::function<void(constunionALLEGRO_EVENT&)>>>*,std::vector<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>,std::allocator<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>>>>::__normal_iterator"
            },
            "__end3": {
              "full_type": "__gnu_cxx::__normal_iterator<classtesting::NiceMock<classtesting::MockFunction<classstd::function<void(constunionALLEGRO_EVENT&)>>>*,std::vector<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>,std::allocator<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>>>>::__normal_iterator",
              "name": "__end3",
              "src_info": {
                "col": 19,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "__gnu_cxx::__normal_iterator<classtesting::NiceMock<classtesting::MockFunction<classstd::function<void(constunionALLEGRO_EVENT&)>>>*,std::vector<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>,std::allocator<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>>>>::__normal_iterator"
            },
            "__range3": {
              "full_type": "std::vector<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>,std::allocator<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>>>::vector",
              "name": "__range3",
              "src_info": {
                "col": 21,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "std::vector<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>,std::allocator<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>>>::vector"
            },
            "i": {
              "full_type": "int",
              "name": "i",
              "src_info": {
                "col": 13,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 70
              },
              "type": null
            },
            "m": {
              "full_type": "const std::size_t",
              "name": "m",
              "src_info": {
                "col": 21,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 65
              },
              "type": null
            },
            "mock": {
              "full_type": "testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>::NiceMock",
              "name": "mock",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 69
              },
              "type": "testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>::NiceMock"
            },
            "n": {
              "full_type": "const std::uniform_int_distribution<>::result_type",
              "name": "n",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 66
              },
              "type": null
            },
            "observers": {
              "full_type": "std::vector<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>,std::allocator<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>>>::vector",
              "name": "observers",
              "src_info": {
                "col": 29,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 67
              },
              "type": "std::vector<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>,std::allocator<testing::NiceMock<testing::MockFunction<std::function<void(constunionALLEGRO_EVENT&)>>>>>::vector"
            }
          },
          "lines": 13,
          "literals": 15,
          "loops": 1,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 62
          },
          "statements": 8,
          "template_args": null,
          "virtual": true
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test::operator=(class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 62
              },
              "type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 62
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test::operator=(const class me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
                "line": 62
              },
              "type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 62
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::input::physical::tests::Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test::~Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
            "line": 62
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Given_an_event_manager_with_a_registered_to_an_event_source_queue_After_subscribing_m_observers_and_emitting_n_events_from_the_source_all_m_observers_will_be_called_n_times_Test",
      "namespace": "me2::input::physical::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/input/physical/event_dispatcher_tests.cpp",
        "line": 62
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::physics::GravityHandler": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::physics::GravityHandler::falling": {
          "access": "private",
          "full_type": "_Bool",
          "name": "falling",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 43
          },
          "type": null
        },
        "me2::physics::GravityHandler::gravity_addicted": {
          "access": "private",
          "full_type": "_Bool",
          "name": "gravity_addicted",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 42
          },
          "type": null
        },
        "me2::physics::GravityHandler::on_solid_ground": {
          "access": "private",
          "full_type": "me2::physics::GravityHandler::OnSolidGround",
          "name": "on_solid_ground",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 39
          },
          "type": "std::function<_Bool(conststructme2::rendering::BasicRect<int,unsignedshort>&)>::function"
        },
        "me2::physics::GravityHandler::on_start_falling": {
          "access": "private",
          "full_type": "me2::physics::GravityHandler::OnStartFallingAction",
          "name": "on_start_falling",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 40
          },
          "type": "std::function<void(void)>::function"
        },
        "me2::physics::GravityHandler::on_stop_falling": {
          "access": "private",
          "full_type": "me2::physics::GravityHandler::OnStopFallingAction",
          "name": "on_stop_falling",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 41
          },
          "type": "std::function<void(void)>::function"
        }
      },
      "friends": null,
      "methods": {
        "me2::physics::GravityHandler::Check(const me2::physics::GravityHandler::Rect &)": {
          "access": "public",
          "args": {
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 40,
                "file": "/home/vkrs/Documents/projects/me2/src/physics/gravity_handler.cpp",
                "line": 13
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 7,
          "definitions": null,
          "lines": 16,
          "literals": 7,
          "loops": 0,
          "max_scope": 3,
          "method_type": "UserMethod",
          "name": "Check",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/physics/gravity_handler.cpp",
            "line": 13
          },
          "statements": 9,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::GravityHandler(class me2::physics::GravityHandler &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "GravityHandler",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::GravityHandler(const class me2::physics::GravityHandler &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "GravityHandler",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::GravityHandler(const class me2::physics::GravityHandler &) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "GravityHandler",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::GravityHandler(const me2::physics::GravityHandler::OnSolidGround &, _Bool)": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "GravityHandler",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 17
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::IsGravityAddicted(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsGravityAddicted",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::Reset(void)": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 4,
          "literals": 7,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Reset",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/physics/gravity_handler.cpp",
            "line": 7
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::SetGravityAddicted(_Bool)": {
          "access": "public",
          "args": {
            "flag": {
              "full_type": "_Bool",
              "name": "flag",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
                "line": 25
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetGravityAddicted",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 25
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::SetOnSolidGround(const me2::physics::GravityHandler::OnSolidGround &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<_Bool(conststructme2::rendering::BasicRect<int,unsignedshort>&)>::function",
              "name": "f",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
                "line": 26
              },
              "type": "std::function<_Bool(conststructme2::rendering::BasicRect<int,unsignedshort>&)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnSolidGround",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 26
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::SetOnStartFalling(const me2::physics::GravityHandler::OnStartFallingAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 54,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
                "line": 30
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnStartFalling",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 30
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::SetOnStopFalling(const me2::physics::GravityHandler::OnStartFallingAction &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(void)>::function",
              "name": "f",
              "src_info": {
                "col": 53,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
                "line": 33
              },
              "type": "std::function<void(void)>::function"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetOnStopFalling",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 33
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::operator=(class me2::physics::GravityHandler &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::physics::GravityHandler",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
                "line": 10
              },
              "type": "me2::physics::GravityHandler"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::physics::GravityHandler",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::operator=(const class me2::physics::GravityHandler &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::physics::GravityHandler",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
                "line": 10
              },
              "type": "me2::physics::GravityHandler"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::physics::GravityHandler",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::physics::GravityHandler::~GravityHandler(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~GravityHandler",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
            "line": 10
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "GravityHandler",
      "namespace": "me2::physics::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/physics/gravity_handler.hpp",
        "line": 10
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::BasicPoint": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::rendering::BasicPoint::x": {
          "access": "public",
          "full_type": "Coord",
          "name": "x",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 17
          },
          "type": null
        },
        "me2::rendering::BasicPoint::y": {
          "access": "public",
          "full_type": "Coord",
          "name": "y",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 18
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::rendering::BasicPoint::operator!=(const BasicPoint<Coord> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "const BasicPoint<Coord> &",
              "name": "rhs",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 21
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator!=",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint::operator==(const BasicPoint<Coord> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "const BasicPoint<Coord> &",
              "name": "rhs",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 20
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator==",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 20
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "BasicPoint",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
        "line": 16
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::BasicPoint<int>::BasicPoint": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::rendering::BasicPoint<int>::x": {
          "access": "public",
          "full_type": "int",
          "name": "x",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 17
          },
          "type": null
        },
        "me2::rendering::BasicPoint<int>::y": {
          "access": "public",
          "full_type": "int",
          "name": "y",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 18
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::rendering::BasicPoint<int>::BasicPoint(const struct me2::rendering::BasicPoint<int> &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicPoint",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::BasicPoint(const struct me2::rendering::BasicPoint<int> &) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicPoint",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::BasicPoint(struct me2::rendering::BasicPoint<int> &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicPoint",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::BasicPoint(struct me2::rendering::BasicPoint<int> &&) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicPoint",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::BasicPoint(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BasicPoint",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::BasicPoint(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BasicPoint",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::operator!=(const struct me2::rendering::BasicPoint<int> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "rhs",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 21
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator!=",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::operator!=(const struct me2::rendering::BasicPoint<int> &) const noexcept -> _Bool": {
          "access": "public",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "rhs",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 21
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator!=",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 21
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::operator=(const struct me2::rendering::BasicPoint<int> &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 16
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicPoint<int>::BasicPoint",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::operator=(const struct me2::rendering::BasicPoint<int> &) noexcept": {
          "access": "public",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 16
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicPoint<int>::BasicPoint",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::operator=(struct me2::rendering::BasicPoint<int> &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 16
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicPoint<int>::BasicPoint",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::operator=(struct me2::rendering::BasicPoint<int> &&) noexcept": {
          "access": "public",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 16
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicPoint<int>::BasicPoint",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::operator==(const struct me2::rendering::BasicPoint<int> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "rhs",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 20
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator==",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 20
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::operator==(const struct me2::rendering::BasicPoint<int> &) const noexcept -> _Bool": {
          "access": "public",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "rhs",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 20
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator==",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 20
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::~BasicPoint(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~BasicPoint",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicPoint<int>::~BasicPoint(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~BasicPoint",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "BasicPoint",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
        "line": 16
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": null,
      "template_parent": "me2::rendering::BasicPoint"
    },
    "me2::rendering::BasicRect": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::rendering::BasicRect::pos": {
          "access": "public",
          "full_type": "BasicPoint<Coord>",
          "name": "pos",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 49
          },
          "type": null
        },
        "me2::rendering::BasicRect::size": {
          "access": "public",
          "full_type": "BasicSize<Dim>",
          "name": "size",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 50
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::rendering::BasicRect::operator!=(const BasicRect<Coord, Dim> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "const BasicRect<Coord, Dim> &",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 53
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator!=",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 53
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect::operator==(const BasicRect<Coord, Dim> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "const BasicRect<Coord, Dim> &",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 52
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator==",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "BasicRect",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
        "line": 48
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::BasicRect<int,unsignedshort>::BasicRect": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::BasicRect<int, unsigned short>::BasicRect(const struct me2::rendering::BasicRect<int, unsigned short> &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicRect",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 48
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::BasicRect(const struct me2::rendering::BasicRect<int, unsigned short> &) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicRect",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 48
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::BasicRect(struct me2::rendering::BasicRect<int, unsigned short> &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicRect",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 48
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::BasicRect(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BasicRect",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 48
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::BasicRect(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BasicRect",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 48
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::operator!=(const struct me2::rendering::BasicRect<int, unsigned short> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 53
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator!=",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 53
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::operator!=(const struct me2::rendering::BasicRect<int, unsigned short> &) const noexcept -> _Bool": {
          "access": "public",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 53
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator!=",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 53
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::operator=(const struct me2::rendering::BasicRect<int, unsigned short> &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 48
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 48
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::operator=(const struct me2::rendering::BasicRect<int, unsigned short> &) noexcept": {
          "access": "public",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 48
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 48
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::operator=(struct me2::rendering::BasicRect<int, unsigned short> &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 48
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 48
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::operator==(const struct me2::rendering::BasicRect<int, unsigned short> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 52
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator==",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 52
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::operator==(const struct me2::rendering::BasicRect<int, unsigned short> &) const noexcept -> _Bool": {
          "access": "public",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 52
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator==",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 52
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicRect<int, unsigned short>::~BasicRect(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~BasicRect",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 48
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "BasicRect",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
        "line": 48
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": null,
      "template_parent": "me2::rendering::BasicRect"
    },
    "me2::rendering::BasicSize": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::rendering::BasicSize::h": {
          "access": "public",
          "full_type": "Dim",
          "name": "h",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 33
          },
          "type": null
        },
        "me2::rendering::BasicSize::w": {
          "access": "public",
          "full_type": "Dim",
          "name": "w",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 32
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::rendering::BasicSize::operator!=(const BasicSize<Dim> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "const BasicSize<Dim> &",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 36
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator!=",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 36
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize::operator==(const BasicSize<Dim> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "const BasicSize<Dim> &",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 35
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator==",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 35
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "BasicSize",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
        "line": 31
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::BasicSize<unsignedshort>::BasicSize": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::rendering::BasicSize<unsigned short>::h": {
          "access": "public",
          "full_type": "unsigned short",
          "name": "h",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 33
          },
          "type": null
        },
        "me2::rendering::BasicSize<unsigned short>::w": {
          "access": "public",
          "full_type": "unsigned short",
          "name": "w",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 32
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::rendering::BasicSize<unsigned short>::BasicSize(const struct me2::rendering::BasicSize<unsigned short> &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicSize",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::BasicSize(const struct me2::rendering::BasicSize<unsigned short> &) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicSize",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::BasicSize(struct me2::rendering::BasicSize<unsigned short> &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BasicSize",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::BasicSize(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BasicSize",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::BasicSize(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BasicSize",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::operator!=(const struct me2::rendering::BasicSize<unsigned short> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 36
              },
              "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator!=",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 36
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::operator!=(const struct me2::rendering::BasicSize<unsigned short> &) const noexcept -> _Bool": {
          "access": "public",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 36
              },
              "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator!=",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 36
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::operator=(const struct me2::rendering::BasicSize<unsigned short> &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 31
              },
              "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::operator=(const struct me2::rendering::BasicSize<unsigned short> &) noexcept": {
          "access": "public",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 31
              },
              "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::operator=(struct me2::rendering::BasicSize<unsigned short> &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 31
              },
              "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::operator==(const struct me2::rendering::BasicSize<unsigned short> &) const -> _Bool": {
          "access": "unknown",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 35
              },
              "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator==",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 35
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::operator==(const struct me2::rendering::BasicSize<unsigned short> &) const noexcept -> _Bool": {
          "access": "public",
          "args": {
            "rhs": {
              "full_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
              "name": "rhs",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
                "line": 35
              },
              "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator==",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 35
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::~BasicSize(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~BasicSize",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BasicSize<unsigned short>::~BasicSize(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~BasicSize",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "BasicSize",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/resolution.hpp",
        "line": 31
      },
      "structure_type": "TemplateInstantiationSpecialization",
      "template_args": null,
      "template_parent": "me2::rendering::BasicSize"
    },
    "me2::rendering::BitmapDeleter": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::BitmapDeleter::BitmapDeleter(const struct me2::rendering::BitmapDeleter &) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BitmapDeleter",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BitmapDeleter::BitmapDeleter(struct me2::rendering::BitmapDeleter &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BitmapDeleter",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BitmapDeleter::BitmapDeleter(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "BitmapDeleter",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BitmapDeleter::operator()(ALLEGRO_BITMAP *) const": {
          "access": "public",
          "args": {
            "bmp": {
              "full_type": "ALLEGRO_BITMAP",
              "name": "bmp",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
                "line": 25
              },
              "type": "ALLEGRO_BITMAP"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator()",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
            "line": 25
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BitmapDeleter::operator=(const struct me2::rendering::BitmapDeleter &) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BitmapDeleter",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
                "line": 24
              },
              "type": "me2::rendering::BitmapDeleter"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BitmapDeleter",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BitmapDeleter::operator=(struct me2::rendering::BitmapDeleter &&) noexcept": {
          "access": "public",
          "args": {
            "": {
              "full_type": "me2::rendering::BitmapDeleter",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
                "line": 24
              },
              "type": "me2::rendering::BitmapDeleter"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::rendering::BitmapDeleter",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
            "line": 24
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BitmapDeleter::~BitmapDeleter(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~BitmapDeleter",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
            "line": 24
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "BitmapDeleter",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bitmap.hpp",
        "line": 24
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::BoundingArea": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::BoundingArea::BoundingArea(class me2::rendering::BoundingArea &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BoundingArea",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 96
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingArea::BoundingArea(const class me2::rendering::BoundingArea &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BoundingArea",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 95
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingArea::BoundingArea(void) noexcept": {
          "access": "protected",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BoundingArea",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 94
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingArea::operator=(class me2::rendering::BoundingArea &&) -> class me2::rendering::BoundingArea &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BoundingArea",
              "name": "",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
                "line": 99
              },
              "type": "me2::rendering::BoundingArea"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::BoundingArea",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 99
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingArea::operator=(const class me2::rendering::BoundingArea &) -> class me2::rendering::BoundingArea &": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BoundingArea",
              "name": "",
              "src_info": {
                "col": 37,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
                "line": 98
              },
              "type": "me2::rendering::BoundingArea"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::BoundingArea",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 98
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingArea::~BoundingArea(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~BoundingArea",
          "ret_type": "void",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "BoundingArea",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
        "line": 19
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::BoundingBox": {
      "bases": [
        "me2::rendering::BoundingArea"
      ],
      "contains": null,
      "fields": {
        "me2::rendering::BoundingBox::bottom_right": {
          "access": "private",
          "full_type": "me2::rendering::Point",
          "name": "bottom_right",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 150
          },
          "type": "me2::rendering::BasicPoint<int>::BasicPoint"
        },
        "me2::rendering::BoundingBox::top_left": {
          "access": "private",
          "full_type": "me2::rendering::Point",
          "name": "top_left",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 149
          },
          "type": "me2::rendering::BasicPoint<int>::BasicPoint"
        }
      },
      "friends": null,
      "methods": {
        "me2::rendering::BoundingBox::BoundingBox(const class me2::rendering::BoundingBox &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BoundingBox",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 106
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingBox::BoundingBox(const me2::rendering::Point &, const me2::rendering::Point &)": {
          "access": "public",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BoundingBox",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 116
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingBox::Clone(void) const -> std::unique_ptr<BoundingArea>": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Clone",
          "ret_type": "std::unique_ptr<BoundingArea,std::default_delete<BoundingArea>>::unique_ptr",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
            "line": 39
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::BoundingBox::Encloses(const me2::rendering::Point &) const -> _Bool": {
          "access": "public",
          "args": {
            "p": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "p",
              "src_info": {
                "col": 41,
                "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
                "line": 6
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Encloses",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
            "line": 6
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::BoundingBox::GetBottomRight(void) const -> const me2::rendering::Point &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetBottomRight",
          "ret_type": "me2::rendering::BasicPoint<int>::BasicPoint",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 135
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingBox::GetTopLeft(void) const -> const me2::rendering::Point &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTopLeft",
          "ret_type": "me2::rendering::BasicPoint<int>::BasicPoint",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 128
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingBox::Intersects(const class me2::rendering::BoundingArea &) const -> _Bool": {
          "access": "public",
          "args": {
            "area": {
              "full_type": "me2::rendering::BoundingArea",
              "name": "area",
              "src_info": {
                "col": 50,
                "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
                "line": 26
              },
              "type": "me2::rendering::BoundingArea"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Intersects",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
            "line": 26
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::BoundingBox::Intersects(const class me2::rendering::BoundingBox &) const -> _Bool": {
          "access": "public",
          "args": {
            "box": {
              "full_type": "me2::rendering::BoundingBox",
              "name": "box",
              "src_info": {
                "col": 49,
                "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
                "line": 11
              },
              "type": "me2::rendering::BoundingBox"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 5,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Intersects",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
            "line": 11
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::BoundingBox::Intersects(const class me2::rendering::BoundingCircle &) const -> _Bool": {
          "access": "public",
          "args": {
            "circle": {
              "full_type": "me2::rendering::BoundingCircle",
              "name": "circle",
              "src_info": {
                "col": 52,
                "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
                "line": 18
              },
              "type": "me2::rendering::BoundingCircle"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Intersects",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
            "line": 18
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::BoundingBox::Intersects(const class me2::rendering::BoundingPolygon &) const -> _Bool": {
          "access": "public",
          "args": {
            "poly": {
              "full_type": "me2::rendering::BoundingPolygon",
              "name": "poly",
              "src_info": {
                "col": 53,
                "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
                "line": 22
              },
              "type": "me2::rendering::BoundingPolygon"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Intersects",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
            "line": 22
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::BoundingBox::Reposition(const me2::rendering::Point &)": {
          "access": "public",
          "args": {
            "p": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "p",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
                "line": 30
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Reposition",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
            "line": 30
          },
          "statements": 2,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::BoundingBox::Resize(const me2::rendering::Size &)": {
          "access": "public",
          "args": {
            "Size": {
              "full_type": "me2::rendering::BasicSize<unsignedshort>::BasicSize",
              "name": "Size",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
                "line": 35
              },
              "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Resize",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/rendering/bounding_area.cpp",
            "line": 35
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::BoundingBox::operator=(const class me2::rendering::BoundingBox &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BoundingBox",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
                "line": 106
              },
              "type": "me2::rendering::BoundingBox"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::BoundingBox",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 106
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingBox::~BoundingBox(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~BoundingBox",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 121
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "BoundingBox",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
        "line": 106
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::BoundingCircle": {
      "bases": [
        "me2::rendering::BoundingArea"
      ],
      "contains": null,
      "fields": {
        "me2::rendering::BoundingCircle::center": {
          "access": "private",
          "full_type": "me2::rendering::Point",
          "name": "center",
          "src_info": {
            "col": 9,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 217
          },
          "type": "me2::rendering::BasicPoint<int>::BasicPoint"
        },
        "me2::rendering::BoundingCircle::radius": {
          "access": "private",
          "full_type": "me2::rendering::Dim",
          "name": "radius",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 218
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::rendering::BoundingCircle::BoundingCircle(const class me2::rendering::BoundingCircle &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BoundingCircle",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 179
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingCircle::BoundingCircle(const me2::rendering::Point &, me2::rendering::Dim)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BoundingCircle",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 187
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingCircle::GetCenter(void) const -> const me2::rendering::Point &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetCenter",
          "ret_type": "me2::rendering::BasicPoint<int>::BasicPoint",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 196
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingCircle::GetRadius(void) const -> me2::rendering::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetRadius",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 203
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingCircle::operator=(const class me2::rendering::BoundingCircle &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BoundingCircle",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
                "line": 179
              },
              "type": "me2::rendering::BoundingCircle"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::BoundingCircle",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 179
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingCircle::~BoundingCircle(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~BoundingCircle",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 189
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "BoundingCircle",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
        "line": 179
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::BoundingPolygon": {
      "bases": [
        "me2::rendering::BoundingArea"
      ],
      "contains": null,
      "fields": {
        "me2::rendering::BoundingPolygon::points": {
          "access": "private",
          "full_type": "me2::rendering::BoundingPolygon::Polygon",
          "name": "points",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 259
          },
          "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
        }
      },
      "friends": null,
      "methods": {
        "me2::rendering::BoundingPolygon::BoundingPolygon(const class me2::rendering::BoundingPolygon &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BoundingPolygon",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 225
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingPolygon::BoundingPolygon(const me2::rendering::BoundingPolygon::Polygon &)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "BoundingPolygon",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 235
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingPolygon::GetPolygon(void) const -> const me2::rendering::BoundingPolygon::Polygon &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPolygon",
          "ret_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 245
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingPolygon::operator=(const class me2::rendering::BoundingPolygon &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::BoundingPolygon",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
                "line": 225
              },
              "type": "me2::rendering::BoundingPolygon"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::BoundingPolygon",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 225
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::BoundingPolygon::~BoundingPolygon(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~BoundingPolygon",
          "ret_type": "void",
          "src_info": {
            "col": 3,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
            "line": 236
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "BoundingPolygon",
      "namespace": "me2::rendering::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/rendering/bounding_area.hpp",
        "line": 225
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test::ClearBitmap_Ensures_that_all_pixels_are_colored_Test(class me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ClearBitmap_Ensures_that_all_pixels_are_colored_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
            "line": 6
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test::ClearBitmap_Ensures_that_all_pixels_are_colored_Test(const class me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ClearBitmap_Ensures_that_all_pixels_are_colored_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
            "line": 6
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test::ClearBitmap_Ensures_that_all_pixels_are_colored_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ClearBitmap_Ensures_that_all_pixels_are_colored_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
            "line": 6
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 4,
          "definitions": {
            "bmp": {
              "full_type": "std::unique_ptr<ALLEGRO_BITMAP,BitmapDeleter>::unique_ptr",
              "name": "bmp",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
                "line": 8
              },
              "type": "std::unique_ptr<ALLEGRO_BITMAP,BitmapDeleter>::unique_ptr"
            },
            "color": {
              "full_type": "ALLEGRO_COLOR",
              "name": "color",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
                "line": 7
              },
              "type": "ALLEGRO_COLOR"
            },
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
                "line": 12
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 9,
          "literals": 12,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
            "line": 6
          },
          "statements": 5,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test::operator=(class me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
                "line": 6
              },
              "type": "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
            "line": 6
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test::operator=(const class me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
                "line": 6
              },
              "type": "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
            "line": 6
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::ClearBitmap_Ensures_that_all_pixels_are_colored_Test::~ClearBitmap_Ensures_that_all_pixels_are_colored_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~ClearBitmap_Ensures_that_all_pixels_are_colored_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
            "line": 6
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "ClearBitmap_Ensures_that_all_pixels_are_colored_Test",
      "namespace": "me2::rendering::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/rendering/bitmap_tests.cpp",
        "line": 6
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 8
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 2,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 7
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test::Two_points_are_equal_When_both_coordinates_match_Test(class me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_points_are_equal_When_both_coordinates_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test::Two_points_are_equal_When_both_coordinates_match_Test(const class me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_points_are_equal_When_both_coordinates_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test::Two_points_are_equal_When_both_coordinates_match_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_points_are_equal_When_both_coordinates_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test::operator=(class me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 7
              },
              "type": "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test::operator=(const class me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 7
              },
              "type": "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_equal_When_both_coordinates_match_Test::~Two_points_are_equal_When_both_coordinates_match_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Two_points_are_equal_When_both_coordinates_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Two_points_are_equal_When_both_coordinates_match_Test",
      "namespace": "me2::rendering::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
        "line": 7
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 9,
          "definitions": {
            "gtest_ar": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 12
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 4,
          "literals": 30,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 11
          },
          "statements": 3,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test(class me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test(const class me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test::operator=(class me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 11
              },
              "type": "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test::operator=(const class me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 11
              },
              "type": "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test::~Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Two_points_are_unequal_When_any_of_the_coordinates_doesnt_match_Test",
      "namespace": "me2::rendering::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 28
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 2,
          "literals": 14,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test::Two_rects_are_equal_When_both_sizes_and_positions_match_Test(class me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_rects_are_equal_When_both_sizes_and_positions_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 27
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test::Two_rects_are_equal_When_both_sizes_and_positions_match_Test(const class me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_rects_are_equal_When_both_sizes_and_positions_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 27
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test::Two_rects_are_equal_When_both_sizes_and_positions_match_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_rects_are_equal_When_both_sizes_and_positions_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 27
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test::operator=(class me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 27
              },
              "type": "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 27
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test::operator=(const class me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 27
              },
              "type": "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 27
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_equal_When_both_sizes_and_positions_match_Test::~Two_rects_are_equal_When_both_sizes_and_positions_match_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Two_rects_are_equal_When_both_sizes_and_positions_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 27
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Two_rects_are_equal_When_both_sizes_and_positions_match_Test",
      "namespace": "me2::rendering::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
        "line": 27
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 9,
          "definitions": {
            "gtest_ar": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 32
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 4,
          "literals": 42,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 31
          },
          "statements": 3,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test(class me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test(const class me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test::operator=(class me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 31
              },
              "type": "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test::operator=(const class me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 31
              },
              "type": "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test::~Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 31
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Two_rects_are_unequal_When_any_of_the_sizes_or_positions_doesnt_match_Test",
      "namespace": "me2::rendering::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
        "line": 31
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 18
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 2,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 17
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test::Two_sizes_are_equal_When_both_dims_match_Test(class me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_sizes_are_equal_When_both_dims_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test::Two_sizes_are_equal_When_both_dims_match_Test(const class me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_sizes_are_equal_When_both_dims_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test::Two_sizes_are_equal_When_both_dims_match_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_sizes_are_equal_When_both_dims_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test::operator=(class me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 17
              },
              "type": "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test::operator=(const class me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 17
              },
              "type": "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_equal_When_both_dims_match_Test::~Two_sizes_are_equal_When_both_dims_match_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Two_sizes_are_equal_When_both_dims_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Two_sizes_are_equal_When_both_dims_match_Test",
      "namespace": "me2::rendering::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
        "line": 17
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 9,
          "definitions": {
            "gtest_ar": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 22
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 4,
          "literals": 30,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 21
          },
          "statements": 3,
          "template_args": null,
          "virtual": true
        },
        "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test(class me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test(const class me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test::operator=(class me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 21
              },
              "type": "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test::operator=(const class me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
                "line": 21
              },
              "type": "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::rendering::tests::Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test::~Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
            "line": 21
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "Two_sizes_are_unequal_When_any_of_the_dims_doesnt_match_Test",
      "namespace": "me2::rendering::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/rendering/resolution_tests.cpp",
        "line": 21
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::resources::ResourceFactory": {
      "bases": null,
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::resources::ResourceFactory::operator()(const Tag &) const noexcept(std::is_nothrow_constructible<Resource, Tag>::value)": {
          "access": "public",
          "args": {
            "tag": {
              "full_type": "const Tag &",
              "name": "tag",
              "src_info": {
                "col": 40,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_factory.hpp",
                "line": 25
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator()",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_factory.hpp",
            "line": 25
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "ResourceFactory",
      "namespace": "me2::resources::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_factory.hpp",
        "line": 17
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::resources::ResourcePool": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::resources::ResourcePool::factory": {
          "access": "private",
          "full_type": "FactoryFunc",
          "name": "factory",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_pool.hpp",
            "line": 54
          },
          "type": null
        },
        "me2::resources::ResourcePool::pool": {
          "access": "private",
          "full_type": "me2::resources::ResourcePool::Pool",
          "name": "pool",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_pool.hpp",
            "line": 55
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::resources::ResourcePool::Get(const Tag &) -> Resource &": {
          "access": "public",
          "args": {
            "tag": {
              "full_type": "const Tag &",
              "name": "tag",
              "src_info": {
                "col": 23,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_pool.hpp",
                "line": 47
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Get",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_pool.hpp",
            "line": 47
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::ResourcePool::Get(const Tag &) const -> const Resource &": {
          "access": "public",
          "args": {
            "tag": {
              "full_type": "const Tag &",
              "name": "tag",
              "src_info": {
                "col": 23,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_pool.hpp",
                "line": 35
              },
              "type": null
            }
          },
          "branches": 3,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Get",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_pool.hpp",
            "line": 35
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "ResourcePool",
      "namespace": "me2::resources::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_pool.hpp",
        "line": 26
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::resources::ResourceRegistry": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::resources::ResourceRegistry::factory": {
          "access": "private",
          "full_type": "FactoryFunc",
          "name": "factory",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
            "line": 77
          },
          "type": null
        },
        "me2::resources::ResourceRegistry::registry": {
          "access": "private",
          "full_type": "me2::resources::ResourceRegistry::Registry",
          "name": "registry",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
            "line": 78
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::resources::ResourceRegistry::Get(const Tag &) -> Resource &": {
          "access": "public",
          "args": {
            "tag": {
              "full_type": "const Tag &",
              "name": "tag",
              "src_info": {
                "col": 23,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
                "line": 59
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Get",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
            "line": 59
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::ResourceRegistry::Get(const Tag &) const -> const Resource &": {
          "access": "public",
          "args": {
            "tag": {
              "full_type": "const Tag &",
              "name": "tag",
              "src_info": {
                "col": 23,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
                "line": 46
              },
              "type": null
            }
          },
          "branches": 3,
          "definitions": null,
          "lines": 4,
          "literals": 8,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Get",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
            "line": 46
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::ResourceRegistry::IsRegistered(const Tag &) const -> _Bool": {
          "access": "public",
          "args": {
            "tag": {
              "full_type": "const Tag &",
              "name": "tag",
              "src_info": {
                "col": 32,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
                "line": 35
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsRegistered",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
            "line": 35
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::ResourceRegistry::Register(const Tag &)": {
          "access": "public",
          "args": {
            "tag": {
              "full_type": "const Tag &",
              "name": "tag",
              "src_info": {
                "col": 28,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
                "line": 68
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 8,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Register",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
            "line": 68
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "ResourceRegistry",
      "namespace": "me2::resources::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/resources/resource_registry.hpp",
        "line": 26
      },
      "structure_type": "TemplateDefinition",
      "template_args": null,
      "template_parent": null
    },
    "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test::IsPathValid_Returns_false_given_an_invalid_path_Test(class me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "IsPathValid_Returns_false_given_an_invalid_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test::IsPathValid_Returns_false_given_an_invalid_path_Test(const class me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "IsPathValid_Returns_false_given_an_invalid_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test::IsPathValid_Returns_false_given_an_invalid_path_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "IsPathValid_Returns_false_given_an_invalid_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 12
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 2,
          "literals": 8,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 11
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test::operator=(class me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 11
              },
              "type": "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test::operator=(const class me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 11
              },
              "type": "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_false_given_an_invalid_path_Test::~IsPathValid_Returns_false_given_an_invalid_path_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~IsPathValid_Returns_false_given_an_invalid_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "IsPathValid_Returns_false_given_an_invalid_path_Test",
      "namespace": "me2::resources::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test::IsPathValid_Returns_true_given_a_valid_path_Test(class me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "IsPathValid_Returns_true_given_a_valid_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test::IsPathValid_Returns_true_given_a_valid_path_Test(const class me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "IsPathValid_Returns_true_given_a_valid_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test::IsPathValid_Returns_true_given_a_valid_path_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "IsPathValid_Returns_true_given_a_valid_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 8
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 2,
          "literals": 8,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 7
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test::operator=(class me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 7
              },
              "type": "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test::operator=(const class me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 7
              },
              "type": "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::IsPathValid_Returns_true_given_a_valid_path_Test::~IsPathValid_Returns_true_given_a_valid_path_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~IsPathValid_Returns_true_given_a_valid_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 7
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "IsPathValid_Returns_true_given_a_valid_path_Test",
      "namespace": "me2::resources::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
        "line": 7
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test(class me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test(const class me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "expected_indices": {
              "full_type": "std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector",
              "name": "expected_indices",
              "src_info": {
                "col": 39,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
                "line": 9
              },
              "type": "std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector"
            },
            "gtest_ar": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
                "line": 17
              },
              "type": "testing::AssertionResult"
            },
            "test_sample_path": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "test_sample_path",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
                "line": 15
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            },
            "test_sample_rel_path": {
              "full_type": "const char *const",
              "name": "test_sample_rel_path",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
                "line": 14
              },
              "type": null
            }
          },
          "lines": 10,
          "literals": 28,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
            "line": 8
          },
          "statements": 4,
          "template_args": null,
          "virtual": true
        },
        "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test::operator=(class me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
                "line": 8
              },
              "type": "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test::operator=(const class me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
                "line": 8
              },
              "type": "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test::~ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
            "line": 8
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "ReadTextMap_Returns_expected_vector_after_parsing_at_path_Test",
      "namespace": "me2::resources::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/resources/read_text_map_tests.cpp",
        "line": 8
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test(class me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test(const class me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 3,
          "definitions": {
            "gtest_ar": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 16
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 2,
          "literals": 9,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 15
          },
          "statements": 1,
          "template_args": null,
          "virtual": true
        },
        "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test::operator=(class me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 15
              },
              "type": "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test::operator=(const class me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 15
              },
              "type": "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test::~ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 15
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "ResolvePath_Prefixes_a_dot_and_a_slash_if_file_path_is_invalid_Test",
      "namespace": "me2::resources::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
        "line": 15
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test": {
      "bases": [
        "testing::Test"
      ],
      "contains": null,
      "fields": null,
      "friends": null,
      "methods": {
        "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test::ResolvePath_Works_in_respect_to_path_is_valid_Test(class me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test &&) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ResolvePath_Works_in_respect_to_path_is_valid_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test::ResolvePath_Works_in_respect_to_path_is_valid_Test(const class me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ResolvePath_Works_in_respect_to_path_is_valid_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test::ResolvePath_Works_in_respect_to_path_is_valid_Test(void) noexcept(false)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "ResolvePath_Works_in_respect_to_path_is_valid_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test::TestBody(void)": {
          "access": "private",
          "args": null,
          "branches": 9,
          "definitions": {
            "gtest_ar_": {
              "full_type": "testing::AssertionResult",
              "name": "gtest_ar_",
              "src_info": {
                "col": 3,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 20
              },
              "type": "testing::AssertionResult"
            }
          },
          "lines": 4,
          "literals": 27,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "TestBody",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 19
          },
          "statements": 3,
          "template_args": null,
          "virtual": true
        },
        "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test::operator=(class me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test &&) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 19
              },
              "type": "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test::operator=(const class me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test",
              "name": "",
              "src_info": {
                "col": 1,
                "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
                "line": 19
              },
              "type": "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::resources::tests::ResolvePath_Works_in_respect_to_path_is_valid_Test::~ResolvePath_Works_in_respect_to_path_is_valid_Test(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~ResolvePath_Works_in_respect_to_path_is_valid_Test",
          "ret_type": "void",
          "src_info": {
            "col": 1,
            "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": true
        }
      },
      "name": "ResolvePath_Works_in_respect_to_path_is_valid_Test",
      "namespace": "me2::resources::tests::",
      "nested_parent": null,
      "src_info": {
        "col": 1,
        "file": "/home/vkrs/Documents/projects/me2/tests/resources/resource_path_tests.cpp",
        "line": 19
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::terrain::CircularBackground": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::terrain::CircularBackground::bmp": {
          "access": "private",
          "full_type": "me2::terrain::CircularBackground::UniqueBitmapPtr",
          "name": "bmp",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 35
          },
          "type": "std::unique_ptr<ALLEGRO_BITMAP,BitmapDeleter>::unique_ptr"
        },
        "me2::terrain::CircularBackground::map": {
          "access": "private",
          "full_type": "me2::terrain::CircularBackground::TextMap",
          "name": "map",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 34
          },
          "type": "std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector"
        }
      },
      "friends": null,
      "methods": {
        "me2::terrain::CircularBackground::CircularBackground(class me2::terrain::CircularBackground &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "CircularBackground",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::CircularBackground(const class me2::terrain::CircularBackground &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "CircularBackground",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::CircularBackground(const me2::terrain::CircularBackground::TextMap &, class me2::terrain::Tileset &)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 5,
          "literals": 2,
          "loops": 2,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "CircularBackground",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
            "line": 7
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::Display(ALLEGRO_BITMAP &, const me2::terrain::CircularBackground::Rect &, const me2::terrain::CircularBackground::Point &) const": {
          "access": "public",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
                "line": 16
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            },
            "dest": {
              "full_type": "ALLEGRO_BITMAP",
              "name": "dest",
              "src_info": {
                "col": 50,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
                "line": 15
              },
              "type": "ALLEGRO_BITMAP"
            },
            "view_win": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "view_win",
              "src_info": {
                "col": 68,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
                "line": 15
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 1,
          "definitions": {
            "w1": {
              "full_type": "unsigned short const",
              "name": "w1",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
                "line": 19
              },
              "type": null
            },
            "w2": {
              "full_type": "const me2::terrain::CircularBackground::Dim",
              "name": "w2",
              "src_info": {
                "col": 15,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
                "line": 26
              },
              "type": null
            }
          },
          "lines": 14,
          "literals": 1,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "Display",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
            "line": 15
          },
          "statements": 6,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::GetIndex(int, int) const -> me2::terrain::CircularBackground::Index": {
          "access": "public",
          "args": {
            "col": {
              "full_type": "int",
              "name": "col",
              "src_info": {
                "col": 21,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
                "line": 21
              },
              "type": null
            },
            "row": {
              "full_type": "int",
              "name": "row",
              "src_info": {
                "col": 30,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
                "line": 21
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetIndex",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 21
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::GetPixelHeight(void) const -> me2::terrain::CircularBackground::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPixelHeight",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 25
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::GetPixelWidth(void) const -> me2::terrain::CircularBackground::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPixelWidth",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 24
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::GetTileHeight(void) const -> me2::terrain::CircularBackground::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileHeight",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::GetTileWidth(void) const -> me2::terrain::CircularBackground::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 1,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileWidth",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 22
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::Scroll(me2::terrain::CircularBackground::Rect &, int) const": {
          "access": "public",
          "args": {
            "dx": {
              "full_type": "int",
              "name": "dx",
              "src_info": {
                "col": 53,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
                "line": 32
              },
              "type": null
            },
            "view_win": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "view_win",
              "src_info": {
                "col": 39,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
                "line": 32
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 6,
          "literals": 1,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Scroll",
          "ret_type": "void",
          "src_info": {
            "col": 26,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/circular_background.cpp",
            "line": 32
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::operator=(class me2::terrain::CircularBackground &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::CircularBackground",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
                "line": 11
              },
              "type": "me2::terrain::CircularBackground"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::CircularBackground",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::operator=(const class me2::terrain::CircularBackground &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::CircularBackground",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
                "line": 11
              },
              "type": "me2::terrain::CircularBackground"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::CircularBackground",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::CircularBackground::~CircularBackground(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~CircularBackground",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
            "line": 11
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "CircularBackground",
      "namespace": "me2::terrain::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/circular_background.hpp",
        "line": 11
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::terrain::Displacement": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::terrain::Displacement::dx": {
          "access": "public",
          "full_type": "int",
          "name": "dx",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 6
          },
          "type": null
        },
        "me2::terrain::Displacement::dy": {
          "access": "public",
          "full_type": "int",
          "name": "dy",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 6
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::terrain::Displacement::Displacement(const struct me2::terrain::Displacement &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Displacement",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 5
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Displacement::Displacement(const struct me2::terrain::Displacement &) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Displacement",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 5
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Displacement::Displacement(struct me2::terrain::Displacement &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_Trivial",
          "name": "Displacement",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 5
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Displacement::Displacement(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Displacement",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 5
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Displacement::operator=(const struct me2::terrain::Displacement &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::Displacement",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
                "line": 5
              },
              "type": "me2::terrain::Displacement"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::terrain::Displacement",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 5
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Displacement::operator=(const struct me2::terrain::Displacement &) noexcept": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::Displacement",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
                "line": 5
              },
              "type": "me2::terrain::Displacement"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::terrain::Displacement",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 5
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Displacement::operator=(struct me2::terrain::Displacement &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::Displacement",
              "name": "",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
                "line": 5
              },
              "type": "me2::terrain::Displacement"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_Trivial",
          "name": "operator=",
          "ret_type": "me2::terrain::Displacement",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 5
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Displacement::~Displacement(void) noexcept": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_Trivial",
          "name": "~Displacement",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
            "line": 5
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "Displacement",
      "namespace": "me2::terrain::",
      "nested_parent": null,
      "src_info": {
        "col": 8,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/displacement.hpp",
        "line": 5
      },
      "structure_type": "Struct",
      "template_args": null,
      "template_parent": null
    },
    "me2::terrain::GridLayer": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::terrain::GridLayer::cached_res": {
          "access": "private",
          "full_type": "me2::terrain::GridLayer::Size",
          "name": "cached_res",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 129
          },
          "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
        },
        "me2::terrain::GridLayer::cached_win": {
          "access": "private",
          "full_type": "me2::terrain::GridLayer::Rect",
          "name": "cached_win",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 128
          },
          "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
        },
        "me2::terrain::GridLayer::dpy_buffer": {
          "access": "private",
          "full_type": "me2::terrain::GridLayer::UniqueBitmapPtr",
          "name": "dpy_buffer",
          "src_info": {
            "col": 27,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 127
          },
          "type": "std::unique_ptr<ALLEGRO_BITMAP,BitmapDeleter>::unique_ptr"
        },
        "me2::terrain::GridLayer::dpy_x": {
          "access": "private",
          "full_type": "int",
          "name": "dpy_x",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 126
          },
          "type": null
        },
        "me2::terrain::GridLayer::dpy_y": {
          "access": "private",
          "full_type": "int",
          "name": "dpy_y",
          "src_info": {
            "col": 25,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 126
          },
          "type": null
        },
        "me2::terrain::GridLayer::grid": {
          "access": "private",
          "full_type": "me2::terrain::GridLayer::Grid",
          "name": "grid",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 120
          },
          "type": "std::vector<int,std::allocator<int>>::vector"
        },
        "me2::terrain::GridLayer::resolution": {
          "access": "private",
          "full_type": "me2::terrain::GridLayer::Resolution",
          "name": "resolution",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 123
          },
          "type": "std::function<conststructme2::rendering::BasicSize<unsignedshort>&(void)>::function"
        },
        "me2::terrain::GridLayer::tile_size": {
          "access": "private",
          "full_type": "me2::terrain::GridLayer::Size",
          "name": "tile_size",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 121
          },
          "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
        },
        "me2::terrain::GridLayer::total": {
          "access": "private",
          "full_type": "me2::terrain::GridLayer::Dim",
          "name": "total",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 122
          },
          "type": null
        },
        "me2::terrain::GridLayer::visible": {
          "access": "private",
          "full_type": "_Bool",
          "name": "visible",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 124
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::terrain::GridLayer::CacheDisplayBuffer(void) const": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 10,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "CacheDisplayBuffer",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 32
          },
          "statements": 6,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::Display(ALLEGRO_BITMAP &, const me2::terrain::GridLayer::Rect &, const me2::terrain::GridLayer::Point &, const me2::terrain::GridLayer::Displayer &) const": {
          "access": "public",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 57
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            },
            "dest": {
              "full_type": "ALLEGRO_BITMAP",
              "name": "dest",
              "src_info": {
                "col": 41,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 56
              },
              "type": "ALLEGRO_BITMAP"
            },
            "display": {
              "full_type": "std::function<void(structALLEGRO_BITMAP&,conststructme2::rendering::BasicRect<int,unsignedshort>&)>::function",
              "name": "display",
              "src_info": {
                "col": 59,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 57
              },
              "type": "std::function<void(structALLEGRO_BITMAP&,conststructme2::rendering::BasicRect<int,unsignedshort>&)>::function"
            },
            "view_win": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "view_win",
              "src_info": {
                "col": 59,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 56
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 12,
          "definitions": {
            "block_x": {
              "full_type": "const int",
              "name": "block_x",
              "src_info": {
                "col": 20,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 86
              },
              "type": null
            },
            "block_y": {
              "full_type": "const int",
              "name": "block_y",
              "src_info": {
                "col": 20,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 87
              },
              "type": null
            },
            "col_elem": {
              "full_type": "int",
              "name": "col_elem",
              "src_info": {
                "col": 21,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 91
              },
              "type": null
            },
            "end_col": {
              "full_type": "const int",
              "name": "end_col",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 75
              },
              "type": null
            },
            "end_row": {
              "full_type": "const int",
              "name": "end_row",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 76
              },
              "type": null
            },
            "grid_block": {
              "full_type": "const me2::terrain::GridLayer::Index *",
              "name": "grid_block",
              "src_info": {
                "col": 21,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 88
              },
              "type": null
            },
            "h": {
              "full_type": "const int",
              "name": "h",
              "src_info": {
                "col": 26,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 94
              },
              "type": null
            },
            "row_elem": {
              "full_type": "int",
              "name": "row_elem",
              "src_info": {
                "col": 19,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 90
              },
              "type": null
            },
            "start_col": {
              "full_type": "const int",
              "name": "start_col",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 73
              },
              "type": null
            },
            "start_row": {
              "full_type": "const int",
              "name": "start_row",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 74
              },
              "type": null
            },
            "tile_col": {
              "full_type": "int",
              "name": "tile_col",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 85
              },
              "type": null
            },
            "tile_row": {
              "full_type": "int",
              "name": "tile_row",
              "src_info": {
                "col": 15,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 84
              },
              "type": null
            },
            "w": {
              "full_type": "const int",
              "name": "w",
              "src_info": {
                "col": 26,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 93
              },
              "type": null
            },
            "x": {
              "full_type": "const int",
              "name": "x",
              "src_info": {
                "col": 26,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 95
              },
              "type": null
            },
            "y": {
              "full_type": "const int",
              "name": "y",
              "src_info": {
                "col": 26,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 96
              },
              "type": null
            }
          },
          "lines": 47,
          "literals": 44,
          "loops": 4,
          "max_scope": 5,
          "method_type": "UserMethod",
          "name": "Display",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 56
          },
          "statements": 32,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::FilterHorizMotion(const me2::terrain::GridLayer::Rect &, int &, me2::terrain::GridLayer::Points &) const": {
          "access": "protected",
          "args": {
            "crossed_tiles": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "crossed_tiles",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 116
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "dx": {
              "full_type": "int &",
              "name": "dx",
              "src_info": {
                "col": 55,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 115
              },
              "type": null
            },
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 115
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 5,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "FilterHorizMotion",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 115
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::FilterMotion(const me2::terrain::GridLayer::Rect &, struct me2::terrain::Displacement &, me2::terrain::GridLayer::Points &) const": {
          "access": "public",
          "args": {
            "crossed_tiles": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "crossed_tiles",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 107
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "ds": {
              "full_type": "me2::terrain::Displacement",
              "name": "ds",
              "src_info": {
                "col": 59,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 106
              },
              "type": "me2::terrain::Displacement"
            },
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 42,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 106
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 6,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "FilterMotion",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 106
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::FilterMotionDown(const me2::terrain::GridLayer::Rect &, int &, me2::terrain::GridLayer::Points &) const": {
          "access": "protected",
          "args": {
            "crossed_tiles": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "crossed_tiles",
              "src_info": {
                "col": 42,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 233
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "dy": {
              "full_type": "int &",
              "name": "dy",
              "src_info": {
                "col": 54,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 232
              },
              "type": null
            },
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 232
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 5,
          "definitions": {
            "col": {
              "full_type": "int",
              "name": "col",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 250
              },
              "type": null
            },
            "curr_row": {
              "full_type": "const int",
              "name": "curr_row",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 241
              },
              "type": null
            },
            "end_col": {
              "full_type": "const int",
              "name": "end_col",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 247
              },
              "type": null
            },
            "l": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "l",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 249
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "new_row": {
              "full_type": "const int",
              "name": "new_row",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 240
              },
              "type": null
            },
            "start_col": {
              "full_type": "const int",
              "name": "start_col",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 246
              },
              "type": null
            },
            "y": {
              "full_type": "const int",
              "name": "y",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 234
              },
              "type": null
            },
            "y_nxt": {
              "full_type": "const int",
              "name": "y_nxt",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 235
              },
              "type": null
            }
          },
          "lines": 33,
          "literals": 10,
          "loops": 1,
          "max_scope": 4,
          "method_type": "UserMethod",
          "name": "FilterMotionDown",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 232
          },
          "statements": 16,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::FilterMotionLeft(const me2::terrain::GridLayer::Rect &, int &, me2::terrain::GridLayer::Points &) const": {
          "access": "protected",
          "args": {
            "crossed_tiles": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "crossed_tiles",
              "src_info": {
                "col": 42,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 132
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "dx": {
              "full_type": "int &",
              "name": "dx",
              "src_info": {
                "col": 54,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 131
              },
              "type": null
            },
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 131
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 5,
          "definitions": {
            "curr_col": {
              "full_type": "const int",
              "name": "curr_col",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 139
              },
              "type": null
            },
            "end_row": {
              "full_type": "const int",
              "name": "end_row",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 145
              },
              "type": null
            },
            "l": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "l",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 147
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "new_col": {
              "full_type": "const int",
              "name": "new_col",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 138
              },
              "type": null
            },
            "row": {
              "full_type": "int",
              "name": "row",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 148
              },
              "type": null
            },
            "start_row": {
              "full_type": "const int",
              "name": "start_row",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 144
              },
              "type": null
            },
            "x_nxt": {
              "full_type": "const int",
              "name": "x_nxt",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 133
              },
              "type": null
            }
          },
          "lines": 30,
          "literals": 8,
          "loops": 1,
          "max_scope": 3,
          "method_type": "UserMethod",
          "name": "FilterMotionLeft",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 131
          },
          "statements": 14,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::FilterMotionRight(const me2::terrain::GridLayer::Rect &, int &, me2::terrain::GridLayer::Points &) const": {
          "access": "protected",
          "args": {
            "crossed_tiles": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "crossed_tiles",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 165
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "dx": {
              "full_type": "int &",
              "name": "dx",
              "src_info": {
                "col": 55,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 164
              },
              "type": null
            },
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 164
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 5,
          "definitions": {
            "curr_col": {
              "full_type": "const int",
              "name": "curr_col",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 173
              },
              "type": null
            },
            "end_row": {
              "full_type": "const int",
              "name": "end_row",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 179
              },
              "type": null
            },
            "l": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "l",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 181
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "new_col": {
              "full_type": "const int",
              "name": "new_col",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 172
              },
              "type": null
            },
            "row": {
              "full_type": "int",
              "name": "row",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 182
              },
              "type": null
            },
            "start_row": {
              "full_type": "const int",
              "name": "start_row",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 178
              },
              "type": null
            },
            "x": {
              "full_type": "const int",
              "name": "x",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 166
              },
              "type": null
            },
            "x_nxt": {
              "full_type": "const int",
              "name": "x_nxt",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 167
              },
              "type": null
            }
          },
          "lines": 31,
          "literals": 10,
          "loops": 1,
          "max_scope": 3,
          "method_type": "UserMethod",
          "name": "FilterMotionRight",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 164
          },
          "statements": 15,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::FilterMotionUp(const me2::terrain::GridLayer::Rect &, int &, me2::terrain::GridLayer::Points &) const": {
          "access": "protected",
          "args": {
            "crossed_tiles": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "crossed_tiles",
              "src_info": {
                "col": 40,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 199
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "dy": {
              "full_type": "int &",
              "name": "dy",
              "src_info": {
                "col": 52,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 198
              },
              "type": null
            },
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 44,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 198
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 5,
          "definitions": {
            "col": {
              "full_type": "int",
              "name": "col",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 215
              },
              "type": null
            },
            "cur_row": {
              "full_type": "const int",
              "name": "cur_row",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 206
              },
              "type": null
            },
            "end_col": {
              "full_type": "const int",
              "name": "end_col",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 212
              },
              "type": null
            },
            "l": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "l",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 214
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "new_row": {
              "full_type": "const int",
              "name": "new_row",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 205
              },
              "type": null
            },
            "nxt_y": {
              "full_type": "const int",
              "name": "nxt_y",
              "src_info": {
                "col": 14,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 200
              },
              "type": null
            },
            "start_col": {
              "full_type": "const int",
              "name": "start_col",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 211
              },
              "type": null
            }
          },
          "lines": 31,
          "literals": 8,
          "loops": 1,
          "max_scope": 3,
          "method_type": "UserMethod",
          "name": "FilterMotionUp",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 198
          },
          "statements": 14,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::FilterVertMotion(const me2::terrain::GridLayer::Rect &, int &, me2::terrain::GridLayer::Points &) const": {
          "access": "protected",
          "args": {
            "crossed_tiles": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "crossed_tiles",
              "src_info": {
                "col": 42,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 124
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            },
            "dy": {
              "full_type": "int &",
              "name": "dy",
              "src_info": {
                "col": 54,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 123
              },
              "type": null
            },
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 123
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 5,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "FilterVertMotion",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 123
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GetIndex(const me2::terrain::GridLayer::Point &) const -> me2::terrain::GridLayer::Index": {
          "access": "public",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 30,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
                "line": 87
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetIndex",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 87
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GetPixelHeight(void) const -> me2::terrain::GridLayer::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPixelHeight",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 91
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GetPixelWidth(void) const -> me2::terrain::GridLayer::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPixelWidth",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 90
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GetTileBlock(const me2::terrain::GridLayer::Point &) -> me2::terrain::GridLayer::Index *": {
          "access": "protected",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 44
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileBlock",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 44
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GetTileBlock(const me2::terrain::GridLayer::Point &) const -> const me2::terrain::GridLayer::Index *": {
          "access": "protected",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 48
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileBlock",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 48
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GetTileHeight(void) const -> me2::terrain::GridLayer::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileHeight",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 89
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GetTileWidth(void) const -> me2::terrain::GridLayer::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileWidth",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 88
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GridLayer(class me2::terrain::GridLayer &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "GridLayer",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 71
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GridLayer(const class me2::terrain::GridLayer &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "GridLayer",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 71
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::GridLayer(const me2::terrain::GridLayer::Size &, const me2::terrain::GridLayer::Resolution &, _Bool)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 3,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "GridLayer",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 23
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::IsOnSolidGround(const class GridLayer::Rect &) const -> _Bool": {
          "access": "public",
          "args": {
            "r": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "r",
              "src_info": {
                "col": 56,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 268
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 1,
          "definitions": {
            "dy": {
              "full_type": "int",
              "name": "dy",
              "src_info": {
                "col": 8,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 269
              },
              "type": null
            },
            "points": {
              "full_type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list",
              "name": "points",
              "src_info": {
                "col": 10,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 270
              },
              "type": "std::list<me2::rendering::BasicPoint<int>,std::allocator<me2::rendering::BasicPoint<int>>>::list"
            }
          },
          "lines": 5,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsOnSolidGround",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 268
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::IsVisible(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsVisible",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 84
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::SetTileBlockFlags(const me2::terrain::GridLayer::Point &, me2::terrain::GridLayer::Index)": {
          "access": "public",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 48,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 52
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            },
            "flags": {
              "full_type": "me2::terrain::GridLayer::Index",
              "name": "flags",
              "src_info": {
                "col": 58,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
                "line": 52
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetTileBlockFlags",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/grid_layer.cpp",
            "line": 52
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::SetVisibility(_Bool)": {
          "access": "public",
          "args": {
            "v": {
              "full_type": "_Bool",
              "name": "v",
              "src_info": {
                "col": 27,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
                "line": 85
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetVisibility",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 85
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::operator=(class me2::terrain::GridLayer &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::GridLayer",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
                "line": 71
              },
              "type": "me2::terrain::GridLayer"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::GridLayer",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 71
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::operator=(const class me2::terrain::GridLayer &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::GridLayer",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
                "line": 71
              },
              "type": "me2::terrain::GridLayer"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::GridLayer",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 71
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::GridLayer::~GridLayer(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~GridLayer",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
            "line": 71
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "GridLayer",
      "namespace": "me2::terrain::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/grid_layer.hpp",
        "line": 71
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::terrain::TileActions": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::terrain::TileActions::actions": {
          "access": "private",
          "full_type": "me2::terrain::TileActions::Actions",
          "name": "actions",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
            "line": 38
          },
          "type": "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::function<void(conststructme2::rendering::BasicPoint<int>&)>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::function<void(conststructme2::rendering::BasicPoint<int>&)>>>>::map"
        },
        "me2::terrain::TileActions::enumerator": {
          "access": "private",
          "full_type": "me2::terrain::TileActions::Enumerator",
          "name": "enumerator",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
            "line": 40
          },
          "type": "std::function<unsignedint(conststructme2::rendering::BasicPoint<int>&)>::function"
        },
        "me2::terrain::TileActions::tags": {
          "access": "private",
          "full_type": "me2::terrain::TileActions::Tags",
          "name": "tags",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
            "line": 39
          },
          "type": "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>>>>::map"
        }
      },
      "friends": null,
      "methods": {
        "me2::terrain::TileActions::Install(const std::string &, const me2::terrain::TileActions::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(conststructme2::rendering::BasicPoint<int>&)>::function",
              "name": "f",
              "src_info": {
                "col": 65,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 9
              },
              "type": "std::function<void(conststructme2::rendering::BasicPoint<int>&)>::function"
            },
            "tag": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "tag",
              "src_info": {
                "col": 46,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 9
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Install",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
            "line": 9
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileActions::SetTag(const me2::terrain::TileActions::Point &, const std::string &)": {
          "access": "public",
          "args": {
            "tag": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "tag",
              "src_info": {
                "col": 64,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 15
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            },
            "tile": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "tile",
              "src_info": {
                "col": 39,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 15
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetTag",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
            "line": 15
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileActions::TileActions(class me2::terrain::TileActions &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TileActions",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileActions::TileActions(const class me2::terrain::TileActions &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TileActions",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileActions::TileActions(const me2::terrain::TileActions::Enumerator &)": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TileActions",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
            "line": 26
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileActions::Trigger(const me2::terrain::TileActions::Point &)": {
          "access": "public",
          "args": {
            "tile": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "tile",
              "src_info": {
                "col": 40,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 21
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 4,
          "definitions": {
            "__begin2": {
              "full_type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>>>::_Rb_tree_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 24,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 24
              },
              "type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>>>::_Rb_tree_iterator"
            },
            "__end2": {
              "full_type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>>>::_Rb_tree_iterator",
              "name": "__end2",
              "src_info": {
                "col": 24,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 24
              },
              "type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>>>::_Rb_tree_iterator"
            },
            "__range2": {
              "full_type": "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>>>>::map",
              "name": "__range2",
              "src_info": {
                "col": 26,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 24
              },
              "type": "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>>>>::map"
            },
            "is_tile_tagged": {
              "full_type": "const _Bool",
              "name": "is_tile_tagged",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 25
              },
              "type": null
            },
            "j": {
              "full_type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::function<void(conststructme2::rendering::BasicPoint<int>&)>>>::_Rb_tree_iterator",
              "name": "j",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 28
              },
              "type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::function<void(conststructme2::rendering::BasicPoint<int>&)>>>::_Rb_tree_iterator"
            },
            "tag": {
              "full_type": "std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>>::pair",
              "name": "tag",
              "src_info": {
                "col": 20,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
                "line": 24
              },
              "type": "std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>>::pair"
            }
          },
          "lines": 12,
          "literals": 5,
          "loops": 0,
          "max_scope": 2,
          "method_type": "UserMethod",
          "name": "Trigger",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_actions.cpp",
            "line": 21
          },
          "statements": 7,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileActions::operator=(class me2::terrain::TileActions &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::TileActions",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
                "line": 19
              },
              "type": "me2::terrain::TileActions"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::TileActions",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileActions::operator=(const class me2::terrain::TileActions &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::TileActions",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
                "line": 19
              },
              "type": "me2::terrain::TileActions"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::TileActions",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileActions::~TileActions(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~TileActions",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
            "line": 19
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "TileActions",
      "namespace": "me2::terrain::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_actions.hpp",
        "line": 19
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::terrain::TileColorsHolder": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::terrain::TileColorsHolder::colors": {
          "access": "private",
          "full_type": "std::set<ColorEnum>",
          "name": "colors",
          "src_info": {
            "col": 23,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 35
          },
          "type": "std::set<unsignedint,std::less<unsignedint>,std::allocator<unsignedint>>::set"
        },
        "me2::terrain::TileColorsHolder::enumerator": {
          "access": "private",
          "full_type": "me2::terrain::TileColorsHolder::Enumerator",
          "name": "enumerator",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 33
          },
          "type": "std::function<unsignedint(conststructALLEGRO_COLOR&)>::function"
        },
        "me2::terrain::TileColorsHolder::indices": {
          "access": "private",
          "full_type": "std::set<Index>",
          "name": "indices",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 34
          },
          "type": "std::set<int,std::less<int>,std::allocator<int>>::set"
        }
      },
      "friends": null,
      "methods": {
        "me2::terrain::TileColorsHolder::Contains(const ALLEGRO_COLOR &) const -> _Bool": {
          "access": "public",
          "args": {
            "c": {
              "full_type": "ALLEGRO_COLOR",
              "name": "c",
              "src_info": {
                "col": 54,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.cpp",
                "line": 8
              },
              "type": "ALLEGRO_COLOR"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Contains",
          "ret_type": "void",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.cpp",
            "line": 8
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileColorsHolder::Insert(ALLEGRO_BITMAP &, me2::terrain::TileColorsHolder::Index)": {
          "access": "public",
          "args": {
            "bmp": {
              "full_type": "ALLEGRO_BITMAP",
              "name": "bmp",
              "src_info": {
                "col": 47,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.cpp",
                "line": 12
              },
              "type": "ALLEGRO_BITMAP"
            },
            "index": {
              "full_type": "me2::terrain::TileColorsHolder::Index",
              "name": "index",
              "src_info": {
                "col": 58,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.cpp",
                "line": 12
              },
              "type": null
            }
          },
          "branches": 4,
          "definitions": null,
          "lines": 14,
          "literals": 5,
          "loops": 0,
          "max_scope": 1,
          "method_type": "UserMethod",
          "name": "Insert",
          "ret_type": "void",
          "src_info": {
            "col": 24,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.cpp",
            "line": 12
          },
          "statements": 7,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileColorsHolder::TileColorsHolder(class me2::terrain::TileColorsHolder &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TileColorsHolder",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileColorsHolder::TileColorsHolder(const class me2::terrain::TileColorsHolder &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TileColorsHolder",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileColorsHolder::TileColorsHolder(const me2::terrain::TileColorsHolder::Enumerator &)": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TileColorsHolder",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileColorsHolder::operator=(class me2::terrain::TileColorsHolder &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::TileColorsHolder",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
                "line": 17
              },
              "type": "me2::terrain::TileColorsHolder"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::TileColorsHolder",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileColorsHolder::operator=(const class me2::terrain::TileColorsHolder &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::TileColorsHolder",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
                "line": 17
              },
              "type": "me2::terrain::TileColorsHolder"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::TileColorsHolder",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileColorsHolder::~TileColorsHolder(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~TileColorsHolder",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileColorsHolder::~TileColorsHolder(void) noexcept": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~TileColorsHolder",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "TileColorsHolder",
      "namespace": "me2::terrain::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_colors_holder.hpp",
        "line": 17
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::terrain::TileLayer": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::terrain::TileLayer::cached_res": {
          "access": "private",
          "full_type": "me2::terrain::TileLayer::Size",
          "name": "cached_res",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 62
          },
          "type": "me2::rendering::BasicSize<unsignedshort>::BasicSize"
        },
        "me2::terrain::TileLayer::cached_win": {
          "access": "private",
          "full_type": "me2::terrain::TileLayer::Rect",
          "name": "cached_win",
          "src_info": {
            "col": 16,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 61
          },
          "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
        },
        "me2::terrain::TileLayer::dpy_buffer": {
          "access": "private",
          "full_type": "me2::terrain::TileLayer::UniqueBitmapPtr",
          "name": "dpy_buffer",
          "src_info": {
            "col": 27,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 60
          },
          "type": "std::unique_ptr<ALLEGRO_BITMAP,BitmapDeleter>::unique_ptr"
        },
        "me2::terrain::TileLayer::dpy_x": {
          "access": "private",
          "full_type": "int",
          "name": "dpy_x",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 59
          },
          "type": null
        },
        "me2::terrain::TileLayer::dpy_y": {
          "access": "private",
          "full_type": "int",
          "name": "dpy_y",
          "src_info": {
            "col": 25,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 59
          },
          "type": null
        },
        "me2::terrain::TileLayer::map": {
          "access": "private",
          "full_type": "me2::terrain::TileLayer::TextMap",
          "name": "map",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 55
          },
          "type": "std::vector<std::vector<int,std::allocator<int>>,std::allocator<std::vector<int,std::allocator<int>>>>::vector"
        },
        "me2::terrain::TileLayer::res": {
          "access": "private",
          "full_type": "me2::terrain::TileLayer::Resolution",
          "name": "res",
          "src_info": {
            "col": 14,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 57
          },
          "type": "std::function<conststructme2::rendering::BasicSize<unsignedshort>&(void)>::function"
        },
        "me2::terrain::TileLayer::tileset": {
          "access": "private",
          "full_type": "class me2::terrain::Tileset *",
          "name": "tileset",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 56
          },
          "type": "me2::terrain::Tileset"
        }
      },
      "friends": null,
      "methods": {
        "me2::terrain::TileLayer::CacheDisplayBuffer(void) const": {
          "access": "private",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 10,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "CacheDisplayBuffer",
          "ret_type": "void",
          "src_info": {
            "col": 18,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
            "line": 18
          },
          "statements": 6,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::CanScrollHoriz(const me2::terrain::TileLayer::Rect &, int) const -> _Bool": {
          "access": "public",
          "args": {
            "dx": {
              "full_type": "int",
              "name": "dx",
              "src_info": {
                "col": 58,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 39
              },
              "type": null
            },
            "view_win": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "view_win",
              "src_info": {
                "col": 44,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 39
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "CanScrollHoriz",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
            "line": 39
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::CanScrollVert(const me2::terrain::TileLayer::Rect &, int) const -> _Bool": {
          "access": "public",
          "args": {
            "dy": {
              "full_type": "int",
              "name": "dy",
              "src_info": {
                "col": 57,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 43
              },
              "type": null
            },
            "view_win": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "view_win",
              "src_info": {
                "col": 43,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 43
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "CanScrollVert",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
            "line": 43
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::Display(ALLEGRO_BITMAP &, const me2::terrain::TileLayer::Rect &, const me2::terrain::TileLayer::Point &) const": {
          "access": "public",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 38,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 77
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            },
            "dest": {
              "full_type": "ALLEGRO_BITMAP",
              "name": "dest",
              "src_info": {
                "col": 41,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 76
              },
              "type": "ALLEGRO_BITMAP"
            },
            "view_win": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "view_win",
              "src_info": {
                "col": 59,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 76
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 8,
          "definitions": {
            "col": {
              "full_type": "int",
              "name": "col",
              "src_info": {
                "col": 17,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 103
              },
              "type": null
            },
            "end_col": {
              "full_type": "const int",
              "name": "end_col",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 93
              },
              "type": null
            },
            "end_row": {
              "full_type": "const int",
              "name": "end_row",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 94
              },
              "type": null
            },
            "row": {
              "full_type": "int",
              "name": "row",
              "src_info": {
                "col": 15,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 102
              },
              "type": null
            },
            "start_col": {
              "full_type": "const int",
              "name": "start_col",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 91
              },
              "type": null
            },
            "start_row": {
              "full_type": "const int",
              "name": "start_row",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 92
              },
              "type": null
            }
          },
          "lines": 34,
          "literals": 35,
          "loops": 2,
          "max_scope": 3,
          "method_type": "UserMethod",
          "name": "Display",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
            "line": 76
          },
          "statements": 21,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::GetIndex(const me2::terrain::TileLayer::Point &) const -> me2::terrain::TileLayer::Index": {
          "access": "public",
          "args": {
            "p": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "p",
              "src_info": {
                "col": 30,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
                "line": 34
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetIndex",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 34
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::GetPixelHeight(void) const -> me2::terrain::TileLayer::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPixelHeight",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 38
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::GetPixelWidth(void) const -> me2::terrain::TileLayer::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetPixelWidth",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 37
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::GetTileHeight(void) const -> me2::terrain::TileLayer::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileHeight",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 36
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::GetTileWidth(void) const -> me2::terrain::TileLayer::Dim": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 1,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileWidth",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 35
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::GetTileset(void) -> class me2::terrain::Tileset &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileset",
          "ret_type": "me2::terrain::Tileset",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 40
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::GetTileset(void) const -> const class me2::terrain::Tileset &": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetTileset",
          "ret_type": "me2::terrain::Tileset",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 39
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::Scroll(me2::terrain::TileLayer::Rect &, struct me2::terrain::Displacement) const": {
          "access": "public",
          "args": {
            "ds": {
              "full_type": "me2::terrain::Displacement",
              "name": "ds",
              "src_info": {
                "col": 53,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 70
              },
              "type": "me2::terrain::Displacement"
            },
            "view_win": {
              "full_type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect",
              "name": "view_win",
              "src_info": {
                "col": 30,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
                "line": 70
              },
              "type": "me2::rendering::BasicRect<int,unsignedshort>::BasicRect"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 4,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Scroll",
          "ret_type": "void",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
            "line": 70
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::SetRes(const me2::terrain::TileLayer::Resolution &)": {
          "access": "public",
          "args": {
            "_res": {
              "full_type": "std::function<conststructme2::rendering::BasicSize<unsignedshort>&(void)>::function",
              "name": "_res",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
                "line": 29
              },
              "type": "std::function<conststructme2::rendering::BasicSize<unsignedshort>&(void)>::function"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetRes",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 29
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::TileLayer(class me2::terrain::TileLayer &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TileLayer",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::TileLayer(const class me2::terrain::TileLayer &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TileLayer",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::TileLayer(const me2::terrain::TileLayer::TextMap &, class me2::terrain::Tileset &, const me2::terrain::TileLayer::Resolution &)": {
          "access": "public",
          "args": null,
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TileLayer",
          "ret_type": "void",
          "src_info": {
            "col": 12,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tile_layer.cpp",
            "line": 10
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::operator=(class me2::terrain::TileLayer &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::TileLayer",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
                "line": 17
              },
              "type": "me2::terrain::TileLayer"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::TileLayer",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::operator=(const class me2::terrain::TileLayer &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::TileLayer",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
                "line": 17
              },
              "type": "me2::terrain::TileLayer"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::TileLayer",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TileLayer::~TileLayer(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~TileLayer",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
            "line": 17
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "TileLayer",
      "namespace": "me2::terrain::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tile_layer.hpp",
        "line": 17
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::terrain::Tileset": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::terrain::Tileset::bmp": {
          "access": "private",
          "full_type": "ALLEGRO_BITMAP *",
          "name": "bmp",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
            "line": 32
          },
          "type": "ALLEGRO_BITMAP"
        },
        "me2::terrain::Tileset::flags": {
          "access": "private",
          "full_type": "me2::terrain::Tileset::SolidityFlags",
          "name": "flags",
          "src_info": {
            "col": 17,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
            "line": 33
          },
          "type": "std::vector<int,std::allocator<int>>::vector"
        }
      },
      "friends": null,
      "methods": {
        "me2::terrain::Tileset::GetSolidity(me2::terrain::Tileset::Index) const -> me2::terrain::Tileset::Solidity": {
          "access": "public",
          "args": {
            "index": {
              "full_type": "me2::terrain::Tileset::Index",
              "name": "index",
              "src_info": {
                "col": 33,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
                "line": 31
              },
              "type": null
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "GetSolidity",
          "ret_type": "void",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
            "line": 31
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Tileset::IsFlagged(me2::terrain::Tileset::Index) const -> _Bool": {
          "access": "public",
          "args": {
            "index": {
              "full_type": "me2::terrain::Tileset::Index",
              "name": "index",
              "src_info": {
                "col": 31,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
                "line": 27
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 2,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "IsFlagged",
          "ret_type": "void",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
            "line": 27
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Tileset::PutTile(ALLEGRO_BITMAP &, me2::terrain::Tileset::Index, const me2::terrain::Tileset::Point &)": {
          "access": "public",
          "args": {
            "at": {
              "full_type": "me2::rendering::BasicPoint<int>::BasicPoint",
              "name": "at",
              "src_info": {
                "col": 70,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
                "line": 36
              },
              "type": "me2::rendering::BasicPoint<int>::BasicPoint"
            },
            "dest": {
              "full_type": "ALLEGRO_BITMAP",
              "name": "dest",
              "src_info": {
                "col": 39,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
                "line": 36
              },
              "type": "ALLEGRO_BITMAP"
            },
            "tile": {
              "full_type": "me2::terrain::Tileset::Index",
              "name": "tile",
              "src_info": {
                "col": 51,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
                "line": 36
              },
              "type": null
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 5,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "PutTile",
          "ret_type": "void",
          "src_info": {
            "col": 15,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
            "line": 36
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Tileset::Tileset(ALLEGRO_BITMAP &, const me2::terrain::Tileset::SolidityFlags &)": {
          "access": "public",
          "args": null,
          "branches": 4,
          "definitions": null,
          "lines": 5,
          "literals": 20,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Tileset",
          "ret_type": "void",
          "src_info": {
            "col": 10,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset.cpp",
            "line": 19
          },
          "statements": 4,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Tileset::Tileset(class me2::terrain::Tileset &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Tileset",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Tileset::Tileset(const class me2::terrain::Tileset &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "Tileset",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Tileset::operator=(class me2::terrain::Tileset &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::Tileset",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
                "line": 16
              },
              "type": "me2::terrain::Tileset"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::Tileset",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Tileset::operator=(const class me2::terrain::Tileset &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::Tileset",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
                "line": 16
              },
              "type": "me2::terrain::Tileset"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::Tileset",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::Tileset::~Tileset(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~Tileset",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
            "line": 16
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "Tileset",
      "namespace": "me2::terrain::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset.hpp",
        "line": 16
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::terrain::TilesetActions": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::terrain::TilesetActions::actions": {
          "access": "private",
          "full_type": "me2::terrain::TilesetActions::Actions",
          "name": "actions",
          "src_info": {
            "col": 11,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
            "line": 26
          },
          "type": "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::function<void(int)>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::function<void(int)>>>>::map"
        },
        "me2::terrain::TilesetActions::tags": {
          "access": "private",
          "full_type": "me2::terrain::TilesetActions::Tags",
          "name": "tags",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
            "line": 27
          },
          "type": "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>>>>::map"
        }
      },
      "friends": null,
      "methods": {
        "me2::terrain::TilesetActions::Install(const std::string &, const me2::terrain::TilesetActions::Action &)": {
          "access": "public",
          "args": {
            "f": {
              "full_type": "std::function<void(int)>::function",
              "name": "f",
              "src_info": {
                "col": 68,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 7
              },
              "type": "std::function<void(int)>::function"
            },
            "tag": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "tag",
              "src_info": {
                "col": 49,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 7
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 2,
          "definitions": null,
          "lines": 4,
          "literals": 10,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Install",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
            "line": 7
          },
          "statements": 3,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TilesetActions::SetTag(me2::terrain::TilesetActions::Index, const std::string &)": {
          "access": "public",
          "args": {
            "index": {
              "full_type": "me2::terrain::TilesetActions::Index",
              "name": "index",
              "src_info": {
                "col": 35,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 13
              },
              "type": null
            },
            "tag": {
              "full_type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string",
              "name": "tag",
              "src_info": {
                "col": 61,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 13
              },
              "type": "std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string"
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 3,
          "literals": 5,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "SetTag",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
            "line": 13
          },
          "statements": 2,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TilesetActions::TilesetActions(class me2::terrain::TilesetActions &&)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TilesetActions",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TilesetActions::TilesetActions(const class me2::terrain::TilesetActions &)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Constructor_UserDefined",
          "name": "TilesetActions",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TilesetActions::Trigger(me2::terrain::TilesetActions::Index)": {
          "access": "public",
          "args": {
            "index": {
              "full_type": "me2::terrain::TilesetActions::Index",
              "name": "index",
              "src_info": {
                "col": 36,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 18
              },
              "type": null
            }
          },
          "branches": 3,
          "definitions": {
            "__begin2": {
              "full_type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>>>::_Rb_tree_iterator",
              "name": "__begin2",
              "src_info": {
                "col": 24,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 19
              },
              "type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>>>::_Rb_tree_iterator"
            },
            "__end2": {
              "full_type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>>>::_Rb_tree_iterator",
              "name": "__end2",
              "src_info": {
                "col": 24,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 19
              },
              "type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>>>::_Rb_tree_iterator"
            },
            "__range2": {
              "full_type": "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>>>>::map",
              "name": "__range2",
              "src_info": {
                "col": 26,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 19
              },
              "type": "std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>>>>::map"
            },
            "is_index_tagged": {
              "full_type": "const _Bool",
              "name": "is_index_tagged",
              "src_info": {
                "col": 16,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 20
              },
              "type": null
            },
            "j": {
              "full_type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::function<void(int)>>>::_Rb_tree_iterator",
              "name": "j",
              "src_info": {
                "col": 18,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 22
              },
              "type": "std::_Rb_tree_iterator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::function<void(int)>>>::_Rb_tree_iterator"
            },
            "tag": {
              "full_type": "std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>>::pair",
              "name": "tag",
              "src_info": {
                "col": 20,
                "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
                "line": 19
              },
              "type": "std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::set<int,std::less<int>,std::allocator<int>>>::pair"
            }
          },
          "lines": 9,
          "literals": 0,
          "loops": 0,
          "max_scope": 2,
          "method_type": "UserMethod",
          "name": "Trigger",
          "ret_type": "void",
          "src_info": {
            "col": 22,
            "file": "/home/vkrs/Documents/projects/me2/src/terrain/tileset_actions.cpp",
            "line": 18
          },
          "statements": 6,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TilesetActions::operator=(class me2::terrain::TilesetActions &&)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::TilesetActions",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
                "line": 13
              },
              "type": "me2::terrain::TilesetActions"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::TilesetActions",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TilesetActions::operator=(const class me2::terrain::TilesetActions &)": {
          "access": "unknown",
          "args": {
            "": {
              "full_type": "me2::terrain::TilesetActions",
              "name": "",
              "src_info": {
                "col": 7,
                "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
                "line": 13
              },
              "type": "me2::terrain::TilesetActions"
            }
          },
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "OverloadedOperator_UserDefined",
          "name": "operator=",
          "ret_type": "me2::terrain::TilesetActions",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        },
        "me2::terrain::TilesetActions::~TilesetActions(void)": {
          "access": "unknown",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "Destructor_UserDefined",
          "name": "~TilesetActions",
          "ret_type": "void",
          "src_info": {
            "col": 7,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
            "line": 13
          },
          "statements": 0,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "TilesetActions",
      "namespace": "me2::terrain::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/terrain/tileset_actions.hpp",
        "line": 13
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::timing::FrameObserver": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::timing::FrameObserver::on_interval": {
          "access": "private",
          "full_type": "_Bool",
          "name": "on_interval",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/timing/frame_observer.hpp",
            "line": 15
          },
          "type": null
        }
      },
      "friends": null,
      "methods": {
        "me2::timing::FrameObserver::CheckForFrame(ALLEGRO_EVENT &)": {
          "access": "public",
          "args": {
            "event": {
              "full_type": "ALLEGRO_EVENT &",
              "name": "event",
              "src_info": {
                "col": 50,
                "file": "/home/vkrs/Documents/projects/me2/src/timing/frame_observer.cpp",
                "line": 5
              },
              "type": null
            }
          },
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 1,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "CheckForFrame",
          "ret_type": "void",
          "src_info": {
            "col": 21,
            "file": "/home/vkrs/Documents/projects/me2/src/timing/frame_observer.cpp",
            "line": 5
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::timing::FrameObserver::ConcludeFrame(void)": {
          "access": "public",
          "args": null,
          "branches": 0,
          "definitions": null,
          "lines": 0,
          "literals": 1,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "ConcludeFrame",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/timing/frame_observer.hpp",
            "line": 11
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::timing::FrameObserver::OnInterval(void) const -> _Bool": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 0,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "OnInterval",
          "ret_type": "void",
          "src_info": {
            "col": 8,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/timing/frame_observer.hpp",
            "line": 9
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "FrameObserver",
      "namespace": "me2::timing::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/timing/frame_observer.hpp",
        "line": 7
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    },
    "me2::timing::SystemClock": {
      "bases": null,
      "contains": null,
      "fields": {
        "me2::timing::SystemClock::clock": {
          "access": "private",
          "full_type": "std::chrono::high_resolution_clock",
          "name": "clock",
          "src_info": {
            "col": 38,
            "file": "/home/vkrs/Documents/projects/me2/include/me2/timing/system_clock.hpp",
            "line": 14
          },
          "type": "std::chrono::system_clock"
        }
      },
      "friends": null,
      "methods": {
        "me2::timing::SystemClock::Microsecs(void) const -> uint64_t": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Microsecs",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/timing/system_clock.cpp",
            "line": 19
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::timing::SystemClock::Milisecs(void) const -> uint64_t": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Milisecs",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/timing/system_clock.cpp",
            "line": 15
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        },
        "me2::timing::SystemClock::Nanosecs(void) const -> uint64_t": {
          "access": "public",
          "args": null,
          "branches": 1,
          "definitions": null,
          "lines": 2,
          "literals": 0,
          "loops": 0,
          "max_scope": 0,
          "method_type": "UserMethod",
          "name": "Nanosecs",
          "ret_type": "void",
          "src_info": {
            "col": 19,
            "file": "/home/vkrs/Documents/projects/me2/src/timing/system_clock.cpp",
            "line": 23
          },
          "statements": 1,
          "template_args": null,
          "virtual": false
        }
      },
      "name": "SystemClock",
      "namespace": "me2::timing::",
      "nested_parent": null,
      "src_info": {
        "col": 7,
        "file": "/home/vkrs/Documents/projects/me2/include/me2/timing/system_clock.hpp",
        "line": 7
      },
      "structure_type": "Class",
      "template_args": null,
      "template_parent": null
    }
  }
}